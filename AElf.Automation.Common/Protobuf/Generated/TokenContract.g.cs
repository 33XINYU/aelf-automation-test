// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.MultiToken.Messages {

  /// <summary>Holder for reflection information generated from token_contract.proto</summary>
  public static partial class TokenContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0b2tlbl9jb250cmFjdC5wcm90bxoMY29tbW9uLnByb3RvGhJhZWxmX29w",
            "dGlvbnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90byKTAQoJ",
            "VG9rZW5JbmZvEg4KBnN5bWJvbBgBIAEoCRIRCgl0b2tlbk5hbWUYAiABKAkS",
            "DgoGc3VwcGx5GAMgASgSEhMKC3RvdGFsU3VwcGx5GAQgASgSEhAKCGRlY2lt",
            "YWxzGAUgASgREhgKBmlzc3VlchgGIAEoCzIILkFkZHJlc3MSEgoKaXNCdXJu",
            "YWJsZRgHIAEoCCKmAQoLQ3JlYXRlSW5wdXQSDgoGc3ltYm9sGAEgASgJEhEK",
            "CXRva2VuTmFtZRgCIAEoCRITCgt0b3RhbFN1cHBseRgDIAEoEhIQCghkZWNp",
            "bWFscxgEIAEoERIYCgZpc3N1ZXIYBSABKAsyCC5BZGRyZXNzEhIKCmlzQnVy",
            "bmFibGUYBiABKAgSHwoNbG9ja1doaXRlTGlzdBgHIAMoCzIILkFkZHJlc3Mi",
            "wAEKFkNyZWF0ZU5hdGl2ZVRva2VuSW5wdXQSDgoGc3ltYm9sGAEgASgJEhEK",
            "CXRva2VuTmFtZRgCIAEoCRITCgt0b3RhbFN1cHBseRgDIAEoEhIQCghkZWNp",
            "bWFscxgEIAEoERIYCgZpc3N1ZXIYBSABKAsyCC5BZGRyZXNzEhIKCmlzQnVy",
            "bmFibGUYBiABKAgSLgofbG9ja1doaXRlU3lzdGVtQ29udHJhY3ROYW1lTGlz",
            "dBgHIAMoCzIFLkhhc2giUAoKSXNzdWVJbnB1dBIOCgZzeW1ib2wYASABKAkS",
            "DgoGYW1vdW50GAIgASgSEgwKBG1lbW8YAyABKAkSFAoCdG8YBCABKAsyCC5B",
            "ZGRyZXNzImoKFUlzc3VlTmF0aXZlVG9rZW5JbnB1dBIOCgZzeW1ib2wYASAB",
            "KAkSDgoGYW1vdW50GAIgASgSEgwKBG1lbW8YAyABKAkSIwoUdG9TeXN0ZW1D",
            "b250cmFjdE5hbWUYBCABKAsyBS5IYXNoIlMKDVRyYW5zZmVySW5wdXQSFAoC",
            "dG8YASABKAsyCC5BZGRyZXNzEg4KBnN5bWJvbBgCIAEoCRIOCgZhbW91bnQY",
            "AyABKBISDAoEbWVtbxgEIAEoCSJ/CglMb2NrSW5wdXQSFgoEZnJvbRgBIAEo",
            "CzIILkFkZHJlc3MSFAoCdG8YAiABKAsyCC5BZGRyZXNzEhUKBmxvY2tJZBgD",
            "IAEoCzIFLkhhc2gSDgoGc3ltYm9sGAQgASgJEg0KBXVzYWdlGAUgASgJEg4K",
            "BmFtb3VudBgGIAEoAyKBAQoLVW5sb2NrSW5wdXQSFgoEZnJvbRgBIAEoCzII",
            "LkFkZHJlc3MSFAoCdG8YAiABKAsyCC5BZGRyZXNzEhUKBmxvY2tJZBgDIAEo",
            "CzIFLkhhc2gSDgoGc3ltYm9sGAQgASgJEg0KBXVzYWdlGAUgASgJEg4KBmFt",
            "b3VudBgGIAEoAyJvChFUcmFuc2ZlckZyb21JbnB1dBIWCgRmcm9tGAEgASgL",
            "MgguQWRkcmVzcxIUCgJ0bxgCIAEoCzIILkFkZHJlc3MSDgoGc3ltYm9sGAMg",
            "ASgJEg4KBmFtb3VudBgEIAEoEhIMCgRtZW1vGAUgASgJIkkKDEFwcHJvdmVJ",
            "bnB1dBIZCgdzcGVuZGVyGAEgASgLMgguQWRkcmVzcxIOCgZzeW1ib2wYAiAB",
            "KAkSDgoGYW1vdW50GAMgASgSIksKDlVuQXBwcm92ZUlucHV0EhkKB3NwZW5k",
            "ZXIYASABKAsyCC5BZGRyZXNzEg4KBnN5bWJvbBgCIAEoCRIOCgZhbW91bnQY",
            "AyABKBIiKwoJQnVybklucHV0Eg4KBnN5bWJvbBgBIAEoCRIOCgZhbW91bnQY",
            "AiABKBIiPAoaQ2hhcmdlVHJhbnNhY3Rpb25GZWVzSW5wdXQSDgoGc3ltYm9s",
            "GAEgASgJEg4KBmFtb3VudBgCIAEoEiI7ChlDbGFpbVRyYW5zYWN0aW9uRmVl",
            "c0lucHV0Eg4KBnN5bWJvbBgBIAEoCRIOCgZoZWlnaHQYAiABKBIiIwoRR2V0",
            "TWV0aG9kRmVlSW5wdXQSDgoGbWV0aG9kGAEgASgJIjEKEkdldE1ldGhvZEZl",
            "ZU91dHB1dBIOCgZtZXRob2QYASABKAkSCwoDZmVlGAIgASgSIjAKEVNldE1l",
            "dGhvZEZlZUlucHV0Eg4KBm1ldGhvZBgBIAEoCRILCgNmZWUYAiABKBIiIwoR",
            "R2V0VG9rZW5JbmZvSW5wdXQSDgoGc3ltYm9sGAEgASgJIjoKD0dldEJhbGFu",
            "Y2VJbnB1dBIOCgZzeW1ib2wYASABKAkSFwoFb3duZXIYAiABKAsyCC5BZGRy",
            "ZXNzIkwKEEdldEJhbGFuY2VPdXRwdXQSDgoGc3ltYm9sGAEgASgJEhcKBW93",
            "bmVyGAIgASgLMgguQWRkcmVzcxIPCgdiYWxhbmNlGAMgASgSIlcKEUdldEFs",
            "bG93YW5jZUlucHV0Eg4KBnN5bWJvbBgBIAEoCRIXCgVvd25lchgCIAEoCzII",
            "LkFkZHJlc3MSGQoHc3BlbmRlchgDIAEoCzIILkFkZHJlc3MiawoSR2V0QWxs",
            "b3dhbmNlT3V0cHV0Eg4KBnN5bWJvbBgBIAEoCRIXCgVvd25lchgCIAEoCzII",
            "LkFkZHJlc3MSGQoHc3BlbmRlchgDIAEoCzIILkFkZHJlc3MSEQoJYWxsb3dh",
            "bmNlGAQgASgSMucICg1Ub2tlbkNvbnRyYWN0EjAKBkNyZWF0ZRIMLkNyZWF0",
            "ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASRgoRQ3JlYXRlTmF0",
            "aXZlVG9rZW4SFy5DcmVhdGVOYXRpdmVUb2tlbklucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASLgoFSXNzdWUSCy5Jc3N1ZUlucHV0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASRAoQSXNzdWVOYXRpdmVUb2tlbhIWLklzc3Vl",
            "TmF0aXZlVG9rZW5JbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjQK",
            "CFRyYW5zZmVyEg4uVHJhbnNmZXJJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5F",
            "bXB0eSIAEjwKDFRyYW5zZmVyRnJvbRISLlRyYW5zZmVyRnJvbUlucHV0GhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASMgoHQXBwcm92ZRINLkFwcHJvdmVJ",
            "bnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjYKCVVuQXBwcm92ZRIP",
            "LlVuQXBwcm92ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASLAoE",
            "TG9jaxIKLkxvY2tJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjAK",
            "BlVubG9jaxIMLlVubG9ja0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5",
            "IgASLAoEQnVybhIKLkJ1cm5JbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0",
            "eSIAEk4KFUNoYXJnZVRyYW5zYWN0aW9uRmVlcxIbLkNoYXJnZVRyYW5zYWN0",
            "aW9uRmVlc0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASTAoUQ2xh",
            "aW1UcmFuc2FjdGlvbkZlZXMSGi5DbGFpbVRyYW5zYWN0aW9uRmVlc0lucHV0",
            "GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASPAoMU2V0TWV0aG9kRmVlEhIu",
            "U2V0TWV0aG9kRmVlSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI1",
            "CgxHZXRUb2tlbkluZm8SEi5HZXRUb2tlbkluZm9JbnB1dBoKLlRva2VuSW5m",
            "byIF2LanAQESOAoKR2V0QmFsYW5jZRIQLkdldEJhbGFuY2VJbnB1dBoRLkdl",
            "dEJhbGFuY2VPdXRwdXQiBdi2pwEBEj4KDEdldEFsbG93YW5jZRISLkdldEFs",
            "bG93YW5jZUlucHV0GhMuR2V0QWxsb3dhbmNlT3V0cHV0IgXYtqcBARI5CgxH",
            "ZXRNZXRob2RGZWUSEi5HZXRNZXRob2RGZWVJbnB1dBoTLkdldE1ldGhvZEZl",
            "ZU91dHB1dCIAGjCqpHQsQUVsZi5Db250cmFjdHMuTXVsdGlUb2tlbi5Ub2tl",
            "bkNvbnRyYWN0U3RhdGVCJaoCIkFFbGYuQ29udHJhY3RzLk11bHRpVG9rZW4u",
            "TWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Common.CommonReflection.Descriptor, global::Aelf.AelfOptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.TokenInfo), global::AElf.Contracts.MultiToken.Messages.TokenInfo.Parser, new[]{ "Symbol", "TokenName", "Supply", "TotalSupply", "Decimals", "Issuer", "IsBurnable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.CreateInput), global::AElf.Contracts.MultiToken.Messages.CreateInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "LockWhiteList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.CreateNativeTokenInput), global::AElf.Contracts.MultiToken.Messages.CreateNativeTokenInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "LockWhiteSystemContractNameList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.IssueInput), global::AElf.Contracts.MultiToken.Messages.IssueInput.Parser, new[]{ "Symbol", "Amount", "Memo", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.IssueNativeTokenInput), global::AElf.Contracts.MultiToken.Messages.IssueNativeTokenInput.Parser, new[]{ "Symbol", "Amount", "Memo", "ToSystemContractName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.TransferInput), global::AElf.Contracts.MultiToken.Messages.TransferInput.Parser, new[]{ "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.LockInput), global::AElf.Contracts.MultiToken.Messages.LockInput.Parser, new[]{ "From", "To", "LockId", "Symbol", "Usage", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.UnlockInput), global::AElf.Contracts.MultiToken.Messages.UnlockInput.Parser, new[]{ "From", "To", "LockId", "Symbol", "Usage", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.TransferFromInput), global::AElf.Contracts.MultiToken.Messages.TransferFromInput.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.ApproveInput), global::AElf.Contracts.MultiToken.Messages.ApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.UnApproveInput), global::AElf.Contracts.MultiToken.Messages.UnApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.BurnInput), global::AElf.Contracts.MultiToken.Messages.BurnInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.ChargeTransactionFeesInput), global::AElf.Contracts.MultiToken.Messages.ChargeTransactionFeesInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.ClaimTransactionFeesInput), global::AElf.Contracts.MultiToken.Messages.ClaimTransactionFeesInput.Parser, new[]{ "Symbol", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetMethodFeeInput), global::AElf.Contracts.MultiToken.Messages.GetMethodFeeInput.Parser, new[]{ "Method" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetMethodFeeOutput), global::AElf.Contracts.MultiToken.Messages.GetMethodFeeOutput.Parser, new[]{ "Method", "Fee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.SetMethodFeeInput), global::AElf.Contracts.MultiToken.Messages.SetMethodFeeInput.Parser, new[]{ "Method", "Fee" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetTokenInfoInput), global::AElf.Contracts.MultiToken.Messages.GetTokenInfoInput.Parser, new[]{ "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetBalanceInput), global::AElf.Contracts.MultiToken.Messages.GetBalanceInput.Parser, new[]{ "Symbol", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetBalanceOutput), global::AElf.Contracts.MultiToken.Messages.GetBalanceOutput.Parser, new[]{ "Symbol", "Owner", "Balance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetAllowanceInput), global::AElf.Contracts.MultiToken.Messages.GetAllowanceInput.Parser, new[]{ "Symbol", "Owner", "Spender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetAllowanceOutput), global::AElf.Contracts.MultiToken.Messages.GetAllowanceOutput.Parser, new[]{ "Symbol", "Owner", "Spender", "Allowance" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TokenInfo : pb::IMessage<TokenInfo> {
    private static readonly pb::MessageParser<TokenInfo> _parser = new pb::MessageParser<TokenInfo>(() => new TokenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo(TokenInfo other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      supply_ = other.supply_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo Clone() {
      return new TokenInfo(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenName" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supply" field.</summary>
    public const int SupplyFieldNumber = 3;
    private long supply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Supply {
      get { return supply_; }
      set {
        supply_ = value;
      }
    }

    /// <summary>Field number for the "totalSupply" field.</summary>
    public const int TotalSupplyFieldNumber = 4;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 5;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 6;
    private global::AElf.Common.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "isBurnable" field.</summary>
    public const int IsBurnableFieldNumber = 7;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (Supply != other.Supply) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (Supply != 0L) hash ^= Supply.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (Supply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Supply);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsBurnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (Supply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Supply);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.Supply != 0L) {
        Supply = other.Supply;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Common.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            Supply = input.ReadSInt64();
            break;
          }
          case 32: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 40: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 50: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Common.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 56: {
            IsBurnable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateInput : pb::IMessage<CreateInput> {
    private static readonly pb::MessageParser<CreateInput> _parser = new pb::MessageParser<CreateInput>(() => new CreateInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput(CreateInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      lockWhiteList_ = other.lockWhiteList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput Clone() {
      return new CreateInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenName" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalSupply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Common.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "isBurnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "lockWhiteList" field.</summary>
    public const int LockWhiteListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Common.Address> _repeated_lockWhiteList_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Common.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Common.Address> lockWhiteList_ = new pbc::RepeatedField<global::AElf.Common.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Common.Address> LockWhiteList {
      get { return lockWhiteList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if(!lockWhiteList_.Equals(other.lockWhiteList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      hash ^= lockWhiteList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      lockWhiteList_.WriteTo(output, _repeated_lockWhiteList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      size += lockWhiteList_.CalculateSize(_repeated_lockWhiteList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Common.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      lockWhiteList_.Add(other.lockWhiteList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Common.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 58: {
            lockWhiteList_.AddEntriesFrom(input, _repeated_lockWhiteList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateNativeTokenInput : pb::IMessage<CreateNativeTokenInput> {
    private static readonly pb::MessageParser<CreateNativeTokenInput> _parser = new pb::MessageParser<CreateNativeTokenInput>(() => new CreateNativeTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNativeTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNativeTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNativeTokenInput(CreateNativeTokenInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      lockWhiteSystemContractNameList_ = other.lockWhiteSystemContractNameList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNativeTokenInput Clone() {
      return new CreateNativeTokenInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenName" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalSupply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Common.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "isBurnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "lockWhiteSystemContractNameList" field.</summary>
    public const int LockWhiteSystemContractNameListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Common.Hash> _repeated_lockWhiteSystemContractNameList_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Common.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Common.Hash> lockWhiteSystemContractNameList_ = new pbc::RepeatedField<global::AElf.Common.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Common.Hash> LockWhiteSystemContractNameList {
      get { return lockWhiteSystemContractNameList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNativeTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNativeTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if(!lockWhiteSystemContractNameList_.Equals(other.lockWhiteSystemContractNameList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      hash ^= lockWhiteSystemContractNameList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      lockWhiteSystemContractNameList_.WriteTo(output, _repeated_lockWhiteSystemContractNameList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      size += lockWhiteSystemContractNameList_.CalculateSize(_repeated_lockWhiteSystemContractNameList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNativeTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Common.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      lockWhiteSystemContractNameList_.Add(other.lockWhiteSystemContractNameList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Common.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 58: {
            lockWhiteSystemContractNameList_.AddEntriesFrom(input, _repeated_lockWhiteSystemContractNameList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IssueInput : pb::IMessage<IssueInput> {
    private static readonly pb::MessageParser<IssueInput> _parser = new pb::MessageParser<IssueInput>(() => new IssueInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput(IssueInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput Clone() {
      return new IssueInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private global::AElf.Common.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (to_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Common.Address();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (to_ == null) {
              To = new global::AElf.Common.Address();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IssueNativeTokenInput : pb::IMessage<IssueNativeTokenInput> {
    private static readonly pb::MessageParser<IssueNativeTokenInput> _parser = new pb::MessageParser<IssueNativeTokenInput>(() => new IssueNativeTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueNativeTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueNativeTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueNativeTokenInput(IssueNativeTokenInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      toSystemContractName_ = other.toSystemContractName_ != null ? other.toSystemContractName_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueNativeTokenInput Clone() {
      return new IssueNativeTokenInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toSystemContractName" field.</summary>
    public const int ToSystemContractNameFieldNumber = 4;
    private global::AElf.Common.Hash toSystemContractName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash ToSystemContractName {
      get { return toSystemContractName_; }
      set {
        toSystemContractName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueNativeTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueNativeTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(ToSystemContractName, other.ToSystemContractName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (toSystemContractName_ != null) hash ^= ToSystemContractName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (toSystemContractName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ToSystemContractName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (toSystemContractName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToSystemContractName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueNativeTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.toSystemContractName_ != null) {
        if (toSystemContractName_ == null) {
          ToSystemContractName = new global::AElf.Common.Hash();
        }
        ToSystemContractName.MergeFrom(other.ToSystemContractName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (toSystemContractName_ == null) {
              ToSystemContractName = new global::AElf.Common.Hash();
            }
            input.ReadMessage(ToSystemContractName);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferInput : pb::IMessage<TransferInput> {
    private static readonly pb::MessageParser<TransferInput> _parser = new pb::MessageParser<TransferInput>(() => new TransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput(TransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput Clone() {
      return new TransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Common.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Common.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Common.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockInput : pb::IMessage<LockInput> {
    private static readonly pb::MessageParser<LockInput> _parser = new pb::MessageParser<LockInput>(() => new LockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput(LockInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput Clone() {
      return new LockInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Common.Address from_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Common.Address to_;
    /// <summary>
    /// The address in white list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "lockId" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Common.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 5;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Common.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Common.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Common.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Common.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Common.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Common.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Usage = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockInput : pb::IMessage<UnlockInput> {
    private static readonly pb::MessageParser<UnlockInput> _parser = new pb::MessageParser<UnlockInput>(() => new UnlockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput(UnlockInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput Clone() {
      return new UnlockInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Common.Address from_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Common.Address to_;
    /// <summary>
    /// The address in white list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "lockId" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Common.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 5;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Common.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Common.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Common.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Common.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Common.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Common.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Usage = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferFromInput : pb::IMessage<TransferFromInput> {
    private static readonly pb::MessageParser<TransferFromInput> _parser = new pb::MessageParser<TransferFromInput>(() => new TransferFromInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferFromInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput(TransferFromInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput Clone() {
      return new TransferFromInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Common.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Common.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferFromInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferFromInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferFromInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Common.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Common.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Common.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Common.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveInput : pb::IMessage<ApproveInput> {
    private static readonly pb::MessageParser<ApproveInput> _parser = new pb::MessageParser<ApproveInput>(() => new ApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput(ApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput Clone() {
      return new ApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Common.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Common.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Common.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnApproveInput : pb::IMessage<UnApproveInput> {
    private static readonly pb::MessageParser<UnApproveInput> _parser = new pb::MessageParser<UnApproveInput>(() => new UnApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput(UnApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput Clone() {
      return new UnApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Common.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Common.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Common.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BurnInput : pb::IMessage<BurnInput> {
    private static readonly pb::MessageParser<BurnInput> _parser = new pb::MessageParser<BurnInput>(() => new BurnInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BurnInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput(BurnInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput Clone() {
      return new BurnInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BurnInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BurnInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BurnInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChargeTransactionFeesInput : pb::IMessage<ChargeTransactionFeesInput> {
    private static readonly pb::MessageParser<ChargeTransactionFeesInput> _parser = new pb::MessageParser<ChargeTransactionFeesInput>(() => new ChargeTransactionFeesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeTransactionFeesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput(ChargeTransactionFeesInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput Clone() {
      return new ChargeTransactionFeesInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeTransactionFeesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeTransactionFeesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeTransactionFeesInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimTransactionFeesInput : pb::IMessage<ClaimTransactionFeesInput> {
    private static readonly pb::MessageParser<ClaimTransactionFeesInput> _parser = new pb::MessageParser<ClaimTransactionFeesInput>(() => new ClaimTransactionFeesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimTransactionFeesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimTransactionFeesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimTransactionFeesInput(ClaimTransactionFeesInput other) : this() {
      symbol_ = other.symbol_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimTransactionFeesInput Clone() {
      return new ClaimTransactionFeesInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimTransactionFeesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimTransactionFeesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Height != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimTransactionFeesInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Height = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMethodFeeInput : pb::IMessage<GetMethodFeeInput> {
    private static readonly pb::MessageParser<GetMethodFeeInput> _parser = new pb::MessageParser<GetMethodFeeInput>(() => new GetMethodFeeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMethodFeeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMethodFeeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMethodFeeInput(GetMethodFeeInput other) : this() {
      method_ = other.method_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMethodFeeInput Clone() {
      return new GetMethodFeeInput(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMethodFeeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMethodFeeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMethodFeeInput other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetMethodFeeOutput : pb::IMessage<GetMethodFeeOutput> {
    private static readonly pb::MessageParser<GetMethodFeeOutput> _parser = new pb::MessageParser<GetMethodFeeOutput>(() => new GetMethodFeeOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetMethodFeeOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMethodFeeOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMethodFeeOutput(GetMethodFeeOutput other) : this() {
      method_ = other.method_;
      fee_ = other.fee_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetMethodFeeOutput Clone() {
      return new GetMethodFeeOutput(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 2;
    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetMethodFeeOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetMethodFeeOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Fee != other.Fee) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Fee != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Fee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Fee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetMethodFeeOutput other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 16: {
            Fee = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetMethodFeeInput : pb::IMessage<SetMethodFeeInput> {
    private static readonly pb::MessageParser<SetMethodFeeInput> _parser = new pb::MessageParser<SetMethodFeeInput>(() => new SetMethodFeeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetMethodFeeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMethodFeeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMethodFeeInput(SetMethodFeeInput other) : this() {
      method_ = other.method_;
      fee_ = other.fee_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetMethodFeeInput Clone() {
      return new SetMethodFeeInput(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private string method_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Method {
      get { return method_; }
      set {
        method_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 2;
    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetMethodFeeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetMethodFeeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Fee != other.Fee) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method.Length != 0) hash ^= Method.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Method.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Method);
      }
      if (Fee != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Fee);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Method);
      }
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Fee);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetMethodFeeInput other) {
      if (other == null) {
        return;
      }
      if (other.Method.Length != 0) {
        Method = other.Method;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Method = input.ReadString();
            break;
          }
          case 16: {
            Fee = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTokenInfoInput : pb::IMessage<GetTokenInfoInput> {
    private static readonly pb::MessageParser<GetTokenInfoInput> _parser = new pb::MessageParser<GetTokenInfoInput>(() => new GetTokenInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput(GetTokenInfoInput other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput Clone() {
      return new GetTokenInfoInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceInput : pb::IMessage<GetBalanceInput> {
    private static readonly pb::MessageParser<GetBalanceInput> _parser = new pb::MessageParser<GetBalanceInput>(() => new GetBalanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput(GetBalanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput Clone() {
      return new GetBalanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Common.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Common.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Common.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceOutput : pb::IMessage<GetBalanceOutput> {
    private static readonly pb::MessageParser<GetBalanceOutput> _parser = new pb::MessageParser<GetBalanceOutput>(() => new GetBalanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput(GetBalanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      balance_ = other.balance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput Clone() {
      return new GetBalanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Common.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 3;
    private long balance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (Balance != other.Balance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (Balance != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Balance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Balance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Common.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Common.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 24: {
            Balance = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllowanceInput : pb::IMessage<GetAllowanceInput> {
    private static readonly pb::MessageParser<GetAllowanceInput> _parser = new pb::MessageParser<GetAllowanceInput>(() => new GetAllowanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput(GetAllowanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput Clone() {
      return new GetAllowanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Common.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Common.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Common.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Common.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Common.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Common.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllowanceOutput : pb::IMessage<GetAllowanceOutput> {
    private static readonly pb::MessageParser<GetAllowanceOutput> _parser = new pb::MessageParser<GetAllowanceOutput>(() => new GetAllowanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput(GetAllowanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      allowance_ = other.allowance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput Clone() {
      return new GetAllowanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Common.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Common.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Common.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 4;
    private long allowance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Allowance != other.Allowance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Allowance != 0L) hash ^= Allowance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (Allowance != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Allowance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Allowance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Allowance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Common.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Common.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Allowance != 0L) {
        Allowance = other.Allowance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Common.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Common.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 32: {
            Allowance = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
