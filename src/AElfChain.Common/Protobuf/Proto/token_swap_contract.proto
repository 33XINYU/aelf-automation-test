syntax = "proto3";

package tokenswap;

import "aelf/core.proto";
import "acs1.proto";
import "google/protobuf/timestamp.proto";

service TokenSwapContract{
    option (aelf.csharp_state) = "TokenSwapContract.TokenSwapContractState";
    option (aelf.base) = "acs1.proto";

    rpc AddSwapPair(AddSwapPairInput) returns (aelf.Hash) {
    }
    rpc AddSwapRound(AddSwapRoundInput) returns (google.protobuf.Empty) {
    }
    rpc SwapToken(SwapTokenInput) returns (google.protobuf.Empty) {
    }
    rpc ChangeSwapRatio(ChainSwapRatioInput) returns (google.protobuf.Empty) {
    }
    rpc Deposit(DepositInput) returns (google.protobuf.Empty) {
    }
    rpc GetSwapPair(aelf.Hash) returns (SwapPair) {
    }
    rpc GetCurrentSwapRound(aelf.Hash) returns (SwapRound) {
    }
}

message AddSwapPairInput {
    int32 origin_token_size_in_byte = 1;
    bool origin_token_numeric_big_endian = 2;
    string target_token_symbol = 3;
    SwapRatio swap_ratio = 4;
    int64 deposit_amount = 5;
}

message SwapPair{
    aelf.Hash pair_id = 1;
    int32 origin_token_size_in_byte = 2;
    bool origin_token_numeric_big_endian = 3;
    string target_token_symbol = 4;
    SwapRatio swap_ratio = 5;
    aelf.Address controller = 6;
    int64 swapped_amount = 7;
    int64 swapped_times = 8;
    SwapRound current_round = 9;
    int64 deposit_amount = 10;
}

message SwapRatio{
    int64 origin_share = 1;
    int64 target_share = 2;
}

message ChainSwapRatioInput{
    aelf.Hash pair_id = 1;
    SwapRatio swap_ratio = 2;
}

message AddSwapRoundInput{
    aelf.Hash pair_id = 1;
    aelf.Hash merkle_tree_root = 2;
}

message SwapRound{
    aelf.Hash pair_id = 1;
    aelf.Hash merkle_tree_root = 2;
    google.protobuf.Timestamp start_time = 3;
    int64 swapped_amount = 4;
    int64 swapped_times = 5;
}

message SwapTokenInput{
    aelf.Hash pair_id = 1;
    string origin_amount = 2;
    aelf.MerklePath merkle_path = 3;
    aelf.Address receiver_address = 4;
    aelf.Hash unique_id = 5; // to make every swap unique 
}

message SwapPairAdded{
    option (aelf.is_event) = true;
    aelf.Hash pair_id = 1;
}

message SwapRoundUpdated{
    option (aelf.is_event) = true;
    aelf.Hash merkle_tree_root = 1;
    google.protobuf.Timestamp start_time = 2;
    aelf.Hash pair_id = 3;
}


message DepositInput{
    aelf.Hash pair_id = 1;
    int64 amount = 2; 
}

message SwapRatioChanged{
    option (aelf.is_event) = true;
    aelf.Hash pair_id = 1;
    SwapRatio new_swap_ratio = 2;
}

message TokenSwapEvent{
    option (aelf.is_event) = true;
    aelf.Address address = 1;
    int64 amount = 2;
    string symbol = 3;
}

