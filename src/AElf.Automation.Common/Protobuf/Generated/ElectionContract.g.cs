// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: election_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.Election {

  /// <summary>Holder for reflection information generated from election_contract.proto</summary>
  public static partial class ElectionContractReflection {

    #region Descriptor
    /// <summary>File descriptor for election_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ElectionContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdlbGVjdGlvbl9jb250cmFjdC5wcm90bxIIZWxlY3Rpb24aEmFlbGZfb3B0",
            "aW9ucy5wcm90bxoMY29tbW9uLnByb3RvGhtnb29nbGUvcHJvdG9idWYvZW1w",
            "dHkucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8iiQIK",
            "HEluaXRpYWxFbGVjdGlvbkNvbnRyYWN0SW5wdXQSKAoZdm90ZV9jb250cmFj",
            "dF9zeXN0ZW1fbmFtZRgBIAEoCzIFLkhhc2gSKgobcHJvZml0X2NvbnRyYWN0",
            "X3N5c3RlbV9uYW1lGAIgASgLMgUuSGFzaBIpChp0b2tlbl9jb250cmFjdF9z",
            "eXN0ZW1fbmFtZRgDIAEoCzIFLkhhc2gSMgojYWVsZl9jb25zZW5zdXNfY29u",
            "dHJhY3Rfc3lzdGVtX25hbWUYBCABKAsyBS5IYXNoEhkKEW1pbmltdW1fbG9j",
            "a190aW1lGAUgASgREhkKEW1heGltdW1fbG9ja190aW1lGAYgASgRIisKFEdl",
            "dFRlcm1TbmFwc2hvdElucHV0EhMKC3Rlcm1fbnVtYmVyGAEgASgSIpEBCh9V",
            "cGRhdGVDYW5kaWRhdGVJbmZvcm1hdGlvbklucHV0EhIKCnB1YmxpY19rZXkY",
            "ASABKAkSIAoYcmVjZW50bHlfcHJvZHVjZWRfYmxvY2tzGAIgASgSEiIKGnJl",
            "Y2VudGx5X21pc3NlZF90aW1lX3Nsb3RzGAMgASgSEhQKDGlzX2V2aWxfbm9k",
            "ZRgEIAEoCCJeChtSZWxlYXNlVHJlYXN1cnlQcm9maXRzSW5wdXQSEwoLdGVy",
            "bV9udW1iZXIYASABKBISFAoMbWluZWRfYmxvY2tzGAIgASgSEhQKDHJvdW5k",
            "X251bWJlchgDIAEoEiJwCg5Wb3RlTWluZXJJbnB1dBIbChNjYW5kaWRhdGVf",
            "cHVibGljS2V5GAEgASgJEg4KBmFtb3VudBgCIAEoEhIxCg1lbmRfdGltZXN0",
            "YW1wGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcCIsChVVcGRh",
            "dGVUZXJtTnVtYmVySW5wdXQSEwoLdGVybV9udW1iZXIYASABKBIiLQoWR2V0",
            "RWxlY3Rpb25SZXN1bHRJbnB1dBITCgt0ZXJtX251bWJlchgBIAEoEiKgAQoO",
            "RWxlY3Rpb25SZXN1bHQSEwoLdGVybV9udW1iZXIYASABKBISNgoHcmVzdWx0",
            "cxgCIAMoCzIlLmVsZWN0aW9uLkVsZWN0aW9uUmVzdWx0LlJlc3VsdHNFbnRy",
            "eRIRCglpc19hY3RpdmUYAyABKAgaLgoMUmVzdWx0c0VudHJ5EgsKA2tleRgB",
            "IAEoCRINCgV2YWx1ZRgCIAEoEjoCOAEiuQIKC0VsZWN0b3JWb3RlEicKGGFj",
            "dGl2ZV92b3RpbmdfcmVjb3JkX2lkcxgBIAMoCzIFLkhhc2gSKgobd2l0aGRy",
            "YXduX3ZvdGluZ19yZWNvcmRfaWRzGAIgAygLMgUuSGFzaBIhChlhY3RpdmVf",
            "dm90ZWRfdm90ZXNfYW1vdW50GAMgASgSEh4KFmFsbF92b3RlZF92b3Rlc19h",
            "bW91bnQYBCABKBISPQoVYWN0aXZlX3ZvdGluZ19yZWNvcmRzGAUgAygLMh4u",
            "ZWxlY3Rpb24uRWxlY3Rpb25Wb3RpbmdSZWNvcmQSPwoXd2l0aGRyYXduX3Zv",
            "dGVzX3JlY29yZHMYBiADKAsyHi5lbGVjdGlvbi5FbGVjdGlvblZvdGluZ1Jl",
            "Y29yZBISCgpwdWJsaWNfa2V5GAcgASgMIvECCg1DYW5kaWRhdGVWb3RlEjAK",
            "IW9idGFpbmVkX2FjdGl2ZV92b3RpbmdfcmVjb3JkX2lkcxgBIAMoCzIFLkhh",
            "c2gSMwokb2J0YWluZWRfd2l0aGRyYXduX3ZvdGluZ19yZWNvcmRfaWRzGAIg",
            "AygLMgUuSGFzaBIqCiJvYnRhaW5lZF9hY3RpdmVfdm90ZWRfdm90ZXNfYW1v",
            "dW50GAMgASgSEicKH2FsbF9vYnRhaW5lZF92b3RlZF92b3Rlc19hbW91bnQY",
            "BCABKBISRgoeb2J0YWluZWRfYWN0aXZlX3ZvdGluZ19yZWNvcmRzGAUgAygL",
            "Mh4uZWxlY3Rpb24uRWxlY3Rpb25Wb3RpbmdSZWNvcmQSSAogb2J0YWluZWRf",
            "d2l0aGRyYXduX3ZvdGVzX3JlY29yZHMYBiADKAsyHi5lbGVjdGlvbi5FbGVj",
            "dGlvblZvdGluZ1JlY29yZBISCgpwdWJsaWNfa2V5GAcgASgMItwBChRDYW5k",
            "aWRhdGVJbmZvcm1hdGlvbhISCgpwdWJsaWNfa2V5GAEgASgJEg0KBXRlcm1z",
            "GAIgAygDEhcKD3Byb2R1Y2VkX2Jsb2NrcxgDIAEoEhIZChFtaXNzZWRfdGlt",
            "ZV9zbG90cxgEIAEoEhIjChtjb250aW51YWxfYXBwb2ludG1lbnRfY291bnQY",
            "BSABKBISKgobYW5ub3VuY2VtZW50X3RyYW5zYWN0aW9uX2lkGAYgASgLMgUu",
            "SGFzaBIcChRpc19jdXJyZW50X2NhbmRpZGF0ZRgHIAEoCCLKAgoURWxlY3Rp",
            "b25Wb3RpbmdSZWNvcmQSFwoFdm90ZXIYASABKAsyCC5BZGRyZXNzEhEKCWNh",
            "bmRpZGF0ZRgCIAEoCRIOCgZhbW91bnQYAyABKBISEwoLdGVybV9udW1iZXIY",
            "BCABKBISFgoHdm90ZV9pZBgFIAEoCzIFLkhhc2gSEQoJbG9ja190aW1lGAcg",
            "ASgREjQKEHVubG9ja190aW1lc3RhbXAYCiABKAsyGi5nb29nbGUucHJvdG9i",
            "dWYuVGltZXN0YW1wEjYKEndpdGhkcmF3X3RpbWVzdGFtcBgLIAEoCzIaLmdv",
            "b2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASMgoOdm90ZV90aW1lc3RhbXAYDCAB",
            "KAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhQKDGlzX3dpdGhkcmF3",
            "bhgNIAEoCCIpCghQYWdlSW5mbxINCgVzdGFydBgBIAEoEhIOCgZsZW5ndGgY",
            "AiABKBIiHAoLU3RyaW5nSW5wdXQSDQoFdmFsdWUYASABKAkiHQoMU3RyaW5n",
            "T3V0cHV0Eg0KBXZhbHVlGAEgASgJIh8KDlB1YmxpY0tleXNMaXN0Eg0KBXZh",
            "bHVlGAEgAygMIroBCgxUZXJtU25hcHNob3QSGAoQZW5kX3JvdW5kX251bWJl",
            "chgBIAEoEhIUCgxtaW5lZF9ibG9ja3MYAiABKBISQwoPZWxlY3Rpb25fcmVz",
            "dWx0GAMgAygLMiouZWxlY3Rpb24uVGVybVNuYXBzaG90LkVsZWN0aW9uUmVz",
            "dWx0RW50cnkaNQoTRWxlY3Rpb25SZXN1bHRFbnRyeRILCgNrZXkYASABKAkS",
            "DQoFdmFsdWUYAiABKBI6AjgBIi4KFlVwZGF0ZU1pbmVyc0NvdW50SW5wdXQS",
            "FAoMbWluZXJzX2NvdW50GAEgASgRMokQChBFbGVjdGlvbkNvbnRyYWN0ElsK",
            "F0luaXRpYWxFbGVjdGlvbkNvbnRyYWN0EiYuZWxlY3Rpb24uSW5pdGlhbEVs",
            "ZWN0aW9uQ29udHJhY3RJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EkYKEFNldEluaXRpYWxNaW5lcnMSGC5lbGVjdGlvbi5QdWJsaWNLZXlzTGlz",
            "dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEk8KG1JlZ2lzdGVyRWxlY3Rp",
            "b25Wb3RpbmdFdmVudBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoWLmdvb2ds",
            "ZS5wcm90b2J1Zi5FbXB0eSIAEkIKDkNyZWF0ZVRyZWFzdXJ5EhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASRgoS",
            "UmVnaXN0ZXJUb1RyZWFzdXJ5EhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5IgASWQoWUmVsZWFzZVRyZWFzdXJ5UHJv",
            "Zml0cxIlLmVsZWN0aW9uLlJlbGVhc2VUcmVhc3VyeVByb2ZpdHNJbnB1dBoW",
            "Lmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEkQKEEFubm91bmNlRWxlY3Rpb24S",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJACgxRdWl0RWxlY3Rpb24SFi5nb29nbGUucHJvdG9idWYuRW1wdHka",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI6CgRWb3RlEhguZWxlY3Rpb24u",
            "Vm90ZU1pbmVySW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIrCghX",
            "aXRoZHJhdxIFLkhhc2gaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJhChpV",
            "cGRhdGVDYW5kaWRhdGVJbmZvcm1hdGlvbhIpLmVsZWN0aW9uLlVwZGF0ZUNh",
            "bmRpZGF0ZUluZm9ybWF0aW9uSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJPChFVcGRhdGVNaW5lcnNDb3VudBIgLmVsZWN0aW9uLlVwZGF0ZU1p",
            "bmVyc0NvdW50SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJICg1H",
            "ZXRDYW5kaWRhdGVzEhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5GhguZWxlY3Rp",
            "b24uUHVibGljS2V5c0xpc3QiBYiJ9wEBElcKF0dldENhbmRpZGF0ZUluZm9y",
            "bWF0aW9uEhUuZWxlY3Rpb24uU3RyaW5nSW5wdXQaHi5lbGVjdGlvbi5DYW5k",
            "aWRhdGVJbmZvcm1hdGlvbiIFiIn3AQESRwoMR2V0VmljdG9yaWVzEhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5GhguZWxlY3Rpb24uUHVibGljS2V5c0xpc3Qi",
            "BYiJ9wEBElAKD0dldFRlcm1TbmFwc2hvdBIeLmVsZWN0aW9uLkdldFRlcm1T",
            "bmFwc2hvdElucHV0GhYuZWxlY3Rpb24uVGVybVNuYXBzaG90IgWIifcBARI9",
            "Cg5HZXRNaW5lcnNDb3VudBIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoMLlNJ",
            "bnQzMlZhbHVlIgWIifcBARJWChFHZXRFbGVjdGlvblJlc3VsdBIgLmVsZWN0",
            "aW9uLkdldEVsZWN0aW9uUmVzdWx0SW5wdXQaGC5lbGVjdGlvbi5FbGVjdGlv",
            "blJlc3VsdCIFiIn3AQESRQoOR2V0RWxlY3RvclZvdGUSFS5lbGVjdGlvbi5T",
            "dHJpbmdJbnB1dBoVLmVsZWN0aW9uLkVsZWN0b3JWb3RlIgWIifcBARJQChlH",
            "ZXRFbGVjdG9yVm90ZVdpdGhSZWNvcmRzEhUuZWxlY3Rpb24uU3RyaW5nSW5w",
            "dXQaFS5lbGVjdGlvbi5FbGVjdG9yVm90ZSIFiIn3AQESUwocR2V0RWxlY3Rv",
            "clZvdGVXaXRoQWxsUmVjb3JkcxIVLmVsZWN0aW9uLlN0cmluZ0lucHV0GhUu",
            "ZWxlY3Rpb24uRWxlY3RvclZvdGUiBYiJ9wEBEkkKEEdldENhbmRpZGF0ZVZv",
            "dGUSFS5lbGVjdGlvbi5TdHJpbmdJbnB1dBoXLmVsZWN0aW9uLkNhbmRpZGF0",
            "ZVZvdGUiBYiJ9wEBElQKG0dldENhbmRpZGF0ZVZvdGVXaXRoUmVjb3JkcxIV",
            "LmVsZWN0aW9uLlN0cmluZ0lucHV0GhcuZWxlY3Rpb24uQ2FuZGlkYXRlVm90",
            "ZSIFiIn3AQESVwoeR2V0Q2FuZGlkYXRlVm90ZVdpdGhBbGxSZWNvcmRzEhUu",
            "ZWxlY3Rpb24uU3RyaW5nSW5wdXQaFy5lbGVjdGlvbi5DYW5kaWRhdGVWb3Rl",
            "IgWIifcBARI8Cg1HZXRWb3Rlc0NvdW50EhYuZ29vZ2xlLnByb3RvYnVmLkVt",
            "cHR5GgwuU0ludDY0VmFsdWUiBYiJ9wEBEkQKHEdldE1pbmVyRWxlY3Rpb25W",
            "b3RpbmdJdGVtSWQSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaBS5IYXNoIgWI",
            "ifcBARoyssz2AS1BRWxmLkNvbnRyYWN0cy5FbGVjdGlvbi5FbGVjdGlvbkNv",
            "bnRyYWN0U3RhdGVCGqoCF0FFbGYuQ29udHJhY3RzLkVsZWN0aW9uYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Aelf.AelfOptionsReflection.Descriptor, global::AElf.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.InitialElectionContractInput), global::AElf.Contracts.Election.InitialElectionContractInput.Parser, new[]{ "VoteContractSystemName", "ProfitContractSystemName", "TokenContractSystemName", "AelfConsensusContractSystemName", "MinimumLockTime", "MaximumLockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.GetTermSnapshotInput), global::AElf.Contracts.Election.GetTermSnapshotInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.UpdateCandidateInformationInput), global::AElf.Contracts.Election.UpdateCandidateInformationInput.Parser, new[]{ "PublicKey", "RecentlyProducedBlocks", "RecentlyMissedTimeSlots", "IsEvilNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.ReleaseTreasuryProfitsInput), global::AElf.Contracts.Election.ReleaseTreasuryProfitsInput.Parser, new[]{ "TermNumber", "MinedBlocks", "RoundNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.VoteMinerInput), global::AElf.Contracts.Election.VoteMinerInput.Parser, new[]{ "CandidatePublicKey", "Amount", "EndTimestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.UpdateTermNumberInput), global::AElf.Contracts.Election.UpdateTermNumberInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.GetElectionResultInput), global::AElf.Contracts.Election.GetElectionResultInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.ElectionResult), global::AElf.Contracts.Election.ElectionResult.Parser, new[]{ "TermNumber", "Results", "IsActive" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.ElectorVote), global::AElf.Contracts.Election.ElectorVote.Parser, new[]{ "ActiveVotingRecordIds", "WithdrawnVotingRecordIds", "ActiveVotedVotesAmount", "AllVotedVotesAmount", "ActiveVotingRecords", "WithdrawnVotesRecords", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.CandidateVote), global::AElf.Contracts.Election.CandidateVote.Parser, new[]{ "ObtainedActiveVotingRecordIds", "ObtainedWithdrawnVotingRecordIds", "ObtainedActiveVotedVotesAmount", "AllObtainedVotedVotesAmount", "ObtainedActiveVotingRecords", "ObtainedWithdrawnVotesRecords", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.CandidateInformation), global::AElf.Contracts.Election.CandidateInformation.Parser, new[]{ "PublicKey", "Terms", "ProducedBlocks", "MissedTimeSlots", "ContinualAppointmentCount", "AnnouncementTransactionId", "IsCurrentCandidate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.ElectionVotingRecord), global::AElf.Contracts.Election.ElectionVotingRecord.Parser, new[]{ "Voter", "Candidate", "Amount", "TermNumber", "VoteId", "LockTime", "UnlockTimestamp", "WithdrawTimestamp", "VoteTimestamp", "IsWithdrawn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.PageInfo), global::AElf.Contracts.Election.PageInfo.Parser, new[]{ "Start", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.StringInput), global::AElf.Contracts.Election.StringInput.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.StringOutput), global::AElf.Contracts.Election.StringOutput.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.PublicKeysList), global::AElf.Contracts.Election.PublicKeysList.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.TermSnapshot), global::AElf.Contracts.Election.TermSnapshot.Parser, new[]{ "EndRoundNumber", "MinedBlocks", "ElectionResult" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.Election.UpdateMinersCountInput), global::AElf.Contracts.Election.UpdateMinersCountInput.Parser, new[]{ "MinersCount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitialElectionContractInput : pb::IMessage<InitialElectionContractInput> {
    private static readonly pb::MessageParser<InitialElectionContractInput> _parser = new pb::MessageParser<InitialElectionContractInput>(() => new InitialElectionContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialElectionContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialElectionContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialElectionContractInput(InitialElectionContractInput other) : this() {
      voteContractSystemName_ = other.voteContractSystemName_ != null ? other.voteContractSystemName_.Clone() : null;
      profitContractSystemName_ = other.profitContractSystemName_ != null ? other.profitContractSystemName_.Clone() : null;
      tokenContractSystemName_ = other.tokenContractSystemName_ != null ? other.tokenContractSystemName_.Clone() : null;
      aelfConsensusContractSystemName_ = other.aelfConsensusContractSystemName_ != null ? other.aelfConsensusContractSystemName_.Clone() : null;
      minimumLockTime_ = other.minimumLockTime_;
      maximumLockTime_ = other.maximumLockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialElectionContractInput Clone() {
      return new InitialElectionContractInput(this);
    }

    /// <summary>Field number for the "vote_contract_system_name" field.</summary>
    public const int VoteContractSystemNameFieldNumber = 1;
    private global::AElf.Hash voteContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash VoteContractSystemName {
      get { return voteContractSystemName_; }
      set {
        voteContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "profit_contract_system_name" field.</summary>
    public const int ProfitContractSystemNameFieldNumber = 2;
    private global::AElf.Hash profitContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitContractSystemName {
      get { return profitContractSystemName_; }
      set {
        profitContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "token_contract_system_name" field.</summary>
    public const int TokenContractSystemNameFieldNumber = 3;
    private global::AElf.Hash tokenContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash TokenContractSystemName {
      get { return tokenContractSystemName_; }
      set {
        tokenContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "aelf_consensus_contract_system_name" field.</summary>
    public const int AelfConsensusContractSystemNameFieldNumber = 4;
    private global::AElf.Hash aelfConsensusContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash AelfConsensusContractSystemName {
      get { return aelfConsensusContractSystemName_; }
      set {
        aelfConsensusContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "minimum_lock_time" field.</summary>
    public const int MinimumLockTimeFieldNumber = 5;
    private int minimumLockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumLockTime {
      get { return minimumLockTime_; }
      set {
        minimumLockTime_ = value;
      }
    }

    /// <summary>Field number for the "maximum_lock_time" field.</summary>
    public const int MaximumLockTimeFieldNumber = 6;
    private int maximumLockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumLockTime {
      get { return maximumLockTime_; }
      set {
        maximumLockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialElectionContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialElectionContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VoteContractSystemName, other.VoteContractSystemName)) return false;
      if (!object.Equals(ProfitContractSystemName, other.ProfitContractSystemName)) return false;
      if (!object.Equals(TokenContractSystemName, other.TokenContractSystemName)) return false;
      if (!object.Equals(AelfConsensusContractSystemName, other.AelfConsensusContractSystemName)) return false;
      if (MinimumLockTime != other.MinimumLockTime) return false;
      if (MaximumLockTime != other.MaximumLockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (voteContractSystemName_ != null) hash ^= VoteContractSystemName.GetHashCode();
      if (profitContractSystemName_ != null) hash ^= ProfitContractSystemName.GetHashCode();
      if (tokenContractSystemName_ != null) hash ^= TokenContractSystemName.GetHashCode();
      if (aelfConsensusContractSystemName_ != null) hash ^= AelfConsensusContractSystemName.GetHashCode();
      if (MinimumLockTime != 0) hash ^= MinimumLockTime.GetHashCode();
      if (MaximumLockTime != 0) hash ^= MaximumLockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (voteContractSystemName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VoteContractSystemName);
      }
      if (profitContractSystemName_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProfitContractSystemName);
      }
      if (tokenContractSystemName_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokenContractSystemName);
      }
      if (aelfConsensusContractSystemName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AelfConsensusContractSystemName);
      }
      if (MinimumLockTime != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(MinimumLockTime);
      }
      if (MaximumLockTime != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(MaximumLockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (voteContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteContractSystemName);
      }
      if (profitContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitContractSystemName);
      }
      if (tokenContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractSystemName);
      }
      if (aelfConsensusContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AelfConsensusContractSystemName);
      }
      if (MinimumLockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MinimumLockTime);
      }
      if (MaximumLockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MaximumLockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialElectionContractInput other) {
      if (other == null) {
        return;
      }
      if (other.voteContractSystemName_ != null) {
        if (voteContractSystemName_ == null) {
          VoteContractSystemName = new global::AElf.Hash();
        }
        VoteContractSystemName.MergeFrom(other.VoteContractSystemName);
      }
      if (other.profitContractSystemName_ != null) {
        if (profitContractSystemName_ == null) {
          ProfitContractSystemName = new global::AElf.Hash();
        }
        ProfitContractSystemName.MergeFrom(other.ProfitContractSystemName);
      }
      if (other.tokenContractSystemName_ != null) {
        if (tokenContractSystemName_ == null) {
          TokenContractSystemName = new global::AElf.Hash();
        }
        TokenContractSystemName.MergeFrom(other.TokenContractSystemName);
      }
      if (other.aelfConsensusContractSystemName_ != null) {
        if (aelfConsensusContractSystemName_ == null) {
          AelfConsensusContractSystemName = new global::AElf.Hash();
        }
        AelfConsensusContractSystemName.MergeFrom(other.AelfConsensusContractSystemName);
      }
      if (other.MinimumLockTime != 0) {
        MinimumLockTime = other.MinimumLockTime;
      }
      if (other.MaximumLockTime != 0) {
        MaximumLockTime = other.MaximumLockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (voteContractSystemName_ == null) {
              VoteContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(VoteContractSystemName);
            break;
          }
          case 18: {
            if (profitContractSystemName_ == null) {
              ProfitContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitContractSystemName);
            break;
          }
          case 26: {
            if (tokenContractSystemName_ == null) {
              TokenContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(TokenContractSystemName);
            break;
          }
          case 34: {
            if (aelfConsensusContractSystemName_ == null) {
              AelfConsensusContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(AelfConsensusContractSystemName);
            break;
          }
          case 40: {
            MinimumLockTime = input.ReadSInt32();
            break;
          }
          case 48: {
            MaximumLockTime = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTermSnapshotInput : pb::IMessage<GetTermSnapshotInput> {
    private static readonly pb::MessageParser<GetTermSnapshotInput> _parser = new pb::MessageParser<GetTermSnapshotInput>(() => new GetTermSnapshotInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTermSnapshotInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTermSnapshotInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTermSnapshotInput(GetTermSnapshotInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTermSnapshotInput Clone() {
      return new GetTermSnapshotInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTermSnapshotInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTermSnapshotInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTermSnapshotInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateCandidateInformationInput : pb::IMessage<UpdateCandidateInformationInput> {
    private static readonly pb::MessageParser<UpdateCandidateInformationInput> _parser = new pb::MessageParser<UpdateCandidateInformationInput>(() => new UpdateCandidateInformationInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCandidateInformationInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCandidateInformationInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCandidateInformationInput(UpdateCandidateInformationInput other) : this() {
      publicKey_ = other.publicKey_;
      recentlyProducedBlocks_ = other.recentlyProducedBlocks_;
      recentlyMissedTimeSlots_ = other.recentlyMissedTimeSlots_;
      isEvilNode_ = other.isEvilNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCandidateInformationInput Clone() {
      return new UpdateCandidateInformationInput(this);
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recently_produced_blocks" field.</summary>
    public const int RecentlyProducedBlocksFieldNumber = 2;
    private long recentlyProducedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecentlyProducedBlocks {
      get { return recentlyProducedBlocks_; }
      set {
        recentlyProducedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "recently_missed_time_slots" field.</summary>
    public const int RecentlyMissedTimeSlotsFieldNumber = 3;
    private long recentlyMissedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecentlyMissedTimeSlots {
      get { return recentlyMissedTimeSlots_; }
      set {
        recentlyMissedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "is_evil_node" field.</summary>
    public const int IsEvilNodeFieldNumber = 4;
    private bool isEvilNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvilNode {
      get { return isEvilNode_; }
      set {
        isEvilNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCandidateInformationInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCandidateInformationInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (RecentlyProducedBlocks != other.RecentlyProducedBlocks) return false;
      if (RecentlyMissedTimeSlots != other.RecentlyMissedTimeSlots) return false;
      if (IsEvilNode != other.IsEvilNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (RecentlyProducedBlocks != 0L) hash ^= RecentlyProducedBlocks.GetHashCode();
      if (RecentlyMissedTimeSlots != 0L) hash ^= RecentlyMissedTimeSlots.GetHashCode();
      if (IsEvilNode != false) hash ^= IsEvilNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      if (RecentlyProducedBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(RecentlyProducedBlocks);
      }
      if (RecentlyMissedTimeSlots != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(RecentlyMissedTimeSlots);
      }
      if (IsEvilNode != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsEvilNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (RecentlyProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RecentlyProducedBlocks);
      }
      if (RecentlyMissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RecentlyMissedTimeSlots);
      }
      if (IsEvilNode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCandidateInformationInput other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.RecentlyProducedBlocks != 0L) {
        RecentlyProducedBlocks = other.RecentlyProducedBlocks;
      }
      if (other.RecentlyMissedTimeSlots != 0L) {
        RecentlyMissedTimeSlots = other.RecentlyMissedTimeSlots;
      }
      if (other.IsEvilNode != false) {
        IsEvilNode = other.IsEvilNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 16: {
            RecentlyProducedBlocks = input.ReadSInt64();
            break;
          }
          case 24: {
            RecentlyMissedTimeSlots = input.ReadSInt64();
            break;
          }
          case 32: {
            IsEvilNode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReleaseTreasuryProfitsInput : pb::IMessage<ReleaseTreasuryProfitsInput> {
    private static readonly pb::MessageParser<ReleaseTreasuryProfitsInput> _parser = new pb::MessageParser<ReleaseTreasuryProfitsInput>(() => new ReleaseTreasuryProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseTreasuryProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseTreasuryProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseTreasuryProfitsInput(ReleaseTreasuryProfitsInput other) : this() {
      termNumber_ = other.termNumber_;
      minedBlocks_ = other.minedBlocks_;
      roundNumber_ = other.roundNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseTreasuryProfitsInput Clone() {
      return new ReleaseTreasuryProfitsInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "mined_blocks" field.</summary>
    public const int MinedBlocksFieldNumber = 2;
    private long minedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinedBlocks {
      get { return minedBlocks_; }
      set {
        minedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "round_number" field.</summary>
    public const int RoundNumberFieldNumber = 3;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseTreasuryProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseTreasuryProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (MinedBlocks != other.MinedBlocks) return false;
      if (RoundNumber != other.RoundNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (MinedBlocks != 0L) hash ^= MinedBlocks.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (MinedBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(MinedBlocks);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(RoundNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (MinedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MinedBlocks);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseTreasuryProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.MinedBlocks != 0L) {
        MinedBlocks = other.MinedBlocks;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            MinedBlocks = input.ReadSInt64();
            break;
          }
          case 24: {
            RoundNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteMinerInput : pb::IMessage<VoteMinerInput> {
    private static readonly pb::MessageParser<VoteMinerInput> _parser = new pb::MessageParser<VoteMinerInput>(() => new VoteMinerInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteMinerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinerInput(VoteMinerInput other) : this() {
      candidatePublicKey_ = other.candidatePublicKey_;
      amount_ = other.amount_;
      endTimestamp_ = other.endTimestamp_ != null ? other.endTimestamp_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinerInput Clone() {
      return new VoteMinerInput(this);
    }

    /// <summary>Field number for the "candidate_publicKey" field.</summary>
    public const int CandidatePublicKeyFieldNumber = 1;
    private string candidatePublicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CandidatePublicKey {
      get { return candidatePublicKey_; }
      set {
        candidatePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "end_timestamp" field.</summary>
    public const int EndTimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp endTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp EndTimestamp {
      get { return endTimestamp_; }
      set {
        endTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteMinerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteMinerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CandidatePublicKey != other.CandidatePublicKey) return false;
      if (Amount != other.Amount) return false;
      if (!object.Equals(EndTimestamp, other.EndTimestamp)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CandidatePublicKey.Length != 0) hash ^= CandidatePublicKey.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (endTimestamp_ != null) hash ^= EndTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CandidatePublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CandidatePublicKey);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (endTimestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CandidatePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CandidatePublicKey);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (endTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteMinerInput other) {
      if (other == null) {
        return;
      }
      if (other.CandidatePublicKey.Length != 0) {
        CandidatePublicKey = other.CandidatePublicKey;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.endTimestamp_ != null) {
        if (endTimestamp_ == null) {
          EndTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        EndTimestamp.MergeFrom(other.EndTimestamp);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CandidatePublicKey = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            if (endTimestamp_ == null) {
              EndTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(EndTimestamp);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateTermNumberInput : pb::IMessage<UpdateTermNumberInput> {
    private static readonly pb::MessageParser<UpdateTermNumberInput> _parser = new pb::MessageParser<UpdateTermNumberInput>(() => new UpdateTermNumberInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTermNumberInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTermNumberInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTermNumberInput(UpdateTermNumberInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTermNumberInput Clone() {
      return new UpdateTermNumberInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTermNumberInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTermNumberInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTermNumberInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetElectionResultInput : pb::IMessage<GetElectionResultInput> {
    private static readonly pb::MessageParser<GetElectionResultInput> _parser = new pb::MessageParser<GetElectionResultInput>(() => new GetElectionResultInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetElectionResultInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetElectionResultInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetElectionResultInput(GetElectionResultInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetElectionResultInput Clone() {
      return new GetElectionResultInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetElectionResultInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetElectionResultInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetElectionResultInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectionResult : pb::IMessage<ElectionResult> {
    private static readonly pb::MessageParser<ElectionResult> _parser = new pb::MessageParser<ElectionResult>(() => new ElectionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionResult(ElectionResult other) : this() {
      termNumber_ = other.termNumber_;
      results_ = other.results_.Clone();
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionResult Clone() {
      return new ElectionResult(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_results_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 18);
    private readonly pbc::MapField<string, long> results_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 3;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (!Results.Equals(other.Results)) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      hash ^= Results.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      results_.WriteTo(output, _map_results_codec);
      if (IsActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      size += results_.CalculateSize(_map_results_codec);
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectionResult other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      results_.Add(other.results_);
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _map_results_codec);
            break;
          }
          case 24: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectorVote : pb::IMessage<ElectorVote> {
    private static readonly pb::MessageParser<ElectorVote> _parser = new pb::MessageParser<ElectorVote>(() => new ElectorVote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectorVote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectorVote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectorVote(ElectorVote other) : this() {
      activeVotingRecordIds_ = other.activeVotingRecordIds_.Clone();
      withdrawnVotingRecordIds_ = other.withdrawnVotingRecordIds_.Clone();
      activeVotedVotesAmount_ = other.activeVotedVotesAmount_;
      allVotedVotesAmount_ = other.allVotedVotesAmount_;
      activeVotingRecords_ = other.activeVotingRecords_.Clone();
      withdrawnVotesRecords_ = other.withdrawnVotesRecords_.Clone();
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectorVote Clone() {
      return new ElectorVote(this);
    }

    /// <summary>Field number for the "active_voting_record_ids" field.</summary>
    public const int ActiveVotingRecordIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_activeVotingRecordIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> activeVotingRecordIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ActiveVotingRecordIds {
      get { return activeVotingRecordIds_; }
    }

    /// <summary>Field number for the "withdrawn_voting_record_ids" field.</summary>
    public const int WithdrawnVotingRecordIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_withdrawnVotingRecordIds_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> withdrawnVotingRecordIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> WithdrawnVotingRecordIds {
      get { return withdrawnVotingRecordIds_; }
    }

    /// <summary>Field number for the "active_voted_votes_amount" field.</summary>
    public const int ActiveVotedVotesAmountFieldNumber = 3;
    private long activeVotedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ActiveVotedVotesAmount {
      get { return activeVotedVotesAmount_; }
      set {
        activeVotedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "all_voted_votes_amount" field.</summary>
    public const int AllVotedVotesAmountFieldNumber = 4;
    private long allVotedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllVotedVotesAmount {
      get { return allVotedVotesAmount_; }
      set {
        allVotedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "active_voting_records" field.</summary>
    public const int ActiveVotingRecordsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Election.ElectionVotingRecord> _repeated_activeVotingRecords_codec
        = pb::FieldCodec.ForMessage(42, global::AElf.Contracts.Election.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> activeVotingRecords_ = new pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> ActiveVotingRecords {
      get { return activeVotingRecords_; }
    }

    /// <summary>Field number for the "withdrawn_votes_records" field.</summary>
    public const int WithdrawnVotesRecordsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Election.ElectionVotingRecord> _repeated_withdrawnVotesRecords_codec
        = pb::FieldCodec.ForMessage(50, global::AElf.Contracts.Election.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> withdrawnVotesRecords_ = new pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> WithdrawnVotesRecords {
      get { return withdrawnVotesRecords_; }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 7;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectorVote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectorVote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!activeVotingRecordIds_.Equals(other.activeVotingRecordIds_)) return false;
      if(!withdrawnVotingRecordIds_.Equals(other.withdrawnVotingRecordIds_)) return false;
      if (ActiveVotedVotesAmount != other.ActiveVotedVotesAmount) return false;
      if (AllVotedVotesAmount != other.AllVotedVotesAmount) return false;
      if(!activeVotingRecords_.Equals(other.activeVotingRecords_)) return false;
      if(!withdrawnVotesRecords_.Equals(other.withdrawnVotesRecords_)) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= activeVotingRecordIds_.GetHashCode();
      hash ^= withdrawnVotingRecordIds_.GetHashCode();
      if (ActiveVotedVotesAmount != 0L) hash ^= ActiveVotedVotesAmount.GetHashCode();
      if (AllVotedVotesAmount != 0L) hash ^= AllVotedVotesAmount.GetHashCode();
      hash ^= activeVotingRecords_.GetHashCode();
      hash ^= withdrawnVotesRecords_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activeVotingRecordIds_.WriteTo(output, _repeated_activeVotingRecordIds_codec);
      withdrawnVotingRecordIds_.WriteTo(output, _repeated_withdrawnVotingRecordIds_codec);
      if (ActiveVotedVotesAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ActiveVotedVotesAmount);
      }
      if (AllVotedVotesAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(AllVotedVotesAmount);
      }
      activeVotingRecords_.WriteTo(output, _repeated_activeVotingRecords_codec);
      withdrawnVotesRecords_.WriteTo(output, _repeated_withdrawnVotesRecords_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activeVotingRecordIds_.CalculateSize(_repeated_activeVotingRecordIds_codec);
      size += withdrawnVotingRecordIds_.CalculateSize(_repeated_withdrawnVotingRecordIds_codec);
      if (ActiveVotedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ActiveVotedVotesAmount);
      }
      if (AllVotedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(AllVotedVotesAmount);
      }
      size += activeVotingRecords_.CalculateSize(_repeated_activeVotingRecords_codec);
      size += withdrawnVotesRecords_.CalculateSize(_repeated_withdrawnVotesRecords_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectorVote other) {
      if (other == null) {
        return;
      }
      activeVotingRecordIds_.Add(other.activeVotingRecordIds_);
      withdrawnVotingRecordIds_.Add(other.withdrawnVotingRecordIds_);
      if (other.ActiveVotedVotesAmount != 0L) {
        ActiveVotedVotesAmount = other.ActiveVotedVotesAmount;
      }
      if (other.AllVotedVotesAmount != 0L) {
        AllVotedVotesAmount = other.AllVotedVotesAmount;
      }
      activeVotingRecords_.Add(other.activeVotingRecords_);
      withdrawnVotesRecords_.Add(other.withdrawnVotesRecords_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            activeVotingRecordIds_.AddEntriesFrom(input, _repeated_activeVotingRecordIds_codec);
            break;
          }
          case 18: {
            withdrawnVotingRecordIds_.AddEntriesFrom(input, _repeated_withdrawnVotingRecordIds_codec);
            break;
          }
          case 24: {
            ActiveVotedVotesAmount = input.ReadSInt64();
            break;
          }
          case 32: {
            AllVotedVotesAmount = input.ReadSInt64();
            break;
          }
          case 42: {
            activeVotingRecords_.AddEntriesFrom(input, _repeated_activeVotingRecords_codec);
            break;
          }
          case 50: {
            withdrawnVotesRecords_.AddEntriesFrom(input, _repeated_withdrawnVotesRecords_codec);
            break;
          }
          case 58: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateVote : pb::IMessage<CandidateVote> {
    private static readonly pb::MessageParser<CandidateVote> _parser = new pb::MessageParser<CandidateVote>(() => new CandidateVote());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateVote> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateVote() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateVote(CandidateVote other) : this() {
      obtainedActiveVotingRecordIds_ = other.obtainedActiveVotingRecordIds_.Clone();
      obtainedWithdrawnVotingRecordIds_ = other.obtainedWithdrawnVotingRecordIds_.Clone();
      obtainedActiveVotedVotesAmount_ = other.obtainedActiveVotedVotesAmount_;
      allObtainedVotedVotesAmount_ = other.allObtainedVotedVotesAmount_;
      obtainedActiveVotingRecords_ = other.obtainedActiveVotingRecords_.Clone();
      obtainedWithdrawnVotesRecords_ = other.obtainedWithdrawnVotesRecords_.Clone();
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateVote Clone() {
      return new CandidateVote(this);
    }

    /// <summary>Field number for the "obtained_active_voting_record_ids" field.</summary>
    public const int ObtainedActiveVotingRecordIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_obtainedActiveVotingRecordIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> obtainedActiveVotingRecordIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ObtainedActiveVotingRecordIds {
      get { return obtainedActiveVotingRecordIds_; }
    }

    /// <summary>Field number for the "obtained_withdrawn_voting_record_ids" field.</summary>
    public const int ObtainedWithdrawnVotingRecordIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_obtainedWithdrawnVotingRecordIds_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> obtainedWithdrawnVotingRecordIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ObtainedWithdrawnVotingRecordIds {
      get { return obtainedWithdrawnVotingRecordIds_; }
    }

    /// <summary>Field number for the "obtained_active_voted_votes_amount" field.</summary>
    public const int ObtainedActiveVotedVotesAmountFieldNumber = 3;
    private long obtainedActiveVotedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObtainedActiveVotedVotesAmount {
      get { return obtainedActiveVotedVotesAmount_; }
      set {
        obtainedActiveVotedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "all_obtained_voted_votes_amount" field.</summary>
    public const int AllObtainedVotedVotesAmountFieldNumber = 4;
    private long allObtainedVotedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllObtainedVotedVotesAmount {
      get { return allObtainedVotedVotesAmount_; }
      set {
        allObtainedVotedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "obtained_active_voting_records" field.</summary>
    public const int ObtainedActiveVotingRecordsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Election.ElectionVotingRecord> _repeated_obtainedActiveVotingRecords_codec
        = pb::FieldCodec.ForMessage(42, global::AElf.Contracts.Election.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> obtainedActiveVotingRecords_ = new pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> ObtainedActiveVotingRecords {
      get { return obtainedActiveVotingRecords_; }
    }

    /// <summary>Field number for the "obtained_withdrawn_votes_records" field.</summary>
    public const int ObtainedWithdrawnVotesRecordsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::AElf.Contracts.Election.ElectionVotingRecord> _repeated_obtainedWithdrawnVotesRecords_codec
        = pb::FieldCodec.ForMessage(50, global::AElf.Contracts.Election.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> obtainedWithdrawnVotesRecords_ = new pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.Election.ElectionVotingRecord> ObtainedWithdrawnVotesRecords {
      get { return obtainedWithdrawnVotesRecords_; }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 7;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateVote);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateVote other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!obtainedActiveVotingRecordIds_.Equals(other.obtainedActiveVotingRecordIds_)) return false;
      if(!obtainedWithdrawnVotingRecordIds_.Equals(other.obtainedWithdrawnVotingRecordIds_)) return false;
      if (ObtainedActiveVotedVotesAmount != other.ObtainedActiveVotedVotesAmount) return false;
      if (AllObtainedVotedVotesAmount != other.AllObtainedVotedVotesAmount) return false;
      if(!obtainedActiveVotingRecords_.Equals(other.obtainedActiveVotingRecords_)) return false;
      if(!obtainedWithdrawnVotesRecords_.Equals(other.obtainedWithdrawnVotesRecords_)) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= obtainedActiveVotingRecordIds_.GetHashCode();
      hash ^= obtainedWithdrawnVotingRecordIds_.GetHashCode();
      if (ObtainedActiveVotedVotesAmount != 0L) hash ^= ObtainedActiveVotedVotesAmount.GetHashCode();
      if (AllObtainedVotedVotesAmount != 0L) hash ^= AllObtainedVotedVotesAmount.GetHashCode();
      hash ^= obtainedActiveVotingRecords_.GetHashCode();
      hash ^= obtainedWithdrawnVotesRecords_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      obtainedActiveVotingRecordIds_.WriteTo(output, _repeated_obtainedActiveVotingRecordIds_codec);
      obtainedWithdrawnVotingRecordIds_.WriteTo(output, _repeated_obtainedWithdrawnVotingRecordIds_codec);
      if (ObtainedActiveVotedVotesAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ObtainedActiveVotedVotesAmount);
      }
      if (AllObtainedVotedVotesAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(AllObtainedVotedVotesAmount);
      }
      obtainedActiveVotingRecords_.WriteTo(output, _repeated_obtainedActiveVotingRecords_codec);
      obtainedWithdrawnVotesRecords_.WriteTo(output, _repeated_obtainedWithdrawnVotesRecords_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += obtainedActiveVotingRecordIds_.CalculateSize(_repeated_obtainedActiveVotingRecordIds_codec);
      size += obtainedWithdrawnVotingRecordIds_.CalculateSize(_repeated_obtainedWithdrawnVotingRecordIds_codec);
      if (ObtainedActiveVotedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ObtainedActiveVotedVotesAmount);
      }
      if (AllObtainedVotedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(AllObtainedVotedVotesAmount);
      }
      size += obtainedActiveVotingRecords_.CalculateSize(_repeated_obtainedActiveVotingRecords_codec);
      size += obtainedWithdrawnVotesRecords_.CalculateSize(_repeated_obtainedWithdrawnVotesRecords_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateVote other) {
      if (other == null) {
        return;
      }
      obtainedActiveVotingRecordIds_.Add(other.obtainedActiveVotingRecordIds_);
      obtainedWithdrawnVotingRecordIds_.Add(other.obtainedWithdrawnVotingRecordIds_);
      if (other.ObtainedActiveVotedVotesAmount != 0L) {
        ObtainedActiveVotedVotesAmount = other.ObtainedActiveVotedVotesAmount;
      }
      if (other.AllObtainedVotedVotesAmount != 0L) {
        AllObtainedVotedVotesAmount = other.AllObtainedVotedVotesAmount;
      }
      obtainedActiveVotingRecords_.Add(other.obtainedActiveVotingRecords_);
      obtainedWithdrawnVotesRecords_.Add(other.obtainedWithdrawnVotesRecords_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            obtainedActiveVotingRecordIds_.AddEntriesFrom(input, _repeated_obtainedActiveVotingRecordIds_codec);
            break;
          }
          case 18: {
            obtainedWithdrawnVotingRecordIds_.AddEntriesFrom(input, _repeated_obtainedWithdrawnVotingRecordIds_codec);
            break;
          }
          case 24: {
            ObtainedActiveVotedVotesAmount = input.ReadSInt64();
            break;
          }
          case 32: {
            AllObtainedVotedVotesAmount = input.ReadSInt64();
            break;
          }
          case 42: {
            obtainedActiveVotingRecords_.AddEntriesFrom(input, _repeated_obtainedActiveVotingRecords_codec);
            break;
          }
          case 50: {
            obtainedWithdrawnVotesRecords_.AddEntriesFrom(input, _repeated_obtainedWithdrawnVotesRecords_codec);
            break;
          }
          case 58: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateInformation : pb::IMessage<CandidateInformation> {
    private static readonly pb::MessageParser<CandidateInformation> _parser = new pb::MessageParser<CandidateInformation>(() => new CandidateInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInformation(CandidateInformation other) : this() {
      publicKey_ = other.publicKey_;
      terms_ = other.terms_.Clone();
      producedBlocks_ = other.producedBlocks_;
      missedTimeSlots_ = other.missedTimeSlots_;
      continualAppointmentCount_ = other.continualAppointmentCount_;
      announcementTransactionId_ = other.announcementTransactionId_ != null ? other.announcementTransactionId_.Clone() : null;
      isCurrentCandidate_ = other.isCurrentCandidate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInformation Clone() {
      return new CandidateInformation(this);
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "terms" field.</summary>
    public const int TermsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_terms_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> terms_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Terms {
      get { return terms_; }
    }

    /// <summary>Field number for the "produced_blocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 3;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "missed_time_slots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 4;
    private long missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "continual_appointment_count" field.</summary>
    public const int ContinualAppointmentCountFieldNumber = 5;
    private long continualAppointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ContinualAppointmentCount {
      get { return continualAppointmentCount_; }
      set {
        continualAppointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "announcement_transaction_id" field.</summary>
    public const int AnnouncementTransactionIdFieldNumber = 6;
    private global::AElf.Hash announcementTransactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash AnnouncementTransactionId {
      get { return announcementTransactionId_; }
      set {
        announcementTransactionId_ = value;
      }
    }

    /// <summary>Field number for the "is_current_candidate" field.</summary>
    public const int IsCurrentCandidateFieldNumber = 7;
    private bool isCurrentCandidate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsCurrentCandidate {
      get { return isCurrentCandidate_; }
      set {
        isCurrentCandidate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if(!terms_.Equals(other.terms_)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (ContinualAppointmentCount != other.ContinualAppointmentCount) return false;
      if (!object.Equals(AnnouncementTransactionId, other.AnnouncementTransactionId)) return false;
      if (IsCurrentCandidate != other.IsCurrentCandidate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      hash ^= terms_.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      if (MissedTimeSlots != 0L) hash ^= MissedTimeSlots.GetHashCode();
      if (ContinualAppointmentCount != 0L) hash ^= ContinualAppointmentCount.GetHashCode();
      if (announcementTransactionId_ != null) hash ^= AnnouncementTransactionId.GetHashCode();
      if (IsCurrentCandidate != false) hash ^= IsCurrentCandidate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      terms_.WriteTo(output, _repeated_terms_codec);
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ContinualAppointmentCount);
      }
      if (announcementTransactionId_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(AnnouncementTransactionId);
      }
      if (IsCurrentCandidate != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsCurrentCandidate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      size += terms_.CalculateSize(_repeated_terms_codec);
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ContinualAppointmentCount);
      }
      if (announcementTransactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnnouncementTransactionId);
      }
      if (IsCurrentCandidate != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateInformation other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      terms_.Add(other.terms_);
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.MissedTimeSlots != 0L) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.ContinualAppointmentCount != 0L) {
        ContinualAppointmentCount = other.ContinualAppointmentCount;
      }
      if (other.announcementTransactionId_ != null) {
        if (announcementTransactionId_ == null) {
          AnnouncementTransactionId = new global::AElf.Hash();
        }
        AnnouncementTransactionId.MergeFrom(other.AnnouncementTransactionId);
      }
      if (other.IsCurrentCandidate != false) {
        IsCurrentCandidate = other.IsCurrentCandidate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            terms_.AddEntriesFrom(input, _repeated_terms_codec);
            break;
          }
          case 24: {
            ProducedBlocks = input.ReadSInt64();
            break;
          }
          case 32: {
            MissedTimeSlots = input.ReadSInt64();
            break;
          }
          case 40: {
            ContinualAppointmentCount = input.ReadSInt64();
            break;
          }
          case 50: {
            if (announcementTransactionId_ == null) {
              AnnouncementTransactionId = new global::AElf.Hash();
            }
            input.ReadMessage(AnnouncementTransactionId);
            break;
          }
          case 56: {
            IsCurrentCandidate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectionVotingRecord : pb::IMessage<ElectionVotingRecord> {
    private static readonly pb::MessageParser<ElectionVotingRecord> _parser = new pb::MessageParser<ElectionVotingRecord>(() => new ElectionVotingRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectionVotingRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionVotingRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionVotingRecord(ElectionVotingRecord other) : this() {
      voter_ = other.voter_ != null ? other.voter_.Clone() : null;
      candidate_ = other.candidate_;
      amount_ = other.amount_;
      termNumber_ = other.termNumber_;
      voteId_ = other.voteId_ != null ? other.voteId_.Clone() : null;
      lockTime_ = other.lockTime_;
      unlockTimestamp_ = other.unlockTimestamp_ != null ? other.unlockTimestamp_.Clone() : null;
      withdrawTimestamp_ = other.withdrawTimestamp_ != null ? other.withdrawTimestamp_.Clone() : null;
      voteTimestamp_ = other.voteTimestamp_ != null ? other.voteTimestamp_.Clone() : null;
      isWithdrawn_ = other.isWithdrawn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionVotingRecord Clone() {
      return new ElectionVotingRecord(this);
    }

    /// <summary>Field number for the "voter" field.</summary>
    public const int VoterFieldNumber = 1;
    private global::AElf.Address voter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Voter {
      get { return voter_; }
      set {
        voter_ = value;
      }
    }

    /// <summary>Field number for the "candidate" field.</summary>
    public const int CandidateFieldNumber = 2;
    private string candidate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Candidate {
      get { return candidate_; }
      set {
        candidate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 4;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "vote_id" field.</summary>
    public const int VoteIdFieldNumber = 5;
    private global::AElf.Hash voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "lock_time" field.</summary>
    public const int LockTimeFieldNumber = 7;
    private int lockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    /// <summary>Field number for the "unlock_timestamp" field.</summary>
    public const int UnlockTimestampFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp unlockTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UnlockTimestamp {
      get { return unlockTimestamp_; }
      set {
        unlockTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_timestamp" field.</summary>
    public const int WithdrawTimestampFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp withdrawTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp WithdrawTimestamp {
      get { return withdrawTimestamp_; }
      set {
        withdrawTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "vote_timestamp" field.</summary>
    public const int VoteTimestampFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp voteTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp VoteTimestamp {
      get { return voteTimestamp_; }
      set {
        voteTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_withdrawn" field.</summary>
    public const int IsWithdrawnFieldNumber = 13;
    private bool isWithdrawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWithdrawn {
      get { return isWithdrawn_; }
      set {
        isWithdrawn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectionVotingRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectionVotingRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Voter, other.Voter)) return false;
      if (Candidate != other.Candidate) return false;
      if (Amount != other.Amount) return false;
      if (TermNumber != other.TermNumber) return false;
      if (!object.Equals(VoteId, other.VoteId)) return false;
      if (LockTime != other.LockTime) return false;
      if (!object.Equals(UnlockTimestamp, other.UnlockTimestamp)) return false;
      if (!object.Equals(WithdrawTimestamp, other.WithdrawTimestamp)) return false;
      if (!object.Equals(VoteTimestamp, other.VoteTimestamp)) return false;
      if (IsWithdrawn != other.IsWithdrawn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (voter_ != null) hash ^= Voter.GetHashCode();
      if (Candidate.Length != 0) hash ^= Candidate.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (voteId_ != null) hash ^= VoteId.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      if (unlockTimestamp_ != null) hash ^= UnlockTimestamp.GetHashCode();
      if (withdrawTimestamp_ != null) hash ^= WithdrawTimestamp.GetHashCode();
      if (voteTimestamp_ != null) hash ^= VoteTimestamp.GetHashCode();
      if (IsWithdrawn != false) hash ^= IsWithdrawn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (voter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Voter);
      }
      if (Candidate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Candidate);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (TermNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(TermNumber);
      }
      if (voteId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(VoteId);
      }
      if (LockTime != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(LockTime);
      }
      if (unlockTimestamp_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UnlockTimestamp);
      }
      if (withdrawTimestamp_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(WithdrawTimestamp);
      }
      if (voteTimestamp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(VoteTimestamp);
      }
      if (IsWithdrawn != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsWithdrawn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (voter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Voter);
      }
      if (Candidate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Candidate);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (voteId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteId);
      }
      if (LockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LockTime);
      }
      if (unlockTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockTimestamp);
      }
      if (withdrawTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithdrawTimestamp);
      }
      if (voteTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteTimestamp);
      }
      if (IsWithdrawn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectionVotingRecord other) {
      if (other == null) {
        return;
      }
      if (other.voter_ != null) {
        if (voter_ == null) {
          Voter = new global::AElf.Address();
        }
        Voter.MergeFrom(other.Voter);
      }
      if (other.Candidate.Length != 0) {
        Candidate = other.Candidate;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.voteId_ != null) {
        if (voteId_ == null) {
          VoteId = new global::AElf.Hash();
        }
        VoteId.MergeFrom(other.VoteId);
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
      if (other.unlockTimestamp_ != null) {
        if (unlockTimestamp_ == null) {
          UnlockTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UnlockTimestamp.MergeFrom(other.UnlockTimestamp);
      }
      if (other.withdrawTimestamp_ != null) {
        if (withdrawTimestamp_ == null) {
          WithdrawTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        WithdrawTimestamp.MergeFrom(other.WithdrawTimestamp);
      }
      if (other.voteTimestamp_ != null) {
        if (voteTimestamp_ == null) {
          VoteTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        VoteTimestamp.MergeFrom(other.VoteTimestamp);
      }
      if (other.IsWithdrawn != false) {
        IsWithdrawn = other.IsWithdrawn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (voter_ == null) {
              Voter = new global::AElf.Address();
            }
            input.ReadMessage(Voter);
            break;
          }
          case 18: {
            Candidate = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 32: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 42: {
            if (voteId_ == null) {
              VoteId = new global::AElf.Hash();
            }
            input.ReadMessage(VoteId);
            break;
          }
          case 56: {
            LockTime = input.ReadSInt32();
            break;
          }
          case 82: {
            if (unlockTimestamp_ == null) {
              UnlockTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UnlockTimestamp);
            break;
          }
          case 90: {
            if (withdrawTimestamp_ == null) {
              WithdrawTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(WithdrawTimestamp);
            break;
          }
          case 98: {
            if (voteTimestamp_ == null) {
              VoteTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(VoteTimestamp);
            break;
          }
          case 104: {
            IsWithdrawn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PageInfo : pb::IMessage<PageInfo> {
    private static readonly pb::MessageParser<PageInfo> _parser = new pb::MessageParser<PageInfo>(() => new PageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo(PageInfo other) : this() {
      start_ = other.start_;
      length_ = other.length_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo Clone() {
      return new PageInfo(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private long length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (Length != 0L) hash ^= Length.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Start);
      }
      if (Length != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Length);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Start);
      }
      if (Length != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Length);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.Length != 0L) {
        Length = other.Length;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadSInt64();
            break;
          }
          case 16: {
            Length = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringInput : pb::IMessage<StringInput> {
    private static readonly pb::MessageParser<StringInput> _parser = new pb::MessageParser<StringInput>(() => new StringInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringInput(StringInput other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringInput Clone() {
      return new StringInput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringInput other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringOutput : pb::IMessage<StringOutput> {
    private static readonly pb::MessageParser<StringOutput> _parser = new pb::MessageParser<StringOutput>(() => new StringOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringOutput(StringOutput other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringOutput Clone() {
      return new StringOutput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringOutput other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicKeysList : pb::IMessage<PublicKeysList> {
    private static readonly pb::MessageParser<PublicKeysList> _parser = new pb::MessageParser<PublicKeysList>(() => new PublicKeysList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicKeysList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKeysList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKeysList(PublicKeysList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKeysList Clone() {
      return new PublicKeysList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_value_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> value_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicKeysList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicKeysList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicKeysList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TermSnapshot : pb::IMessage<TermSnapshot> {
    private static readonly pb::MessageParser<TermSnapshot> _parser = new pb::MessageParser<TermSnapshot>(() => new TermSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot(TermSnapshot other) : this() {
      endRoundNumber_ = other.endRoundNumber_;
      minedBlocks_ = other.minedBlocks_;
      electionResult_ = other.electionResult_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot Clone() {
      return new TermSnapshot(this);
    }

    /// <summary>Field number for the "end_round_number" field.</summary>
    public const int EndRoundNumberFieldNumber = 1;
    private long endRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndRoundNumber {
      get { return endRoundNumber_; }
      set {
        endRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "mined_blocks" field.</summary>
    public const int MinedBlocksFieldNumber = 2;
    private long minedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinedBlocks {
      get { return minedBlocks_; }
      set {
        minedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "election_result" field.</summary>
    public const int ElectionResultFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_electionResult_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 26);
    private readonly pbc::MapField<string, long> electionResult_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ElectionResult {
      get { return electionResult_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndRoundNumber != other.EndRoundNumber) return false;
      if (MinedBlocks != other.MinedBlocks) return false;
      if (!ElectionResult.Equals(other.ElectionResult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndRoundNumber != 0L) hash ^= EndRoundNumber.GetHashCode();
      if (MinedBlocks != 0L) hash ^= MinedBlocks.GetHashCode();
      hash ^= ElectionResult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndRoundNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(EndRoundNumber);
      }
      if (MinedBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(MinedBlocks);
      }
      electionResult_.WriteTo(output, _map_electionResult_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndRoundNumber);
      }
      if (MinedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MinedBlocks);
      }
      size += electionResult_.CalculateSize(_map_electionResult_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.EndRoundNumber != 0L) {
        EndRoundNumber = other.EndRoundNumber;
      }
      if (other.MinedBlocks != 0L) {
        MinedBlocks = other.MinedBlocks;
      }
      electionResult_.Add(other.electionResult_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndRoundNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            MinedBlocks = input.ReadSInt64();
            break;
          }
          case 26: {
            electionResult_.AddEntriesFrom(input, _map_electionResult_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateMinersCountInput : pb::IMessage<UpdateMinersCountInput> {
    private static readonly pb::MessageParser<UpdateMinersCountInput> _parser = new pb::MessageParser<UpdateMinersCountInput>(() => new UpdateMinersCountInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateMinersCountInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.Election.ElectionContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMinersCountInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMinersCountInput(UpdateMinersCountInput other) : this() {
      minersCount_ = other.minersCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateMinersCountInput Clone() {
      return new UpdateMinersCountInput(this);
    }

    /// <summary>Field number for the "miners_count" field.</summary>
    public const int MinersCountFieldNumber = 1;
    private int minersCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinersCount {
      get { return minersCount_; }
      set {
        minersCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateMinersCountInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateMinersCountInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinersCount != other.MinersCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinersCount != 0) hash ^= MinersCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinersCount != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(MinersCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinersCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MinersCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateMinersCountInput other) {
      if (other == null) {
        return;
      }
      if (other.MinersCount != 0) {
        MinersCount = other.MinersCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MinersCount = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
