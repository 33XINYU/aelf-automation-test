// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.MultiToken.Messages {

  /// <summary>Holder for reflection information generated from token_contract.proto</summary>
  public static partial class TokenContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChR0b2tlbl9jb250cmFjdC5wcm90bxIFdG9rZW4aDGNvbW1vbi5wcm90bxoM",
            "a2VybmVsLnByb3RvGhJhZWxmX29wdGlvbnMucHJvdG8aG2dvb2dsZS9wcm90",
            "b2J1Zi9lbXB0eS5wcm90bxoeZ29vZ2xlL3Byb3RvYnVmL3dyYXBwZXJzLnBy",
            "b3RvIpMBCglUb2tlbkluZm8SDgoGc3ltYm9sGAEgASgJEhEKCXRva2VuTmFt",
            "ZRgCIAEoCRIOCgZzdXBwbHkYAyABKBISEwoLdG90YWxTdXBwbHkYBCABKBIS",
            "EAoIZGVjaW1hbHMYBSABKBESGAoGaXNzdWVyGAYgASgLMgguQWRkcmVzcxIS",
            "Cgppc0J1cm5hYmxlGAcgASgIIqYBCgtDcmVhdGVJbnB1dBIOCgZzeW1ib2wY",
            "ASABKAkSEQoJdG9rZW5OYW1lGAIgASgJEhMKC3RvdGFsU3VwcGx5GAMgASgS",
            "EhAKCGRlY2ltYWxzGAQgASgREhgKBmlzc3VlchgFIAEoCzIILkFkZHJlc3MS",
            "EgoKaXNCdXJuYWJsZRgGIAEoCBIfCg1sb2NrV2hpdGVMaXN0GAcgAygLMggu",
            "QWRkcmVzcyLAAQoWQ3JlYXRlTmF0aXZlVG9rZW5JbnB1dBIOCgZzeW1ib2wY",
            "ASABKAkSEQoJdG9rZW5OYW1lGAIgASgJEhMKC3RvdGFsU3VwcGx5GAMgASgS",
            "EhAKCGRlY2ltYWxzGAQgASgREhgKBmlzc3VlchgFIAEoCzIILkFkZHJlc3MS",
            "EgoKaXNCdXJuYWJsZRgGIAEoCBIuCh9sb2NrV2hpdGVTeXN0ZW1Db250cmFj",
            "dE5hbWVMaXN0GAcgAygLMgUuSGFzaCJQCgpJc3N1ZUlucHV0Eg4KBnN5bWJv",
            "bBgBIAEoCRIOCgZhbW91bnQYAiABKBISDAoEbWVtbxgDIAEoCRIUCgJ0bxgE",
            "IAEoCzIILkFkZHJlc3MiagoVSXNzdWVOYXRpdmVUb2tlbklucHV0Eg4KBnN5",
            "bWJvbBgBIAEoCRIOCgZhbW91bnQYAiABKBISDAoEbWVtbxgDIAEoCRIjChR0",
            "b1N5c3RlbUNvbnRyYWN0TmFtZRgEIAEoCzIFLkhhc2giUwoNVHJhbnNmZXJJ",
            "bnB1dBIUCgJ0bxgBIAEoCzIILkFkZHJlc3MSDgoGc3ltYm9sGAIgASgJEg4K",
            "BmFtb3VudBgDIAEoEhIMCgRtZW1vGAQgASgJIn8KCUxvY2tJbnB1dBIWCgRm",
            "cm9tGAEgASgLMgguQWRkcmVzcxIUCgJ0bxgCIAEoCzIILkFkZHJlc3MSFQoG",
            "bG9ja0lkGAMgASgLMgUuSGFzaBIOCgZzeW1ib2wYBCABKAkSDQoFdXNhZ2UY",
            "BSABKAkSDgoGYW1vdW50GAYgASgDIoEBCgtVbmxvY2tJbnB1dBIWCgRmcm9t",
            "GAEgASgLMgguQWRkcmVzcxIUCgJ0bxgCIAEoCzIILkFkZHJlc3MSFQoGbG9j",
            "a0lkGAMgASgLMgUuSGFzaBIOCgZzeW1ib2wYBCABKAkSDQoFdXNhZ2UYBSAB",
            "KAkSDgoGYW1vdW50GAYgASgDIm8KEVRyYW5zZmVyRnJvbUlucHV0EhYKBGZy",
            "b20YASABKAsyCC5BZGRyZXNzEhQKAnRvGAIgASgLMgguQWRkcmVzcxIOCgZz",
            "eW1ib2wYAyABKAkSDgoGYW1vdW50GAQgASgSEgwKBG1lbW8YBSABKAkiSQoM",
            "QXBwcm92ZUlucHV0EhkKB3NwZW5kZXIYASABKAsyCC5BZGRyZXNzEg4KBnN5",
            "bWJvbBgCIAEoCRIOCgZhbW91bnQYAyABKBIiSwoOVW5BcHByb3ZlSW5wdXQS",
            "GQoHc3BlbmRlchgBIAEoCzIILkFkZHJlc3MSDgoGc3ltYm9sGAIgASgJEg4K",
            "BmFtb3VudBgDIAEoEiIrCglCdXJuSW5wdXQSDgoGc3ltYm9sGAEgASgJEg4K",
            "BmFtb3VudBgCIAEoEiI8ChpDaGFyZ2VUcmFuc2FjdGlvbkZlZXNJbnB1dBIO",
            "CgZzeW1ib2wYASABKAkSDgoGYW1vdW50GAIgASgSIjsKGUNsYWltVHJhbnNh",
            "Y3Rpb25GZWVzSW5wdXQSDgoGc3ltYm9sGAEgASgJEg4KBmhlaWdodBgCIAEo",
            "EiIjChFHZXRUb2tlbkluZm9JbnB1dBIOCgZzeW1ib2wYASABKAkiOgoPR2V0",
            "QmFsYW5jZUlucHV0Eg4KBnN5bWJvbBgBIAEoCRIXCgVvd25lchgCIAEoCzII",
            "LkFkZHJlc3MiTAoQR2V0QmFsYW5jZU91dHB1dBIOCgZzeW1ib2wYASABKAkS",
            "FwoFb3duZXIYAiABKAsyCC5BZGRyZXNzEg8KB2JhbGFuY2UYAyABKBIiVwoR",
            "R2V0QWxsb3dhbmNlSW5wdXQSDgoGc3ltYm9sGAEgASgJEhcKBW93bmVyGAIg",
            "ASgLMgguQWRkcmVzcxIZCgdzcGVuZGVyGAMgASgLMgguQWRkcmVzcyJrChJH",
            "ZXRBbGxvd2FuY2VPdXRwdXQSDgoGc3ltYm9sGAEgASgJEhcKBW93bmVyGAIg",
            "ASgLMgguQWRkcmVzcxIZCgdzcGVuZGVyGAMgASgLMgguQWRkcmVzcxIRCglh",
            "bGxvd2FuY2UYBCABKBIiSgobSW50aWFsaXplVG9rZW5Db250cmFjdElucHV0",
            "EisKHGNyb3NzQ2hhaW5Db250cmFjdFN5c3RlbU5hbWUYASABKAsyBS5IYXNo",
            "IoUBChdDcm9zc0NoYWluVHJhbnNmZXJJbnB1dBIUCgJ0bxgBIAEoCzIILkFk",
            "ZHJlc3MSIwoJdG9rZW5JbmZvGAIgASgLMhAudG9rZW4uVG9rZW5JbmZvEg4K",
            "BmFtb3VudBgDIAEoEhIMCgRtZW1vGAQgASgJEhEKCXRvQ2hhaW5JZBgFIAEo",
            "BSKKAQobQ3Jvc3NDaGFpblJlY2VpdmVUb2tlbklucHV0EhMKC2Zyb21DaGFp",
            "bklkGAEgASgFEhkKEXBhcmVudENoYWluSGVpZ2h0GAIgASgDEiAKGHRyYW5z",
            "ZmVyVHJhbnNhY3Rpb25CeXRlcxgDIAEoDBIZCgptZXJrbGVQYXRoGAQgAygL",
            "MgUuSGFzaCKEAQoLVHJhbnNmZXJyZWQSHQoEZnJvbRgBIAEoCzIILkFkZHJl",
            "c3NCBYiP9QEBEhsKAnRvGAIgASgLMgguQWRkcmVzc0IFiI/1AQESFQoGc3lt",
            "Ym9sGAMgASgJQgWIj/UBARIOCgZhbW91bnQYBCABKBISDAoEbWVtbxgFIAEo",
            "CToEoLsYASJ5CghBcHByb3ZlZBIeCgVvd25lchgBIAEoCzIILkFkZHJlc3NC",
            "BYiP9QEBEiAKB3NwZW5kZXIYAiABKAsyCC5BZGRyZXNzQgWIj/UBARIVCgZz",
            "eW1ib2wYAyABKAlCBYiP9QEBEg4KBmFtb3VudBgEIAEoEjoEoLsYASJ7CgpV",
            "bkFwcHJvdmVkEh4KBW93bmVyGAEgASgLMgguQWRkcmVzc0IFiI/1AQESIAoH",
            "c3BlbmRlchgCIAEoCzIILkFkZHJlc3NCBYiP9QEBEhUKBnN5bWJvbBgDIAEo",
            "CUIFiI/1AQESDgoGYW1vdW50GAQgASgSOgSguxgBIlYKBkJ1cm5lZBIfCgZi",
            "dXJuZXIYASABKAsyCC5BZGRyZXNzQgWIj/UBARIVCgZzeW1ib2wYAiABKAlC",
            "BYiP9QEBEg4KBmFtb3VudBgDIAEoEjoEoLsYASI/ChJJc0luV2hpdGVMaXN0",
            "SW5wdXQSDgoGc3ltYm9sGAEgASgJEhkKB2FkZHJlc3MYAiABKAsyCC5BZGRy",
            "ZXNzMrQLCg1Ub2tlbkNvbnRyYWN0EjYKBkNyZWF0ZRISLnRva2VuLkNyZWF0",
            "ZUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASVwoXSW5pdGlhbGl6",
            "ZVRva2VuQ29udHJhY3QSIi50b2tlbi5JbnRpYWxpemVUb2tlbkNvbnRyYWN0",
            "SW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJMChFDcmVhdGVOYXRp",
            "dmVUb2tlbhIdLnRva2VuLkNyZWF0ZU5hdGl2ZVRva2VuSW5wdXQaFi5nb29n",
            "bGUucHJvdG9idWYuRW1wdHkiABI0CgVJc3N1ZRIRLnRva2VuLklzc3VlSW5w",
            "dXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABJKChBJc3N1ZU5hdGl2ZVRv",
            "a2VuEhwudG9rZW4uSXNzdWVOYXRpdmVUb2tlbklucHV0GhYuZ29vZ2xlLnBy",
            "b3RvYnVmLkVtcHR5IgASOgoIVHJhbnNmZXISFC50b2tlbi5UcmFuc2Zlcklu",
            "cHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASQgoMVHJhbnNmZXJGcm9t",
            "EhgudG9rZW4uVHJhbnNmZXJGcm9tSW5wdXQaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABI4CgdBcHByb3ZlEhMudG9rZW4uQXBwcm92ZUlucHV0GhYuZ29v",
            "Z2xlLnByb3RvYnVmLkVtcHR5IgASPAoJVW5BcHByb3ZlEhUudG9rZW4uVW5B",
            "cHByb3ZlSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABIyCgRMb2Nr",
            "EhAudG9rZW4uTG9ja0lucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgAS",
            "NgoGVW5sb2NrEhIudG9rZW4uVW5sb2NrSW5wdXQaFi5nb29nbGUucHJvdG9i",
            "dWYuRW1wdHkiABIyCgRCdXJuEhAudG9rZW4uQnVybklucHV0GhYuZ29vZ2xl",
            "LnByb3RvYnVmLkVtcHR5IgASVAoVQ2hhcmdlVHJhbnNhY3Rpb25GZWVzEiEu",
            "dG9rZW4uQ2hhcmdlVHJhbnNhY3Rpb25GZWVzSW5wdXQaFi5nb29nbGUucHJv",
            "dG9idWYuRW1wdHkiABJSChRDbGFpbVRyYW5zYWN0aW9uRmVlcxIgLnRva2Vu",
            "LkNsYWltVHJhbnNhY3Rpb25GZWVzSW5wdXQaFi5nb29nbGUucHJvdG9idWYu",
            "RW1wdHkiABJOChJDcm9zc0NoYWluVHJhbnNmZXISHi50b2tlbi5Dcm9zc0No",
            "YWluVHJhbnNmZXJJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAElYK",
            "FkNyb3NzQ2hhaW5SZWNlaXZlVG9rZW4SIi50b2tlbi5Dcm9zc0NoYWluUmVj",
            "ZWl2ZVRva2VuSW5wdXQaFi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI0ChFT",
            "ZXRGZWVQb29sQWRkcmVzcxIFLkhhc2gaFi5nb29nbGUucHJvdG9idWYuRW1w",
            "dHkiABJBCgxHZXRUb2tlbkluZm8SGC50b2tlbi5HZXRUb2tlbkluZm9JbnB1",
            "dBoQLnRva2VuLlRva2VuSW5mbyIFiIn3AQESRAoKR2V0QmFsYW5jZRIWLnRv",
            "a2VuLkdldEJhbGFuY2VJbnB1dBoXLnRva2VuLkdldEJhbGFuY2VPdXRwdXQi",
            "BYiJ9wEBEkoKDEdldEFsbG93YW5jZRIYLnRva2VuLkdldEFsbG93YW5jZUlu",
            "cHV0GhkudG9rZW4uR2V0QWxsb3dhbmNlT3V0cHV0IgWIifcBARJNCg1Jc0lu",
            "V2hpdGVMaXN0EhkudG9rZW4uSXNJbldoaXRlTGlzdElucHV0GhouZ29vZ2xl",
            "LnByb3RvYnVmLkJvb2xWYWx1ZSIFiIn3AQFCJaoCIkFFbGYuQ29udHJhY3Rz",
            "Lk11bHRpVG9rZW4uTWVzc2FnZXNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.CommonReflection.Descriptor, global::AElf.Kernel.KernelReflection.Descriptor, global::Aelf.AelfOptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.TokenInfo), global::AElf.Contracts.MultiToken.Messages.TokenInfo.Parser, new[]{ "Symbol", "TokenName", "Supply", "TotalSupply", "Decimals", "Issuer", "IsBurnable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.CreateInput), global::AElf.Contracts.MultiToken.Messages.CreateInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "LockWhiteList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.CreateNativeTokenInput), global::AElf.Contracts.MultiToken.Messages.CreateNativeTokenInput.Parser, new[]{ "Symbol", "TokenName", "TotalSupply", "Decimals", "Issuer", "IsBurnable", "LockWhiteSystemContractNameList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.IssueInput), global::AElf.Contracts.MultiToken.Messages.IssueInput.Parser, new[]{ "Symbol", "Amount", "Memo", "To" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.IssueNativeTokenInput), global::AElf.Contracts.MultiToken.Messages.IssueNativeTokenInput.Parser, new[]{ "Symbol", "Amount", "Memo", "ToSystemContractName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.TransferInput), global::AElf.Contracts.MultiToken.Messages.TransferInput.Parser, new[]{ "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.LockInput), global::AElf.Contracts.MultiToken.Messages.LockInput.Parser, new[]{ "From", "To", "LockId", "Symbol", "Usage", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.UnlockInput), global::AElf.Contracts.MultiToken.Messages.UnlockInput.Parser, new[]{ "From", "To", "LockId", "Symbol", "Usage", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.TransferFromInput), global::AElf.Contracts.MultiToken.Messages.TransferFromInput.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.ApproveInput), global::AElf.Contracts.MultiToken.Messages.ApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.UnApproveInput), global::AElf.Contracts.MultiToken.Messages.UnApproveInput.Parser, new[]{ "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.BurnInput), global::AElf.Contracts.MultiToken.Messages.BurnInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.ChargeTransactionFeesInput), global::AElf.Contracts.MultiToken.Messages.ChargeTransactionFeesInput.Parser, new[]{ "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.ClaimTransactionFeesInput), global::AElf.Contracts.MultiToken.Messages.ClaimTransactionFeesInput.Parser, new[]{ "Symbol", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetTokenInfoInput), global::AElf.Contracts.MultiToken.Messages.GetTokenInfoInput.Parser, new[]{ "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetBalanceInput), global::AElf.Contracts.MultiToken.Messages.GetBalanceInput.Parser, new[]{ "Symbol", "Owner" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetBalanceOutput), global::AElf.Contracts.MultiToken.Messages.GetBalanceOutput.Parser, new[]{ "Symbol", "Owner", "Balance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetAllowanceInput), global::AElf.Contracts.MultiToken.Messages.GetAllowanceInput.Parser, new[]{ "Symbol", "Owner", "Spender" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.GetAllowanceOutput), global::AElf.Contracts.MultiToken.Messages.GetAllowanceOutput.Parser, new[]{ "Symbol", "Owner", "Spender", "Allowance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.IntializeTokenContractInput), global::AElf.Contracts.MultiToken.Messages.IntializeTokenContractInput.Parser, new[]{ "CrossChainContractSystemName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.CrossChainTransferInput), global::AElf.Contracts.MultiToken.Messages.CrossChainTransferInput.Parser, new[]{ "To", "TokenInfo", "Amount", "Memo", "ToChainId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.CrossChainReceiveTokenInput), global::AElf.Contracts.MultiToken.Messages.CrossChainReceiveTokenInput.Parser, new[]{ "FromChainId", "ParentChainHeight", "TransferTransactionBytes", "MerklePath" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.Transferred), global::AElf.Contracts.MultiToken.Messages.Transferred.Parser, new[]{ "From", "To", "Symbol", "Amount", "Memo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.Approved), global::AElf.Contracts.MultiToken.Messages.Approved.Parser, new[]{ "Owner", "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.UnApproved), global::AElf.Contracts.MultiToken.Messages.UnApproved.Parser, new[]{ "Owner", "Spender", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.Burned), global::AElf.Contracts.MultiToken.Messages.Burned.Parser, new[]{ "Burner", "Symbol", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.MultiToken.Messages.IsInWhiteListInput), global::AElf.Contracts.MultiToken.Messages.IsInWhiteListInput.Parser, new[]{ "Symbol", "Address" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TokenInfo : pb::IMessage<TokenInfo> {
    private static readonly pb::MessageParser<TokenInfo> _parser = new pb::MessageParser<TokenInfo>(() => new TokenInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo(TokenInfo other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      supply_ = other.supply_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenInfo Clone() {
      return new TokenInfo(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenName" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supply" field.</summary>
    public const int SupplyFieldNumber = 3;
    private long supply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Supply {
      get { return supply_; }
      set {
        supply_ = value;
      }
    }

    /// <summary>Field number for the "totalSupply" field.</summary>
    public const int TotalSupplyFieldNumber = 4;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 5;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 6;
    private global::AElf.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "isBurnable" field.</summary>
    public const int IsBurnableFieldNumber = 7;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (Supply != other.Supply) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (Supply != 0L) hash ^= Supply.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (Supply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Supply);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsBurnable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (Supply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Supply);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenInfo other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.Supply != 0L) {
        Supply = other.Supply;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            Supply = input.ReadSInt64();
            break;
          }
          case 32: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 40: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 50: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 56: {
            IsBurnable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateInput : pb::IMessage<CreateInput> {
    private static readonly pb::MessageParser<CreateInput> _parser = new pb::MessageParser<CreateInput>(() => new CreateInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput(CreateInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      lockWhiteList_ = other.lockWhiteList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateInput Clone() {
      return new CreateInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenName" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalSupply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "isBurnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "lockWhiteList" field.</summary>
    public const int LockWhiteListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Address> _repeated_lockWhiteList_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Address> lockWhiteList_ = new pbc::RepeatedField<global::AElf.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Address> LockWhiteList {
      get { return lockWhiteList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if(!lockWhiteList_.Equals(other.lockWhiteList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      hash ^= lockWhiteList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      lockWhiteList_.WriteTo(output, _repeated_lockWhiteList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      size += lockWhiteList_.CalculateSize(_repeated_lockWhiteList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      lockWhiteList_.Add(other.lockWhiteList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 58: {
            lockWhiteList_.AddEntriesFrom(input, _repeated_lockWhiteList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateNativeTokenInput : pb::IMessage<CreateNativeTokenInput> {
    private static readonly pb::MessageParser<CreateNativeTokenInput> _parser = new pb::MessageParser<CreateNativeTokenInput>(() => new CreateNativeTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateNativeTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNativeTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNativeTokenInput(CreateNativeTokenInput other) : this() {
      symbol_ = other.symbol_;
      tokenName_ = other.tokenName_;
      totalSupply_ = other.totalSupply_;
      decimals_ = other.decimals_;
      issuer_ = other.issuer_ != null ? other.issuer_.Clone() : null;
      isBurnable_ = other.isBurnable_;
      lockWhiteSystemContractNameList_ = other.lockWhiteSystemContractNameList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateNativeTokenInput Clone() {
      return new CreateNativeTokenInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tokenName" field.</summary>
    public const int TokenNameFieldNumber = 2;
    private string tokenName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenName {
      get { return tokenName_; }
      set {
        tokenName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "totalSupply" field.</summary>
    public const int TotalSupplyFieldNumber = 3;
    private long totalSupply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalSupply {
      get { return totalSupply_; }
      set {
        totalSupply_ = value;
      }
    }

    /// <summary>Field number for the "decimals" field.</summary>
    public const int DecimalsFieldNumber = 4;
    private int decimals_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Decimals {
      get { return decimals_; }
      set {
        decimals_ = value;
      }
    }

    /// <summary>Field number for the "issuer" field.</summary>
    public const int IssuerFieldNumber = 5;
    private global::AElf.Address issuer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Issuer {
      get { return issuer_; }
      set {
        issuer_ = value;
      }
    }

    /// <summary>Field number for the "isBurnable" field.</summary>
    public const int IsBurnableFieldNumber = 6;
    private bool isBurnable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBurnable {
      get { return isBurnable_; }
      set {
        isBurnable_ = value;
      }
    }

    /// <summary>Field number for the "lockWhiteSystemContractNameList" field.</summary>
    public const int LockWhiteSystemContractNameListFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_lockWhiteSystemContractNameList_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> lockWhiteSystemContractNameList_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> LockWhiteSystemContractNameList {
      get { return lockWhiteSystemContractNameList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateNativeTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateNativeTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (TokenName != other.TokenName) return false;
      if (TotalSupply != other.TotalSupply) return false;
      if (Decimals != other.Decimals) return false;
      if (!object.Equals(Issuer, other.Issuer)) return false;
      if (IsBurnable != other.IsBurnable) return false;
      if(!lockWhiteSystemContractNameList_.Equals(other.lockWhiteSystemContractNameList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (TokenName.Length != 0) hash ^= TokenName.GetHashCode();
      if (TotalSupply != 0L) hash ^= TotalSupply.GetHashCode();
      if (Decimals != 0) hash ^= Decimals.GetHashCode();
      if (issuer_ != null) hash ^= Issuer.GetHashCode();
      if (IsBurnable != false) hash ^= IsBurnable.GetHashCode();
      hash ^= lockWhiteSystemContractNameList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (TokenName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenName);
      }
      if (TotalSupply != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalSupply);
      }
      if (Decimals != 0) {
        output.WriteRawTag(32);
        output.WriteSInt32(Decimals);
      }
      if (issuer_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Issuer);
      }
      if (IsBurnable != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsBurnable);
      }
      lockWhiteSystemContractNameList_.WriteTo(output, _repeated_lockWhiteSystemContractNameList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (TokenName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenName);
      }
      if (TotalSupply != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalSupply);
      }
      if (Decimals != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Decimals);
      }
      if (issuer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Issuer);
      }
      if (IsBurnable != false) {
        size += 1 + 1;
      }
      size += lockWhiteSystemContractNameList_.CalculateSize(_repeated_lockWhiteSystemContractNameList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateNativeTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.TokenName.Length != 0) {
        TokenName = other.TokenName;
      }
      if (other.TotalSupply != 0L) {
        TotalSupply = other.TotalSupply;
      }
      if (other.Decimals != 0) {
        Decimals = other.Decimals;
      }
      if (other.issuer_ != null) {
        if (issuer_ == null) {
          Issuer = new global::AElf.Address();
        }
        Issuer.MergeFrom(other.Issuer);
      }
      if (other.IsBurnable != false) {
        IsBurnable = other.IsBurnable;
      }
      lockWhiteSystemContractNameList_.Add(other.lockWhiteSystemContractNameList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            TokenName = input.ReadString();
            break;
          }
          case 24: {
            TotalSupply = input.ReadSInt64();
            break;
          }
          case 32: {
            Decimals = input.ReadSInt32();
            break;
          }
          case 42: {
            if (issuer_ == null) {
              Issuer = new global::AElf.Address();
            }
            input.ReadMessage(Issuer);
            break;
          }
          case 48: {
            IsBurnable = input.ReadBool();
            break;
          }
          case 58: {
            lockWhiteSystemContractNameList_.AddEntriesFrom(input, _repeated_lockWhiteSystemContractNameList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IssueInput : pb::IMessage<IssueInput> {
    private static readonly pb::MessageParser<IssueInput> _parser = new pb::MessageParser<IssueInput>(() => new IssueInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput(IssueInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueInput Clone() {
      return new IssueInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 4;
    private global::AElf.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(To, other.To)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (to_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(To);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IssueNativeTokenInput : pb::IMessage<IssueNativeTokenInput> {
    private static readonly pb::MessageParser<IssueNativeTokenInput> _parser = new pb::MessageParser<IssueNativeTokenInput>(() => new IssueNativeTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IssueNativeTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueNativeTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueNativeTokenInput(IssueNativeTokenInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      toSystemContractName_ = other.toSystemContractName_ != null ? other.toSystemContractName_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IssueNativeTokenInput Clone() {
      return new IssueNativeTokenInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 3;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toSystemContractName" field.</summary>
    public const int ToSystemContractNameFieldNumber = 4;
    private global::AElf.Hash toSystemContractName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ToSystemContractName {
      get { return toSystemContractName_; }
      set {
        toSystemContractName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IssueNativeTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IssueNativeTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (!object.Equals(ToSystemContractName, other.ToSystemContractName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (toSystemContractName_ != null) hash ^= ToSystemContractName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Memo);
      }
      if (toSystemContractName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ToSystemContractName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (toSystemContractName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ToSystemContractName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IssueNativeTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.toSystemContractName_ != null) {
        if (toSystemContractName_ == null) {
          ToSystemContractName = new global::AElf.Hash();
        }
        ToSystemContractName.MergeFrom(other.ToSystemContractName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 26: {
            Memo = input.ReadString();
            break;
          }
          case 34: {
            if (toSystemContractName_ == null) {
              ToSystemContractName = new global::AElf.Hash();
            }
            input.ReadMessage(ToSystemContractName);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferInput : pb::IMessage<TransferInput> {
    private static readonly pb::MessageParser<TransferInput> _parser = new pb::MessageParser<TransferInput>(() => new TransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput(TransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferInput Clone() {
      return new TransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockInput : pb::IMessage<LockInput> {
    private static readonly pb::MessageParser<LockInput> _parser = new pb::MessageParser<LockInput>(() => new LockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput(LockInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockInput Clone() {
      return new LockInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Address from_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Address to_;
    /// <summary>
    /// The address in white list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "lockId" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 5;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Usage = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockInput : pb::IMessage<UnlockInput> {
    private static readonly pb::MessageParser<UnlockInput> _parser = new pb::MessageParser<UnlockInput>(() => new UnlockInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput(UnlockInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      lockId_ = other.lockId_ != null ? other.lockId_.Clone() : null;
      symbol_ = other.symbol_;
      usage_ = other.usage_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockInput Clone() {
      return new UnlockInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Address from_;
    /// <summary>
    /// The one want to lock his token.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Address to_;
    /// <summary>
    /// The address in white list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "lockId" field.</summary>
    public const int LockIdFieldNumber = 3;
    private global::AElf.Hash lockId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash LockId {
      get { return lockId_; }
      set {
        lockId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 4;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "usage" field.</summary>
    public const int UsageFieldNumber = 5;
    private string usage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Usage {
      get { return usage_; }
      set {
        usage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 6;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(LockId, other.LockId)) return false;
      if (Symbol != other.Symbol) return false;
      if (Usage != other.Usage) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (lockId_ != null) hash ^= LockId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Usage.Length != 0) hash ^= Usage.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (lockId_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LockId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Symbol);
      }
      if (Usage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Usage);
      }
      if (Amount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (lockId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LockId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Usage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Usage);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.lockId_ != null) {
        if (lockId_ == null) {
          LockId = new global::AElf.Hash();
        }
        LockId.MergeFrom(other.LockId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Usage.Length != 0) {
        Usage = other.Usage;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            if (lockId_ == null) {
              LockId = new global::AElf.Hash();
            }
            input.ReadMessage(LockId);
            break;
          }
          case 34: {
            Symbol = input.ReadString();
            break;
          }
          case 42: {
            Usage = input.ReadString();
            break;
          }
          case 48: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransferFromInput : pb::IMessage<TransferFromInput> {
    private static readonly pb::MessageParser<TransferFromInput> _parser = new pb::MessageParser<TransferFromInput>(() => new TransferFromInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransferFromInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput(TransferFromInput other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransferFromInput Clone() {
      return new TransferFromInput(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransferFromInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransferFromInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransferFromInput other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ApproveInput : pb::IMessage<ApproveInput> {
    private static readonly pb::MessageParser<ApproveInput> _parser = new pb::MessageParser<ApproveInput>(() => new ApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput(ApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ApproveInput Clone() {
      return new ApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnApproveInput : pb::IMessage<UnApproveInput> {
    private static readonly pb::MessageParser<UnApproveInput> _parser = new pb::MessageParser<UnApproveInput>(() => new UnApproveInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproveInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput(UnApproveInput other) : this() {
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproveInput Clone() {
      return new UnApproveInput(this);
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 1;
    private global::AElf.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproveInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproveInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (spender_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproveInput other) {
      if (other == null) {
        return;
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (spender_ == null) {
              Spender = new global::AElf.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BurnInput : pb::IMessage<BurnInput> {
    private static readonly pb::MessageParser<BurnInput> _parser = new pb::MessageParser<BurnInput>(() => new BurnInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BurnInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput(BurnInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BurnInput Clone() {
      return new BurnInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BurnInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BurnInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BurnInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ChargeTransactionFeesInput : pb::IMessage<ChargeTransactionFeesInput> {
    private static readonly pb::MessageParser<ChargeTransactionFeesInput> _parser = new pb::MessageParser<ChargeTransactionFeesInput>(() => new ChargeTransactionFeesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ChargeTransactionFeesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput(ChargeTransactionFeesInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ChargeTransactionFeesInput Clone() {
      return new ChargeTransactionFeesInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ChargeTransactionFeesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ChargeTransactionFeesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ChargeTransactionFeesInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimTransactionFeesInput : pb::IMessage<ClaimTransactionFeesInput> {
    private static readonly pb::MessageParser<ClaimTransactionFeesInput> _parser = new pb::MessageParser<ClaimTransactionFeesInput>(() => new ClaimTransactionFeesInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimTransactionFeesInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimTransactionFeesInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimTransactionFeesInput(ClaimTransactionFeesInput other) : this() {
      symbol_ = other.symbol_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimTransactionFeesInput Clone() {
      return new ClaimTransactionFeesInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private long height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimTransactionFeesInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimTransactionFeesInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Height != 0L) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Height != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Height != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimTransactionFeesInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Height != 0L) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Height = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTokenInfoInput : pb::IMessage<GetTokenInfoInput> {
    private static readonly pb::MessageParser<GetTokenInfoInput> _parser = new pb::MessageParser<GetTokenInfoInput>(() => new GetTokenInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTokenInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput(GetTokenInfoInput other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTokenInfoInput Clone() {
      return new GetTokenInfoInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTokenInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTokenInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTokenInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceInput : pb::IMessage<GetBalanceInput> {
    private static readonly pb::MessageParser<GetBalanceInput> _parser = new pb::MessageParser<GetBalanceInput>(() => new GetBalanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput(GetBalanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceInput Clone() {
      return new GetBalanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceOutput : pb::IMessage<GetBalanceOutput> {
    private static readonly pb::MessageParser<GetBalanceOutput> _parser = new pb::MessageParser<GetBalanceOutput>(() => new GetBalanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput(GetBalanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      balance_ = other.balance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceOutput Clone() {
      return new GetBalanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 3;
    private long balance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (Balance != other.Balance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (Balance != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Balance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Balance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 24: {
            Balance = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllowanceInput : pb::IMessage<GetAllowanceInput> {
    private static readonly pb::MessageParser<GetAllowanceInput> _parser = new pb::MessageParser<GetAllowanceInput>(() => new GetAllowanceInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput(GetAllowanceInput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceInput Clone() {
      return new GetAllowanceInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetAllowanceOutput : pb::IMessage<GetAllowanceOutput> {
    private static readonly pb::MessageParser<GetAllowanceOutput> _parser = new pb::MessageParser<GetAllowanceOutput>(() => new GetAllowanceOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAllowanceOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput(GetAllowanceOutput other) : this() {
      symbol_ = other.symbol_;
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      allowance_ = other.allowance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAllowanceOutput Clone() {
      return new GetAllowanceOutput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 2;
    private global::AElf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 3;
    private global::AElf.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "allowance" field.</summary>
    public const int AllowanceFieldNumber = 4;
    private long allowance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Allowance {
      get { return allowance_; }
      set {
        allowance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAllowanceOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAllowanceOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Allowance != other.Allowance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Allowance != 0L) hash ^= Allowance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (owner_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Spender);
      }
      if (Allowance != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Allowance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Allowance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Allowance);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAllowanceOutput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Allowance != 0L) {
        Allowance = other.Allowance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (owner_ == null) {
              Owner = new global::AElf.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 26: {
            if (spender_ == null) {
              Spender = new global::AElf.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 32: {
            Allowance = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IntializeTokenContractInput : pb::IMessage<IntializeTokenContractInput> {
    private static readonly pb::MessageParser<IntializeTokenContractInput> _parser = new pb::MessageParser<IntializeTokenContractInput>(() => new IntializeTokenContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IntializeTokenContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntializeTokenContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntializeTokenContractInput(IntializeTokenContractInput other) : this() {
      crossChainContractSystemName_ = other.crossChainContractSystemName_ != null ? other.crossChainContractSystemName_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IntializeTokenContractInput Clone() {
      return new IntializeTokenContractInput(this);
    }

    /// <summary>Field number for the "crossChainContractSystemName" field.</summary>
    public const int CrossChainContractSystemNameFieldNumber = 1;
    private global::AElf.Hash crossChainContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash CrossChainContractSystemName {
      get { return crossChainContractSystemName_; }
      set {
        crossChainContractSystemName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IntializeTokenContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IntializeTokenContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CrossChainContractSystemName, other.CrossChainContractSystemName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (crossChainContractSystemName_ != null) hash ^= CrossChainContractSystemName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (crossChainContractSystemName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CrossChainContractSystemName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (crossChainContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CrossChainContractSystemName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IntializeTokenContractInput other) {
      if (other == null) {
        return;
      }
      if (other.crossChainContractSystemName_ != null) {
        if (crossChainContractSystemName_ == null) {
          CrossChainContractSystemName = new global::AElf.Hash();
        }
        CrossChainContractSystemName.MergeFrom(other.CrossChainContractSystemName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (crossChainContractSystemName_ == null) {
              CrossChainContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(CrossChainContractSystemName);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainTransferInput : pb::IMessage<CrossChainTransferInput> {
    private static readonly pb::MessageParser<CrossChainTransferInput> _parser = new pb::MessageParser<CrossChainTransferInput>(() => new CrossChainTransferInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainTransferInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput(CrossChainTransferInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      tokenInfo_ = other.tokenInfo_ != null ? other.tokenInfo_.Clone() : null;
      amount_ = other.amount_;
      memo_ = other.memo_;
      toChainId_ = other.toChainId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainTransferInput Clone() {
      return new CrossChainTransferInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "tokenInfo" field.</summary>
    public const int TokenInfoFieldNumber = 2;
    private global::AElf.Contracts.MultiToken.Messages.TokenInfo tokenInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Contracts.MultiToken.Messages.TokenInfo TokenInfo {
      get { return tokenInfo_; }
      set {
        tokenInfo_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 4;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "toChainId" field.</summary>
    public const int ToChainIdFieldNumber = 5;
    private int toChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ToChainId {
      get { return toChainId_; }
      set {
        toChainId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainTransferInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainTransferInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (!object.Equals(TokenInfo, other.TokenInfo)) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      if (ToChainId != other.ToChainId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (tokenInfo_ != null) hash ^= TokenInfo.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (ToChainId != 0) hash ^= ToChainId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (tokenInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TokenInfo);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Memo);
      }
      if (ToChainId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ToChainId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (tokenInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenInfo);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (ToChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToChainId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainTransferInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.tokenInfo_ != null) {
        if (tokenInfo_ == null) {
          TokenInfo = new global::AElf.Contracts.MultiToken.Messages.TokenInfo();
        }
        TokenInfo.MergeFrom(other.TokenInfo);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      if (other.ToChainId != 0) {
        ToChainId = other.ToChainId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 18: {
            if (tokenInfo_ == null) {
              TokenInfo = new global::AElf.Contracts.MultiToken.Messages.TokenInfo();
            }
            input.ReadMessage(TokenInfo);
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 34: {
            Memo = input.ReadString();
            break;
          }
          case 40: {
            ToChainId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CrossChainReceiveTokenInput : pb::IMessage<CrossChainReceiveTokenInput> {
    private static readonly pb::MessageParser<CrossChainReceiveTokenInput> _parser = new pb::MessageParser<CrossChainReceiveTokenInput>(() => new CrossChainReceiveTokenInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CrossChainReceiveTokenInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput(CrossChainReceiveTokenInput other) : this() {
      fromChainId_ = other.fromChainId_;
      parentChainHeight_ = other.parentChainHeight_;
      transferTransactionBytes_ = other.transferTransactionBytes_;
      merklePath_ = other.merklePath_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CrossChainReceiveTokenInput Clone() {
      return new CrossChainReceiveTokenInput(this);
    }

    /// <summary>Field number for the "fromChainId" field.</summary>
    public const int FromChainIdFieldNumber = 1;
    private int fromChainId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromChainId {
      get { return fromChainId_; }
      set {
        fromChainId_ = value;
      }
    }

    /// <summary>Field number for the "parentChainHeight" field.</summary>
    public const int ParentChainHeightFieldNumber = 2;
    private long parentChainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ParentChainHeight {
      get { return parentChainHeight_; }
      set {
        parentChainHeight_ = value;
      }
    }

    /// <summary>Field number for the "transferTransactionBytes" field.</summary>
    public const int TransferTransactionBytesFieldNumber = 3;
    private pb::ByteString transferTransactionBytes_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TransferTransactionBytes {
      get { return transferTransactionBytes_; }
      set {
        transferTransactionBytes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merklePath" field.</summary>
    public const int MerklePathFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_merklePath_codec
        = pb::FieldCodec.ForMessage(34, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> merklePath_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> MerklePath {
      get { return merklePath_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CrossChainReceiveTokenInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CrossChainReceiveTokenInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FromChainId != other.FromChainId) return false;
      if (ParentChainHeight != other.ParentChainHeight) return false;
      if (TransferTransactionBytes != other.TransferTransactionBytes) return false;
      if(!merklePath_.Equals(other.merklePath_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FromChainId != 0) hash ^= FromChainId.GetHashCode();
      if (ParentChainHeight != 0L) hash ^= ParentChainHeight.GetHashCode();
      if (TransferTransactionBytes.Length != 0) hash ^= TransferTransactionBytes.GetHashCode();
      hash ^= merklePath_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FromChainId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ParentChainHeight);
      }
      if (TransferTransactionBytes.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(TransferTransactionBytes);
      }
      merklePath_.WriteTo(output, _repeated_merklePath_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FromChainId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromChainId);
      }
      if (ParentChainHeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ParentChainHeight);
      }
      if (TransferTransactionBytes.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TransferTransactionBytes);
      }
      size += merklePath_.CalculateSize(_repeated_merklePath_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CrossChainReceiveTokenInput other) {
      if (other == null) {
        return;
      }
      if (other.FromChainId != 0) {
        FromChainId = other.FromChainId;
      }
      if (other.ParentChainHeight != 0L) {
        ParentChainHeight = other.ParentChainHeight;
      }
      if (other.TransferTransactionBytes.Length != 0) {
        TransferTransactionBytes = other.TransferTransactionBytes;
      }
      merklePath_.Add(other.merklePath_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FromChainId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentChainHeight = input.ReadInt64();
            break;
          }
          case 26: {
            TransferTransactionBytes = input.ReadBytes();
            break;
          }
          case 34: {
            merklePath_.AddEntriesFrom(input, _repeated_merklePath_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// EventsCreateInput
  /// </summary>
  public sealed partial class Transferred : pb::IMessage<Transferred> {
    private static readonly pb::MessageParser<Transferred> _parser = new pb::MessageParser<Transferred>(() => new Transferred());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transferred> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred(Transferred other) : this() {
      from_ = other.from_ != null ? other.from_.Clone() : null;
      to_ = other.to_ != null ? other.to_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      memo_ = other.memo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transferred Clone() {
      return new Transferred(this);
    }

    /// <summary>Field number for the "from" field.</summary>
    public const int FromFieldNumber = 1;
    private global::AElf.Address from_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address From {
      get { return from_; }
      set {
        from_ = value;
      }
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 2;
    private global::AElf.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "memo" field.</summary>
    public const int MemoFieldNumber = 5;
    private string memo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Memo {
      get { return memo_; }
      set {
        memo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transferred);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transferred other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(From, other.From)) return false;
      if (!object.Equals(To, other.To)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (Memo != other.Memo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (from_ != null) hash ^= From.GetHashCode();
      if (to_ != null) hash ^= To.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Memo.Length != 0) hash ^= Memo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (from_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(From);
      }
      if (to_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(To);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (Memo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Memo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (from_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(From);
      }
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Memo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Memo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transferred other) {
      if (other == null) {
        return;
      }
      if (other.from_ != null) {
        if (from_ == null) {
          From = new global::AElf.Address();
        }
        From.MergeFrom(other.From);
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Memo.Length != 0) {
        Memo = other.Memo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (from_ == null) {
              From = new global::AElf.Address();
            }
            input.ReadMessage(From);
            break;
          }
          case 18: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
          case 42: {
            Memo = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Approved : pb::IMessage<Approved> {
    private static readonly pb::MessageParser<Approved> _parser = new pb::MessageParser<Approved>(() => new Approved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Approved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved(Approved other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Approved Clone() {
      return new Approved(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 2;
    private global::AElf.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Approved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Approved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Approved other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (spender_ == null) {
              Spender = new global::AElf.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnApproved : pb::IMessage<UnApproved> {
    private static readonly pb::MessageParser<UnApproved> _parser = new pb::MessageParser<UnApproved>(() => new UnApproved());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnApproved> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved(UnApproved other) : this() {
      owner_ = other.owner_ != null ? other.owner_.Clone() : null;
      spender_ = other.spender_ != null ? other.spender_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnApproved Clone() {
      return new UnApproved(this);
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 1;
    private global::AElf.Address owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "spender" field.</summary>
    public const int SpenderFieldNumber = 2;
    private global::AElf.Address spender_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Spender {
      get { return spender_; }
      set {
        spender_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 3;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 4;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnApproved);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnApproved other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Owner, other.Owner)) return false;
      if (!object.Equals(Spender, other.Spender)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (owner_ != null) hash ^= Owner.GetHashCode();
      if (spender_ != null) hash ^= Spender.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (owner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Owner);
      }
      if (spender_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Spender);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (owner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Owner);
      }
      if (spender_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Spender);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnApproved other) {
      if (other == null) {
        return;
      }
      if (other.owner_ != null) {
        if (owner_ == null) {
          Owner = new global::AElf.Address();
        }
        Owner.MergeFrom(other.Owner);
      }
      if (other.spender_ != null) {
        if (spender_ == null) {
          Spender = new global::AElf.Address();
        }
        Spender.MergeFrom(other.Spender);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (owner_ == null) {
              Owner = new global::AElf.Address();
            }
            input.ReadMessage(Owner);
            break;
          }
          case 18: {
            if (spender_ == null) {
              Spender = new global::AElf.Address();
            }
            input.ReadMessage(Spender);
            break;
          }
          case 26: {
            Symbol = input.ReadString();
            break;
          }
          case 32: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Burned : pb::IMessage<Burned> {
    private static readonly pb::MessageParser<Burned> _parser = new pb::MessageParser<Burned>(() => new Burned());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Burned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned(Burned other) : this() {
      burner_ = other.burner_ != null ? other.burner_.Clone() : null;
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Burned Clone() {
      return new Burned(this);
    }

    /// <summary>Field number for the "burner" field.</summary>
    public const int BurnerFieldNumber = 1;
    private global::AElf.Address burner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Burner {
      get { return burner_; }
      set {
        burner_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Burned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Burned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Burner, other.Burner)) return false;
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (burner_ != null) hash ^= Burner.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (burner_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Burner);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (burner_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Burner);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Burned other) {
      if (other == null) {
        return;
      }
      if (other.burner_ != null) {
        if (burner_ == null) {
          Burner = new global::AElf.Address();
        }
        Burner.MergeFrom(other.Burner);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (burner_ == null) {
              Burner = new global::AElf.Address();
            }
            input.ReadMessage(Burner);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IsInWhiteListInput : pb::IMessage<IsInWhiteListInput> {
    private static readonly pb::MessageParser<IsInWhiteListInput> _parser = new pb::MessageParser<IsInWhiteListInput>(() => new IsInWhiteListInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IsInWhiteListInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.MultiToken.Messages.TokenContractReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput(IsInWhiteListInput other) : this() {
      symbol_ = other.symbol_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IsInWhiteListInput Clone() {
      return new IsInWhiteListInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::AElf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IsInWhiteListInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IsInWhiteListInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IsInWhiteListInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::AElf.Address();
            }
            input.ReadMessage(Address);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
