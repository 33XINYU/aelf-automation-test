// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: consensus_dpos.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Consensus.DPoS {

  /// <summary>Holder for reflection information generated from consensus_dpos.proto</summary>
  public static partial class ConsensusDposReflection {

    #region Descriptor
    /// <summary>File descriptor for consensus_dpos.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConsensusDposReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRjb25zZW5zdXNfZHBvcy5wcm90bxoMY29tbW9uLnByb3RvGh9nb29nbGUv",
            "cHJvdG9idWYvdGltZXN0YW1wLnByb3RvIowGCghUb1VwZGF0ZRIXCghPdXRW",
            "YWx1ZRgBIAEoCzIFLkhhc2gSGAoJU2lnbmF0dXJlGAIgASgLMgUuSGFzaBIP",
            "CgdSb3VuZElkGAMgASgDEhkKEVByb21pc2VUaW55QmxvY2tzGAQgASgFEh4K",
            "D1ByZXZpb3VzSW5WYWx1ZRgFIAEoCzIFLkhhc2gSNAoQQWN0dWFsTWluaW5n",
            "VGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASIAoYU3Vw",
            "cG9zZWRPcmRlck9mTmV4dFJvdW5kGAcgASgFEkEKFFR1bmVPcmRlckluZm9y",
            "bWF0aW9uGAggAygLMiMuVG9VcGRhdGUuVHVuZU9yZGVySW5mb3JtYXRpb25F",
            "bnRyeRI7ChFFbmNyeXB0ZWRJblZhbHVlcxgJIAMoCzIgLlRvVXBkYXRlLkVu",
            "Y3J5cHRlZEluVmFsdWVzRW50cnkSSwoZRGVjcnlwdGVkUHJldmlvdXNJblZh",
            "bHVlcxgKIAMoCzIoLlRvVXBkYXRlLkRlY3J5cHRlZFByZXZpb3VzSW5WYWx1",
            "ZXNFbnRyeRIWCg5Qcm9kdWNlZEJsb2NrcxgLIAEoAxJFChZNaW5lcnNQcmV2",
            "aW91c0luVmFsdWVzGAwgAygLMiUuVG9VcGRhdGUuTWluZXJzUHJldmlvdXNJ",
            "blZhbHVlc0VudHJ5GjsKGVR1bmVPcmRlckluZm9ybWF0aW9uRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ARo4ChZFbmNyeXB0ZWRJblZh",
            "bHVlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoCOAEaQAoe",
            "RGVjcnlwdGVkUHJldmlvdXNJblZhbHVlc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoDDoCOAEaRAobTWluZXJzUHJldmlvdXNJblZhbHVlc0Vu",
            "dHJ5EgsKA2tleRgBIAEoCRIUCgV2YWx1ZRgCIAEoCzIFLkhhc2g6AjgBIk0K",
            "Bk1pbmVycxISCgpUZXJtTnVtYmVyGAEgASgDEhIKClB1YmxpY0tleXMYAiAD",
            "KAkSGwoJQWRkcmVzc2VzGAMgAygLMgguQWRkcmVzcyJnChBUZXJtTnVtYmVy",
            "TG9va1VwEicKA01hcBgBIAMoCzIaLlRlcm1OdW1iZXJMb29rVXAuTWFwRW50",
            "cnkaKgoITWFwRW50cnkSCwoDa2V5GAEgASgDEg0KBXZhbHVlGAIgASgDOgI4",
            "ASJWCgpDYW5kaWRhdGVzEhIKClB1YmxpY0tleXMYASADKAkSGwoJQWRkcmVz",
            "c2VzGAIgAygLMgguQWRkcmVzcxIXCg9Jc0luaXRpYWxNaW5lcnMYAyABKAgi",
            "kgIKB1RpY2tldHMSJAoNVm90aW5nUmVjb3JkcxgBIAMoCzINLlZvdGluZ1Jl",
            "Y29yZBIaChJWb3RpbmdSZWNvcmRzQ291bnQYAiABKAMSFwoPT2J0YWluZWRU",
            "aWNrZXRzGAMgASgDEhQKDFZvdGVkVGlja2V0cxgEIAEoAxIeChZIaXN0b3J5",
            "T2J0YWluZWRUaWNrZXRzGAUgASgDEhsKE0hpc3RvcnlWb3RlZFRpY2tldHMY",
            "BiABKAMSIQoSVm90ZVRvVHJhbnNhY3Rpb25zGAggAygLMgUuSGFzaBIjChRW",
            "b3RlRnJvbVRyYW5zYWN0aW9ucxgJIAMoCzIFLkhhc2gSEQoJUHVibGljS2V5",
            "GAogASgJIuwCCgxWb3RpbmdSZWNvcmQSDAoERnJvbRgBIAEoCRIKCgJUbxgC",
            "IAEoCRINCgVDb3VudBgDIAEoAxITCgtSb3VuZE51bWJlchgEIAEoAxIcCg1U",
            "cmFuc2FjdGlvbklkGAUgASgLMgUuSGFzaBIPCgdWb3RlQWdlGAYgASgDEhQK",
            "DExvY2tEYXlzTGlzdBgHIAMoBRIRCglVbmxvY2tBZ2UYCCABKAMSEgoKVGVy",
            "bU51bWJlchgJIAEoAxIzCg9VbmxvY2tUaW1lc3RhbXAYCiABKAsyGi5nb29n",
            "bGUucHJvdG9idWYuVGltZXN0YW1wEjUKEVdpdGhkcmF3VGltZXN0YW1wGAsg",
            "ASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIxCg1Wb3RlVGltZXN0",
            "YW1wGAwgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBITCgtJc1dp",
            "dGhkcmF3bhgNIAEoCCJ9CgxUZXJtU25hcHNob3QSFgoORW5kUm91bmROdW1i",
            "ZXIYASABKAMSEwoLVG90YWxCbG9ja3MYAiABKAMSLAoSQ2FuZGlkYXRlc1Nu",
            "YXBzaG90GAMgAygLMhAuQ2FuZGlkYXRlSW5UZXJtEhIKClRlcm1OdW1iZXIY",
            "BCABKAMiTgoPQ2FuZGlkYXRlSW5UZXJtEhEKCVB1YmxpY0tleRgBIAEoCRIZ",
            "CgdBZGRyZXNzGAIgASgLMgguQWRkcmVzcxINCgVWb3RlcxgDIAEoAyKxAgoF",
            "Um91bmQSEwoLUm91bmROdW1iZXIYASABKAMSSAoZUmVhbFRpbWVNaW5lcnNJ",
            "bmZvcm1hdGlvbhgCIAMoCzIlLlJvdW5kLlJlYWxUaW1lTWluZXJzSW5mb3Jt",
            "YXRpb25FbnRyeRIiChpNYWluQ2hhaW5NaW5lcnNSb3VuZE51bWJlchgDIAEo",
            "AxIVCg1CbG9ja2NoYWluQWdlGAQgASgDEikKIUV4dHJhQmxvY2tQcm9kdWNl",
            "ck9mUHJldmlvdXNSb3VuZBgHIAEoCRISCgpUZXJtTnVtYmVyGAggASgDGk8K",
            "HlJlYWxUaW1lTWluZXJzSW5mb3JtYXRpb25FbnRyeRILCgNrZXkYASABKAkS",
            "HAoFdmFsdWUYAiABKAsyDS5NaW5lckluUm91bmQ6AjgBItIFCgxNaW5lcklu",
            "Um91bmQSDQoFT3JkZXIYASABKAUSHAoUSXNFeHRyYUJsb2NrUHJvZHVjZXIY",
            "AiABKAgSFgoHSW5WYWx1ZRgDIAEoCzIFLkhhc2gSFwoIT3V0VmFsdWUYBCAB",
            "KAsyBS5IYXNoEhgKCVNpZ25hdHVyZRgFIAEoCzIFLkhhc2gSNgoSRXhwZWN0",
            "ZWRNaW5pbmdUaW1lGAYgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFt",
            "cBIWCg5Qcm9kdWNlZEJsb2NrcxgHIAEoAxIXCg9NaXNzZWRUaW1lU2xvdHMY",
            "CCABKAMSEQoJUHVibGljS2V5GAkgASgJEhoKElByb21pc2VkVGlueUJsb2Nr",
            "cxgKIAEoBRINCgVBbGlhcxgLIAEoCRIeCg9QcmV2aW91c0luVmFsdWUYDCAB",
            "KAsyBS5IYXNoEiAKGFN1cHBvc2VkT3JkZXJPZk5leHRSb3VuZBgNIAEoBRId",
            "ChVGaW5hbE9yZGVyT2ZOZXh0Um91bmQYDiABKAUSNAoQQWN0dWFsTWluaW5n",
            "VGltZRgPIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASPwoRRW5j",
            "cnlwdGVkSW5WYWx1ZXMYECADKAsyJC5NaW5lckluUm91bmQuRW5jcnlwdGVk",
            "SW5WYWx1ZXNFbnRyeRJPChlEZWNyeXB0ZWRQcmV2aW91c0luVmFsdWVzGBEg",
            "AygLMiwuTWluZXJJblJvdW5kLkRlY3J5cHRlZFByZXZpb3VzSW5WYWx1ZXNF",
            "bnRyeRo4ChZFbmNyeXB0ZWRJblZhbHVlc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoDDoCOAEaQAoeRGVjcnlwdGVkUHJldmlvdXNJblZhbHVl",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoDDoCOAEiwgIKEkNh",
            "bmRpZGF0ZUluSGlzdG9yeRIRCglQdWJsaWNLZXkYASABKAkSDQoFVGVybXMY",
            "AiADKAMSFgoOUHJvZHVjZWRCbG9ja3MYAyABKAMSFwoPTWlzc2VkVGltZVNs",
            "b3RzGAQgASgDEiEKGUNvbnRpbnVhbEFwcG9pbnRtZW50Q291bnQYBSABKAMS",
            "GgoSUmVhcHBvaW50bWVudENvdW50GAYgASgDEg8KB0FsaWFzZXMYByADKAkS",
            "FAoMQ3VycmVudEFsaWFzGAggASgJEhoKEkN1cnJlbnRWb3Rlc051bWJlchgJ",
            "IAEoAxIZCgdBZGRyZXNzGAsgASgLMgguQWRkcmVzcxIoChlBbm5vdW5jZW1l",
            "bnRUcmFuc2FjdGlvbklkGAwgASgLMgUuSGFzaBISCgpJc0V2aWxOb2RlGA0g",
            "ASgIInYKEVRpY2tldHNEaWN0aW9uYXJ5EioKBE1hcHMYASADKAsyHC5UaWNr",
            "ZXRzRGljdGlvbmFyeS5NYXBzRW50cnkaNQoJTWFwc0VudHJ5EgsKA2tleRgB",
            "IAEoCRIXCgV2YWx1ZRgCIAEoCzIILlRpY2tldHM6AjgBIrEBChxDYW5kaWRh",
            "dGVJbkhpc3RvcnlEaWN0aW9uYXJ5EjUKBE1hcHMYASADKAsyJy5DYW5kaWRh",
            "dGVJbkhpc3RvcnlEaWN0aW9uYXJ5Lk1hcHNFbnRyeRIYChBDYW5kaWRhdGVz",
            "TnVtYmVyGAMgASgFGkAKCU1hcHNFbnRyeRILCgNrZXkYASABKAkSIgoFdmFs",
            "dWUYAiABKAsyEy5DYW5kaWRhdGVJbkhpc3Rvcnk6AjgBIkwKEFRpY2tldHNI",
            "aXN0b3JpZXMSHwoGVmFsdWVzGAEgAygLMg8uVGlja2V0c0hpc3RvcnkSFwoP",
            "SGlzdG9yaWVzTnVtYmVyGAIgASgDIp4BCg5UaWNrZXRzSGlzdG9yeRIWCg5D",
            "YW5kaWRhdGVBbGlhcxgBIAEoCRITCgtWb3Rlc051bWJlchgCIAEoAxItCglU",
            "aW1lc3RhbXAYAyABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg0K",
            "BVN0YXRlGAQgASgIEiEKBFR5cGUYBSABKA4yEy5UaWNrZXRzSGlzdG9yeVR5",
            "cGUiagoVRFBvU0hlYWRlckluZm9ybWF0aW9uEhcKD1NlbmRlclB1YmxpY0tl",
            "eRgBIAEoDBIVCgVSb3VuZBgCIAEoCzIGLlJvdW5kEiEKCUJlaGF2aW91chgD",
            "IAEoDjIOLkRQb1NCZWhhdmlvdXIiLQoIRFBvU0hpbnQSIQoJQmVoYXZpb3Vy",
            "GAEgASgOMg4uRFBvU0JlaGF2aW91ciKnAQoWRFBvU1RyaWdnZXJJbmZvcm1h",
            "dGlvbhIRCglQdWJsaWNLZXkYASABKAwSGQoKUmFuZG9tSGFzaBgCIAEoCzIF",
            "Lkhhc2gSIQoSUHJldmlvdXNSYW5kb21IYXNoGAMgASgLMgUuSGFzaBIhCglC",
            "ZWhhdmlvdXIYBCABKA4yDi5EUG9TQmVoYXZpb3VyEhkKEUluaXRpYWxUZXJt",
            "TnVtYmVyGAUgASgDIiEKDENvbW1hbmRJbnB1dBIRCglQdWJsaWNLZXkYASAB",
            "KAwijAEKGEluaXRpYWxEUG9TQ29udHJhY3RJbnB1dBImChd0b2tlbkNvbnRy",
            "YWN0U3lzdGVtTmFtZRgBIAEoCzIFLkhhc2gSKgobZGl2aWRlbmRzQ29udHJh",
            "Y3RTeXN0ZW1OYW1lGAIgASgLMgUuSGFzaBIcChRsb2NrVG9rZW5Gb3JFbGVj",
            "dGlvbhgDIAEoEiJyChxJbml0aWFsRGl2aWRlbmRDb250cmFjdElucHV0EiYK",
            "F3Rva2VuQ29udHJhY3RTeXN0ZW1OYW1lGAEgASgLMgUuSGFzaBIqChtjb25z",
            "ZW5zdXNDb250cmFjdFN5c3RlbU5hbWUYAiABKAsyBS5IYXNoImQKEURQb1NT",
            "dHJhdGVneUlucHV0Eh8KF2lzQmxvY2tjaGFpbkFnZVNldHRhYmxlGAEgASgI",
            "EhsKE2lzVGltZVNsb3RTa2lwcGFibGUYAiABKAgSEQoJaXNWZXJib3NlGAMg",
            "ASgIIjMKCFRlcm1JbmZvEhIKCnRlcm1OdW1iZXIYASABKBISEwoLcm91bmRO",
            "dW1iZXIYAiABKBIiSQoJVm90ZUlucHV0EhoKEmNhbmRpZGF0ZVB1YmxpY0tl",
            "eRgBIAEoCRIOCgZhbW91bnQYAiABKBISEAoIbG9ja1RpbWUYAyABKBEiKQoI",
            "UGFnZUluZm8SDQoFc3RhcnQYASABKBESDgoGbGVuZ3RoGAIgASgRIkwKGFBh",
            "Z2VhYmxlVGlja2V0c0luZm9JbnB1dBINCgVzdGFydBgBIAEoERIOCgZsZW5n",
            "dGgYAiABKBESEQoJcHVibGljS2V5GAMgASgJIksKGVBhZ2VhYmxlRWxlY3Rp",
            "b25JbmZvSW5wdXQSDQoFc3RhcnQYASABKBESDgoGbGVuZ3RoGAIgASgREg8K",
            "B29yZGVyQnkYAyABKBEiFgoFQWxpYXMSDQoFdmFsdWUYASABKAkiGAoJUHVi",
            "bGljS2V5EgsKA2hleBgBIAEoCSIfCg5GcmllbmRseVN0cmluZxINCgV2YWx1",
            "ZRgBIAEoCSJLChhNaW5lckxpc3RXaXRoUm91bmROdW1iZXISGgoJTWluZXJM",
            "aXN0GAEgASgLMgcuTWluZXJzEhMKC1JvdW5kTnVtYmVyGAQgASgDIjoKElNl",
            "bmREaXZpZGVuZHNJbnB1dBIUCgJ0bxgBIAEoCzIILkFkZHJlc3MSDgoGYW1v",
            "dW50GAIgASgSIkAKEUFkZERpdmlkZW5kc0lucHV0EhIKCnRlcm1OdW1iZXIY",
            "ASABKBISFwoPZGl2aWRlbmRzQW1vdW50GAIgASgSIjIKC1dlaWdodHNJbmZv",
            "EhIKCnRlcm1OdW1iZXIYASABKBISDwoHd2VpZ2h0cxgCIAEoEiI2CghWb3Rl",
            "SW5mbxIdCgZyZWNvcmQYASABKAsyDS5Wb3RpbmdSZWNvcmQSCwoDYWdlGAIg",
            "ASgSIlIKE0NoZWNrRGl2aWRlbmRzSW5wdXQSEgoKdGVybU51bWJlchgBIAEo",
            "EhIVCg10aWNrZXRzQW1vdW50GAIgASgSEhAKCGxvY2tUaW1lGAMgASgRKjQK",
            "ElRpY2tldHNIaXN0b3J5VHlwZRIICgROb25lEAASCgoGUmVkZWVtEAESCAoE",
            "Vm90ZRACKnEKDURQb1NCZWhhdmlvdXISDwoLVXBkYXRlVmFsdWUQABINCglO",
            "ZXh0Um91bmQQARIMCghOZXh0VGVybRACEiUKIVVwZGF0ZVZhbHVlV2l0aG91",
            "dFByZXZpb3VzSW5WYWx1ZRADEgsKB05vdGhpbmcQBEIWqgITQUVsZi5Db25z",
            "ZW5zdXMuRFBvU2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Consensus.DPoS.TicketsHistoryType), typeof(global::AElf.Consensus.DPoS.DPoSBehaviour), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.ToUpdate), global::AElf.Consensus.DPoS.ToUpdate.Parser, new[]{ "OutValue", "Signature", "RoundId", "PromiseTinyBlocks", "PreviousInValue", "ActualMiningTime", "SupposedOrderOfNextRound", "TuneOrderInformation", "EncryptedInValues", "DecryptedPreviousInValues", "ProducedBlocks", "MinersPreviousInValues" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.Miners), global::AElf.Consensus.DPoS.Miners.Parser, new[]{ "TermNumber", "PublicKeys", "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.TermNumberLookUp), global::AElf.Consensus.DPoS.TermNumberLookUp.Parser, new[]{ "Map" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.Candidates), global::AElf.Consensus.DPoS.Candidates.Parser, new[]{ "PublicKeys", "Addresses", "IsInitialMiners" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.Tickets), global::AElf.Consensus.DPoS.Tickets.Parser, new[]{ "VotingRecords", "VotingRecordsCount", "ObtainedTickets", "VotedTickets", "HistoryObtainedTickets", "HistoryVotedTickets", "VoteToTransactions", "VoteFromTransactions", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.VotingRecord), global::AElf.Consensus.DPoS.VotingRecord.Parser, new[]{ "From", "To", "Count", "RoundNumber", "TransactionId", "VoteAge", "LockDaysList", "UnlockAge", "TermNumber", "UnlockTimestamp", "WithdrawTimestamp", "VoteTimestamp", "IsWithdrawn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.TermSnapshot), global::AElf.Consensus.DPoS.TermSnapshot.Parser, new[]{ "EndRoundNumber", "TotalBlocks", "CandidatesSnapshot", "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.CandidateInTerm), global::AElf.Consensus.DPoS.CandidateInTerm.Parser, new[]{ "PublicKey", "Address", "Votes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.Round), global::AElf.Consensus.DPoS.Round.Parser, new[]{ "RoundNumber", "RealTimeMinersInformation", "MainChainMinersRoundNumber", "BlockchainAge", "ExtraBlockProducerOfPreviousRound", "TermNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.MinerInRound), global::AElf.Consensus.DPoS.MinerInRound.Parser, new[]{ "Order", "IsExtraBlockProducer", "InValue", "OutValue", "Signature", "ExpectedMiningTime", "ProducedBlocks", "MissedTimeSlots", "PublicKey", "PromisedTinyBlocks", "Alias", "PreviousInValue", "SupposedOrderOfNextRound", "FinalOrderOfNextRound", "ActualMiningTime", "EncryptedInValues", "DecryptedPreviousInValues" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.CandidateInHistory), global::AElf.Consensus.DPoS.CandidateInHistory.Parser, new[]{ "PublicKey", "Terms", "ProducedBlocks", "MissedTimeSlots", "ContinualAppointmentCount", "ReappointmentCount", "Aliases", "CurrentAlias", "CurrentVotesNumber", "Address", "AnnouncementTransactionId", "IsEvilNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.TicketsDictionary), global::AElf.Consensus.DPoS.TicketsDictionary.Parser, new[]{ "Maps" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.CandidateInHistoryDictionary), global::AElf.Consensus.DPoS.CandidateInHistoryDictionary.Parser, new[]{ "Maps", "CandidatesNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.TicketsHistories), global::AElf.Consensus.DPoS.TicketsHistories.Parser, new[]{ "Values", "HistoriesNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.TicketsHistory), global::AElf.Consensus.DPoS.TicketsHistory.Parser, new[]{ "CandidateAlias", "VotesNumber", "Timestamp", "State", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.DPoSHeaderInformation), global::AElf.Consensus.DPoS.DPoSHeaderInformation.Parser, new[]{ "SenderPublicKey", "Round", "Behaviour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.DPoSHint), global::AElf.Consensus.DPoS.DPoSHint.Parser, new[]{ "Behaviour" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.DPoSTriggerInformation), global::AElf.Consensus.DPoS.DPoSTriggerInformation.Parser, new[]{ "PublicKey", "RandomHash", "PreviousRandomHash", "Behaviour", "InitialTermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.CommandInput), global::AElf.Consensus.DPoS.CommandInput.Parser, new[]{ "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.InitialDPoSContractInput), global::AElf.Consensus.DPoS.InitialDPoSContractInput.Parser, new[]{ "TokenContractSystemName", "DividendsContractSystemName", "LockTokenForElection" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.InitialDividendContractInput), global::AElf.Consensus.DPoS.InitialDividendContractInput.Parser, new[]{ "TokenContractSystemName", "ConsensusContractSystemName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.DPoSStrategyInput), global::AElf.Consensus.DPoS.DPoSStrategyInput.Parser, new[]{ "IsBlockchainAgeSettable", "IsTimeSlotSkippable", "IsVerbose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.TermInfo), global::AElf.Consensus.DPoS.TermInfo.Parser, new[]{ "TermNumber", "RoundNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.VoteInput), global::AElf.Consensus.DPoS.VoteInput.Parser, new[]{ "CandidatePublicKey", "Amount", "LockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.PageInfo), global::AElf.Consensus.DPoS.PageInfo.Parser, new[]{ "Start", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.PageableTicketsInfoInput), global::AElf.Consensus.DPoS.PageableTicketsInfoInput.Parser, new[]{ "Start", "Length", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.PageableElectionInfoInput), global::AElf.Consensus.DPoS.PageableElectionInfoInput.Parser, new[]{ "Start", "Length", "OrderBy" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.Alias), global::AElf.Consensus.DPoS.Alias.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.PublicKey), global::AElf.Consensus.DPoS.PublicKey.Parser, new[]{ "Hex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.FriendlyString), global::AElf.Consensus.DPoS.FriendlyString.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.MinerListWithRoundNumber), global::AElf.Consensus.DPoS.MinerListWithRoundNumber.Parser, new[]{ "MinerList", "RoundNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.SendDividendsInput), global::AElf.Consensus.DPoS.SendDividendsInput.Parser, new[]{ "To", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.AddDividendsInput), global::AElf.Consensus.DPoS.AddDividendsInput.Parser, new[]{ "TermNumber", "DividendsAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.WeightsInfo), global::AElf.Consensus.DPoS.WeightsInfo.Parser, new[]{ "TermNumber", "Weights" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.VoteInfo), global::AElf.Consensus.DPoS.VoteInfo.Parser, new[]{ "Record", "Age" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Consensus.DPoS.CheckDividendsInput), global::AElf.Consensus.DPoS.CheckDividendsInput.Parser, new[]{ "TermNumber", "TicketsAmount", "LockTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum TicketsHistoryType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Redeem")] Redeem = 1,
    [pbr::OriginalName("Vote")] Vote = 2,
  }

  public enum DPoSBehaviour {
    [pbr::OriginalName("UpdateValue")] UpdateValue = 0,
    [pbr::OriginalName("NextRound")] NextRound = 1,
    [pbr::OriginalName("NextTerm")] NextTerm = 2,
    [pbr::OriginalName("UpdateValueWithoutPreviousInValue")] UpdateValueWithoutPreviousInValue = 3,
    [pbr::OriginalName("Nothing")] Nothing = 4,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Just used as parameter of consensus contract method.
  /// </summary>
  public sealed partial class ToUpdate : pb::IMessage<ToUpdate> {
    private static readonly pb::MessageParser<ToUpdate> _parser = new pb::MessageParser<ToUpdate>(() => new ToUpdate());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ToUpdate> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToUpdate() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToUpdate(ToUpdate other) : this() {
      outValue_ = other.outValue_ != null ? other.outValue_.Clone() : null;
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      roundId_ = other.roundId_;
      promiseTinyBlocks_ = other.promiseTinyBlocks_;
      previousInValue_ = other.previousInValue_ != null ? other.previousInValue_.Clone() : null;
      actualMiningTime_ = other.actualMiningTime_ != null ? other.actualMiningTime_.Clone() : null;
      supposedOrderOfNextRound_ = other.supposedOrderOfNextRound_;
      tuneOrderInformation_ = other.tuneOrderInformation_.Clone();
      encryptedInValues_ = other.encryptedInValues_.Clone();
      decryptedPreviousInValues_ = other.decryptedPreviousInValues_.Clone();
      producedBlocks_ = other.producedBlocks_;
      minersPreviousInValues_ = other.minersPreviousInValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ToUpdate Clone() {
      return new ToUpdate(this);
    }

    /// <summary>Field number for the "OutValue" field.</summary>
    public const int OutValueFieldNumber = 1;
    private global::AElf.Hash outValue_;
    /// <summary>
    /// Calculated from current in value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash OutValue {
      get { return outValue_; }
      set {
        outValue_ = value;
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private global::AElf.Hash signature_;
    /// <summary>
    /// Calculated from current in value and signatures of previous round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "RoundId" field.</summary>
    public const int RoundIdFieldNumber = 3;
    private long roundId_;
    /// <summary>
    /// To ensure the values to update will be apply to correct round by comparing round id.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundId {
      get { return roundId_; }
      set {
        roundId_ = value;
      }
    }

    /// <summary>Field number for the "PromiseTinyBlocks" field.</summary>
    public const int PromiseTinyBlocksFieldNumber = 4;
    private int promiseTinyBlocks_;
    /// <summary>
    /// This value is 1 by default, except this miner wanna produce tiny blocks in one time slot.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PromiseTinyBlocks {
      get { return promiseTinyBlocks_; }
      set {
        promiseTinyBlocks_ = value;
      }
    }

    /// <summary>Field number for the "PreviousInValue" field.</summary>
    public const int PreviousInValueFieldNumber = 5;
    private global::AElf.Hash previousInValue_;
    /// <summary>
    /// Publish previous in value for validation previous signature and previous out value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash PreviousInValue {
      get { return previousInValue_; }
      set {
        previousInValue_ = value;
      }
    }

    /// <summary>Field number for the "ActualMiningTime" field.</summary>
    public const int ActualMiningTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp actualMiningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ActualMiningTime {
      get { return actualMiningTime_; }
      set {
        actualMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "SupposedOrderOfNextRound" field.</summary>
    public const int SupposedOrderOfNextRoundFieldNumber = 7;
    private int supposedOrderOfNextRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupposedOrderOfNextRound {
      get { return supposedOrderOfNextRound_; }
      set {
        supposedOrderOfNextRound_ = value;
      }
    }

    /// <summary>Field number for the "TuneOrderInformation" field.</summary>
    public const int TuneOrderInformationFieldNumber = 8;
    private static readonly pbc::MapField<string, int>.Codec _map_tuneOrderInformation_codec
        = new pbc::MapField<string, int>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForInt32(16), 66);
    private readonly pbc::MapField<string, int> tuneOrderInformation_ = new pbc::MapField<string, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, int> TuneOrderInformation {
      get { return tuneOrderInformation_; }
    }

    /// <summary>Field number for the "EncryptedInValues" field.</summary>
    public const int EncryptedInValuesFieldNumber = 9;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_encryptedInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 74);
    private readonly pbc::MapField<string, pb::ByteString> encryptedInValues_ = new pbc::MapField<string, pb::ByteString>();
    /// <summary>
    /// For others to recover his in value of current round.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> EncryptedInValues {
      get { return encryptedInValues_; }
    }

    /// <summary>Field number for the "DecryptedPreviousInValues" field.</summary>
    public const int DecryptedPreviousInValuesFieldNumber = 10;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_decryptedPreviousInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 82);
    private readonly pbc::MapField<string, pb::ByteString> decryptedPreviousInValues_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> DecryptedPreviousInValues {
      get { return decryptedPreviousInValues_; }
    }

    /// <summary>Field number for the "ProducedBlocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 11;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "MinersPreviousInValues" field.</summary>
    public const int MinersPreviousInValuesFieldNumber = 12;
    private static readonly pbc::MapField<string, global::AElf.Hash>.Codec _map_minersPreviousInValues_codec
        = new pbc::MapField<string, global::AElf.Hash>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Hash.Parser), 98);
    private readonly pbc::MapField<string, global::AElf.Hash> minersPreviousInValues_ = new pbc::MapField<string, global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Hash> MinersPreviousInValues {
      get { return minersPreviousInValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ToUpdate);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ToUpdate other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OutValue, other.OutValue)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (RoundId != other.RoundId) return false;
      if (PromiseTinyBlocks != other.PromiseTinyBlocks) return false;
      if (!object.Equals(PreviousInValue, other.PreviousInValue)) return false;
      if (!object.Equals(ActualMiningTime, other.ActualMiningTime)) return false;
      if (SupposedOrderOfNextRound != other.SupposedOrderOfNextRound) return false;
      if (!TuneOrderInformation.Equals(other.TuneOrderInformation)) return false;
      if (!EncryptedInValues.Equals(other.EncryptedInValues)) return false;
      if (!DecryptedPreviousInValues.Equals(other.DecryptedPreviousInValues)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (!MinersPreviousInValues.Equals(other.MinersPreviousInValues)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (outValue_ != null) hash ^= OutValue.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (RoundId != 0L) hash ^= RoundId.GetHashCode();
      if (PromiseTinyBlocks != 0) hash ^= PromiseTinyBlocks.GetHashCode();
      if (previousInValue_ != null) hash ^= PreviousInValue.GetHashCode();
      if (actualMiningTime_ != null) hash ^= ActualMiningTime.GetHashCode();
      if (SupposedOrderOfNextRound != 0) hash ^= SupposedOrderOfNextRound.GetHashCode();
      hash ^= TuneOrderInformation.GetHashCode();
      hash ^= EncryptedInValues.GetHashCode();
      hash ^= DecryptedPreviousInValues.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      hash ^= MinersPreviousInValues.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (outValue_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OutValue);
      }
      if (signature_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Signature);
      }
      if (RoundId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RoundId);
      }
      if (PromiseTinyBlocks != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(PromiseTinyBlocks);
      }
      if (previousInValue_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(PreviousInValue);
      }
      if (actualMiningTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ActualMiningTime);
      }
      if (SupposedOrderOfNextRound != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SupposedOrderOfNextRound);
      }
      tuneOrderInformation_.WriteTo(output, _map_tuneOrderInformation_codec);
      encryptedInValues_.WriteTo(output, _map_encryptedInValues_codec);
      decryptedPreviousInValues_.WriteTo(output, _map_decryptedPreviousInValues_codec);
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(ProducedBlocks);
      }
      minersPreviousInValues_.WriteTo(output, _map_minersPreviousInValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (outValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutValue);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (RoundId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundId);
      }
      if (PromiseTinyBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PromiseTinyBlocks);
      }
      if (previousInValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousInValue);
      }
      if (actualMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActualMiningTime);
      }
      if (SupposedOrderOfNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupposedOrderOfNextRound);
      }
      size += tuneOrderInformation_.CalculateSize(_map_tuneOrderInformation_codec);
      size += encryptedInValues_.CalculateSize(_map_encryptedInValues_codec);
      size += decryptedPreviousInValues_.CalculateSize(_map_decryptedPreviousInValues_codec);
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProducedBlocks);
      }
      size += minersPreviousInValues_.CalculateSize(_map_minersPreviousInValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ToUpdate other) {
      if (other == null) {
        return;
      }
      if (other.outValue_ != null) {
        if (outValue_ == null) {
          OutValue = new global::AElf.Hash();
        }
        OutValue.MergeFrom(other.OutValue);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          Signature = new global::AElf.Hash();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.RoundId != 0L) {
        RoundId = other.RoundId;
      }
      if (other.PromiseTinyBlocks != 0) {
        PromiseTinyBlocks = other.PromiseTinyBlocks;
      }
      if (other.previousInValue_ != null) {
        if (previousInValue_ == null) {
          PreviousInValue = new global::AElf.Hash();
        }
        PreviousInValue.MergeFrom(other.PreviousInValue);
      }
      if (other.actualMiningTime_ != null) {
        if (actualMiningTime_ == null) {
          ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ActualMiningTime.MergeFrom(other.ActualMiningTime);
      }
      if (other.SupposedOrderOfNextRound != 0) {
        SupposedOrderOfNextRound = other.SupposedOrderOfNextRound;
      }
      tuneOrderInformation_.Add(other.tuneOrderInformation_);
      encryptedInValues_.Add(other.encryptedInValues_);
      decryptedPreviousInValues_.Add(other.decryptedPreviousInValues_);
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      minersPreviousInValues_.Add(other.minersPreviousInValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (outValue_ == null) {
              OutValue = new global::AElf.Hash();
            }
            input.ReadMessage(OutValue);
            break;
          }
          case 18: {
            if (signature_ == null) {
              Signature = new global::AElf.Hash();
            }
            input.ReadMessage(Signature);
            break;
          }
          case 24: {
            RoundId = input.ReadInt64();
            break;
          }
          case 32: {
            PromiseTinyBlocks = input.ReadInt32();
            break;
          }
          case 42: {
            if (previousInValue_ == null) {
              PreviousInValue = new global::AElf.Hash();
            }
            input.ReadMessage(PreviousInValue);
            break;
          }
          case 50: {
            if (actualMiningTime_ == null) {
              ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ActualMiningTime);
            break;
          }
          case 56: {
            SupposedOrderOfNextRound = input.ReadInt32();
            break;
          }
          case 66: {
            tuneOrderInformation_.AddEntriesFrom(input, _map_tuneOrderInformation_codec);
            break;
          }
          case 74: {
            encryptedInValues_.AddEntriesFrom(input, _map_encryptedInValues_codec);
            break;
          }
          case 82: {
            decryptedPreviousInValues_.AddEntriesFrom(input, _map_decryptedPreviousInValues_codec);
            break;
          }
          case 88: {
            ProducedBlocks = input.ReadInt64();
            break;
          }
          case 98: {
            minersPreviousInValues_.AddEntriesFrom(input, _map_minersPreviousInValues_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The miners public key list for each term.
  /// </summary>
  public sealed partial class Miners : pb::IMessage<Miners> {
    private static readonly pb::MessageParser<Miners> _parser = new pb::MessageParser<Miners>(() => new Miners());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Miners> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Miners() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Miners(Miners other) : this() {
      termNumber_ = other.termNumber_;
      publicKeys_ = other.publicKeys_.Clone();
      addresses_ = other.addresses_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Miners Clone() {
      return new Miners(this);
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "PublicKeys" field.</summary>
    public const int PublicKeysFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_publicKeys_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> publicKeys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PublicKeys {
      get { return publicKeys_; }
    }

    /// <summary>Field number for the "Addresses" field.</summary>
    public const int AddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Address> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Address> addresses_ = new pbc::RepeatedField<global::AElf.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Address> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Miners);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Miners other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if(!publicKeys_.Equals(other.publicKeys_)) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      hash ^= publicKeys_.GetHashCode();
      hash ^= addresses_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TermNumber);
      }
      publicKeys_.WriteTo(output, _repeated_publicKeys_codec);
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TermNumber);
      }
      size += publicKeys_.CalculateSize(_repeated_publicKeys_codec);
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Miners other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      publicKeys_.Add(other.publicKeys_);
      addresses_.Add(other.addresses_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadInt64();
            break;
          }
          case 18: {
            publicKeys_.AddEntriesFrom(input, _repeated_publicKeys_codec);
            break;
          }
          case 26: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// To query to first round number of each term.
  /// </summary>
  public sealed partial class TermNumberLookUp : pb::IMessage<TermNumberLookUp> {
    private static readonly pb::MessageParser<TermNumberLookUp> _parser = new pb::MessageParser<TermNumberLookUp>(() => new TermNumberLookUp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermNumberLookUp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp(TermNumberLookUp other) : this() {
      map_ = other.map_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermNumberLookUp Clone() {
      return new TermNumberLookUp(this);
    }

    /// <summary>Field number for the "Map" field.</summary>
    public const int MapFieldNumber = 1;
    private static readonly pbc::MapField<long, long>.Codec _map_map_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForInt64(8), pb::FieldCodec.ForInt64(16), 10);
    private readonly pbc::MapField<long, long> map_ = new pbc::MapField<long, long>();
    /// <summary>
    /// Term number -> Round number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> Map {
      get { return map_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermNumberLookUp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermNumberLookUp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Map.Equals(other.Map)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Map.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      map_.WriteTo(output, _map_map_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += map_.CalculateSize(_map_map_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermNumberLookUp other) {
      if (other == null) {
        return;
      }
      map_.Add(other.map_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            map_.AddEntriesFrom(input, _map_map_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// All the candidates.
  /// </summary>
  public sealed partial class Candidates : pb::IMessage<Candidates> {
    private static readonly pb::MessageParser<Candidates> _parser = new pb::MessageParser<Candidates>(() => new Candidates());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Candidates> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates(Candidates other) : this() {
      publicKeys_ = other.publicKeys_.Clone();
      addresses_ = other.addresses_.Clone();
      isInitialMiners_ = other.isInitialMiners_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Candidates Clone() {
      return new Candidates(this);
    }

    /// <summary>Field number for the "PublicKeys" field.</summary>
    public const int PublicKeysFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_publicKeys_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> publicKeys_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PublicKeys {
      get { return publicKeys_; }
    }

    /// <summary>Field number for the "Addresses" field.</summary>
    public const int AddressesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Address> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Address.Parser);
    private readonly pbc::RepeatedField<global::AElf.Address> addresses_ = new pbc::RepeatedField<global::AElf.Address>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Address> Addresses {
      get { return addresses_; }
    }

    /// <summary>Field number for the "IsInitialMiners" field.</summary>
    public const int IsInitialMinersFieldNumber = 3;
    private bool isInitialMiners_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsInitialMiners {
      get { return isInitialMiners_; }
      set {
        isInitialMiners_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Candidates);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Candidates other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!publicKeys_.Equals(other.publicKeys_)) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      if (IsInitialMiners != other.IsInitialMiners) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= publicKeys_.GetHashCode();
      hash ^= addresses_.GetHashCode();
      if (IsInitialMiners != false) hash ^= IsInitialMiners.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      publicKeys_.WriteTo(output, _repeated_publicKeys_codec);
      addresses_.WriteTo(output, _repeated_addresses_codec);
      if (IsInitialMiners != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInitialMiners);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += publicKeys_.CalculateSize(_repeated_publicKeys_codec);
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      if (IsInitialMiners != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Candidates other) {
      if (other == null) {
        return;
      }
      publicKeys_.Add(other.publicKeys_);
      addresses_.Add(other.addresses_);
      if (other.IsInitialMiners != false) {
        IsInitialMiners = other.IsInitialMiners;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            publicKeys_.AddEntriesFrom(input, _repeated_publicKeys_codec);
            break;
          }
          case 18: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
          case 24: {
            IsInitialMiners = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The ticket / voting information for one user.
  /// </summary>
  public sealed partial class Tickets : pb::IMessage<Tickets> {
    private static readonly pb::MessageParser<Tickets> _parser = new pb::MessageParser<Tickets>(() => new Tickets());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tickets> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets(Tickets other) : this() {
      votingRecords_ = other.votingRecords_.Clone();
      votingRecordsCount_ = other.votingRecordsCount_;
      obtainedTickets_ = other.obtainedTickets_;
      votedTickets_ = other.votedTickets_;
      historyObtainedTickets_ = other.historyObtainedTickets_;
      historyVotedTickets_ = other.historyVotedTickets_;
      voteToTransactions_ = other.voteToTransactions_.Clone();
      voteFromTransactions_ = other.voteFromTransactions_.Clone();
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tickets Clone() {
      return new Tickets(this);
    }

    /// <summary>Field number for the "VotingRecords" field.</summary>
    public const int VotingRecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Consensus.DPoS.VotingRecord> _repeated_votingRecords_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Consensus.DPoS.VotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Consensus.DPoS.VotingRecord> votingRecords_ = new pbc::RepeatedField<global::AElf.Consensus.DPoS.VotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Consensus.DPoS.VotingRecord> VotingRecords {
      get { return votingRecords_; }
    }

    /// <summary>Field number for the "VotingRecordsCount" field.</summary>
    public const int VotingRecordsCountFieldNumber = 2;
    private long votingRecordsCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VotingRecordsCount {
      get { return votingRecordsCount_; }
      set {
        votingRecordsCount_ = value;
      }
    }

    /// <summary>Field number for the "ObtainedTickets" field.</summary>
    public const int ObtainedTicketsFieldNumber = 3;
    private long obtainedTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ObtainedTickets {
      get { return obtainedTickets_; }
      set {
        obtainedTickets_ = value;
      }
    }

    /// <summary>Field number for the "VotedTickets" field.</summary>
    public const int VotedTicketsFieldNumber = 4;
    private long votedTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VotedTickets {
      get { return votedTickets_; }
      set {
        votedTickets_ = value;
      }
    }

    /// <summary>Field number for the "HistoryObtainedTickets" field.</summary>
    public const int HistoryObtainedTicketsFieldNumber = 5;
    private long historyObtainedTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HistoryObtainedTickets {
      get { return historyObtainedTickets_; }
      set {
        historyObtainedTickets_ = value;
      }
    }

    /// <summary>Field number for the "HistoryVotedTickets" field.</summary>
    public const int HistoryVotedTicketsFieldNumber = 6;
    private long historyVotedTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HistoryVotedTickets {
      get { return historyVotedTickets_; }
      set {
        historyVotedTickets_ = value;
      }
    }

    /// <summary>Field number for the "VoteToTransactions" field.</summary>
    public const int VoteToTransactionsFieldNumber = 8;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_voteToTransactions_codec
        = pb::FieldCodec.ForMessage(66, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> voteToTransactions_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> VoteToTransactions {
      get { return voteToTransactions_; }
    }

    /// <summary>Field number for the "VoteFromTransactions" field.</summary>
    public const int VoteFromTransactionsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_voteFromTransactions_codec
        = pb::FieldCodec.ForMessage(74, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> voteFromTransactions_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> VoteFromTransactions {
      get { return voteFromTransactions_; }
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 10;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tickets);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tickets other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!votingRecords_.Equals(other.votingRecords_)) return false;
      if (VotingRecordsCount != other.VotingRecordsCount) return false;
      if (ObtainedTickets != other.ObtainedTickets) return false;
      if (VotedTickets != other.VotedTickets) return false;
      if (HistoryObtainedTickets != other.HistoryObtainedTickets) return false;
      if (HistoryVotedTickets != other.HistoryVotedTickets) return false;
      if(!voteToTransactions_.Equals(other.voteToTransactions_)) return false;
      if(!voteFromTransactions_.Equals(other.voteFromTransactions_)) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= votingRecords_.GetHashCode();
      if (VotingRecordsCount != 0L) hash ^= VotingRecordsCount.GetHashCode();
      if (ObtainedTickets != 0L) hash ^= ObtainedTickets.GetHashCode();
      if (VotedTickets != 0L) hash ^= VotedTickets.GetHashCode();
      if (HistoryObtainedTickets != 0L) hash ^= HistoryObtainedTickets.GetHashCode();
      if (HistoryVotedTickets != 0L) hash ^= HistoryVotedTickets.GetHashCode();
      hash ^= voteToTransactions_.GetHashCode();
      hash ^= voteFromTransactions_.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      votingRecords_.WriteTo(output, _repeated_votingRecords_codec);
      if (VotingRecordsCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VotingRecordsCount);
      }
      if (ObtainedTickets != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ObtainedTickets);
      }
      if (VotedTickets != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(VotedTickets);
      }
      if (HistoryObtainedTickets != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(HistoryObtainedTickets);
      }
      if (HistoryVotedTickets != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(HistoryVotedTickets);
      }
      voteToTransactions_.WriteTo(output, _repeated_voteToTransactions_codec);
      voteFromTransactions_.WriteTo(output, _repeated_voteFromTransactions_codec);
      if (PublicKey.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += votingRecords_.CalculateSize(_repeated_votingRecords_codec);
      if (VotingRecordsCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VotingRecordsCount);
      }
      if (ObtainedTickets != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ObtainedTickets);
      }
      if (VotedTickets != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VotedTickets);
      }
      if (HistoryObtainedTickets != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HistoryObtainedTickets);
      }
      if (HistoryVotedTickets != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HistoryVotedTickets);
      }
      size += voteToTransactions_.CalculateSize(_repeated_voteToTransactions_codec);
      size += voteFromTransactions_.CalculateSize(_repeated_voteFromTransactions_codec);
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tickets other) {
      if (other == null) {
        return;
      }
      votingRecords_.Add(other.votingRecords_);
      if (other.VotingRecordsCount != 0L) {
        VotingRecordsCount = other.VotingRecordsCount;
      }
      if (other.ObtainedTickets != 0L) {
        ObtainedTickets = other.ObtainedTickets;
      }
      if (other.VotedTickets != 0L) {
        VotedTickets = other.VotedTickets;
      }
      if (other.HistoryObtainedTickets != 0L) {
        HistoryObtainedTickets = other.HistoryObtainedTickets;
      }
      if (other.HistoryVotedTickets != 0L) {
        HistoryVotedTickets = other.HistoryVotedTickets;
      }
      voteToTransactions_.Add(other.voteToTransactions_);
      voteFromTransactions_.Add(other.voteFromTransactions_);
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            votingRecords_.AddEntriesFrom(input, _repeated_votingRecords_codec);
            break;
          }
          case 16: {
            VotingRecordsCount = input.ReadInt64();
            break;
          }
          case 24: {
            ObtainedTickets = input.ReadInt64();
            break;
          }
          case 32: {
            VotedTickets = input.ReadInt64();
            break;
          }
          case 40: {
            HistoryObtainedTickets = input.ReadInt64();
            break;
          }
          case 48: {
            HistoryVotedTickets = input.ReadInt64();
            break;
          }
          case 66: {
            voteToTransactions_.AddEntriesFrom(input, _repeated_voteToTransactions_codec);
            break;
          }
          case 74: {
            voteFromTransactions_.AddEntriesFrom(input, _repeated_voteFromTransactions_codec);
            break;
          }
          case 82: {
            PublicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A voting record.
  /// </summary>
  public sealed partial class VotingRecord : pb::IMessage<VotingRecord> {
    private static readonly pb::MessageParser<VotingRecord> _parser = new pb::MessageParser<VotingRecord>(() => new VotingRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VotingRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingRecord(VotingRecord other) : this() {
      from_ = other.from_;
      to_ = other.to_;
      count_ = other.count_;
      roundNumber_ = other.roundNumber_;
      transactionId_ = other.transactionId_ != null ? other.transactionId_.Clone() : null;
      voteAge_ = other.voteAge_;
      lockDaysList_ = other.lockDaysList_.Clone();
      unlockAge_ = other.unlockAge_;
      termNumber_ = other.termNumber_;
      unlockTimestamp_ = other.unlockTimestamp_ != null ? other.unlockTimestamp_.Clone() : null;
      withdrawTimestamp_ = other.withdrawTimestamp_ != null ? other.withdrawTimestamp_.Clone() : null;
      voteTimestamp_ = other.voteTimestamp_ != null ? other.voteTimestamp_.Clone() : null;
      isWithdrawn_ = other.isWithdrawn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VotingRecord Clone() {
      return new VotingRecord(this);
    }

    /// <summary>Field number for the "From" field.</summary>
    public const int FromFieldNumber = 1;
    private string from_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string From {
      get { return from_; }
      set {
        from_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "To" field.</summary>
    public const int ToFieldNumber = 2;
    private string to_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string To {
      get { return to_; }
      set {
        to_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 3;
    private long count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "RoundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 4;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "TransactionId" field.</summary>
    public const int TransactionIdFieldNumber = 5;
    private global::AElf.Hash transactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash TransactionId {
      get { return transactionId_; }
      set {
        transactionId_ = value;
      }
    }

    /// <summary>Field number for the "VoteAge" field.</summary>
    public const int VoteAgeFieldNumber = 6;
    private long voteAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VoteAge {
      get { return voteAge_; }
      set {
        voteAge_ = value;
      }
    }

    /// <summary>Field number for the "LockDaysList" field.</summary>
    public const int LockDaysListFieldNumber = 7;
    private static readonly pb::FieldCodec<int> _repeated_lockDaysList_codec
        = pb::FieldCodec.ForInt32(58);
    private readonly pbc::RepeatedField<int> lockDaysList_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// Can be renewed by adding items.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LockDaysList {
      get { return lockDaysList_; }
    }

    /// <summary>Field number for the "UnlockAge" field.</summary>
    public const int UnlockAgeFieldNumber = 8;
    private long unlockAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnlockAge {
      get { return unlockAge_; }
      set {
        unlockAge_ = value;
      }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 9;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "UnlockTimestamp" field.</summary>
    public const int UnlockTimestampFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp unlockTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UnlockTimestamp {
      get { return unlockTimestamp_; }
      set {
        unlockTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "WithdrawTimestamp" field.</summary>
    public const int WithdrawTimestampFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp withdrawTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp WithdrawTimestamp {
      get { return withdrawTimestamp_; }
      set {
        withdrawTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "VoteTimestamp" field.</summary>
    public const int VoteTimestampFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp voteTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp VoteTimestamp {
      get { return voteTimestamp_; }
      set {
        voteTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "IsWithdrawn" field.</summary>
    public const int IsWithdrawnFieldNumber = 13;
    private bool isWithdrawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWithdrawn {
      get { return isWithdrawn_; }
      set {
        isWithdrawn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VotingRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VotingRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (From != other.From) return false;
      if (To != other.To) return false;
      if (Count != other.Count) return false;
      if (RoundNumber != other.RoundNumber) return false;
      if (!object.Equals(TransactionId, other.TransactionId)) return false;
      if (VoteAge != other.VoteAge) return false;
      if(!lockDaysList_.Equals(other.lockDaysList_)) return false;
      if (UnlockAge != other.UnlockAge) return false;
      if (TermNumber != other.TermNumber) return false;
      if (!object.Equals(UnlockTimestamp, other.UnlockTimestamp)) return false;
      if (!object.Equals(WithdrawTimestamp, other.WithdrawTimestamp)) return false;
      if (!object.Equals(VoteTimestamp, other.VoteTimestamp)) return false;
      if (IsWithdrawn != other.IsWithdrawn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (From.Length != 0) hash ^= From.GetHashCode();
      if (To.Length != 0) hash ^= To.GetHashCode();
      if (Count != 0L) hash ^= Count.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (transactionId_ != null) hash ^= TransactionId.GetHashCode();
      if (VoteAge != 0L) hash ^= VoteAge.GetHashCode();
      hash ^= lockDaysList_.GetHashCode();
      if (UnlockAge != 0L) hash ^= UnlockAge.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (unlockTimestamp_ != null) hash ^= UnlockTimestamp.GetHashCode();
      if (withdrawTimestamp_ != null) hash ^= WithdrawTimestamp.GetHashCode();
      if (voteTimestamp_ != null) hash ^= VoteTimestamp.GetHashCode();
      if (IsWithdrawn != false) hash ^= IsWithdrawn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (From.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(From);
      }
      if (To.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(To);
      }
      if (Count != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Count);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RoundNumber);
      }
      if (transactionId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TransactionId);
      }
      if (VoteAge != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(VoteAge);
      }
      lockDaysList_.WriteTo(output, _repeated_lockDaysList_codec);
      if (UnlockAge != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(UnlockAge);
      }
      if (TermNumber != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(TermNumber);
      }
      if (unlockTimestamp_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UnlockTimestamp);
      }
      if (withdrawTimestamp_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(WithdrawTimestamp);
      }
      if (voteTimestamp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(VoteTimestamp);
      }
      if (IsWithdrawn != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsWithdrawn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (From.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(From);
      }
      if (To.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(To);
      }
      if (Count != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Count);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundNumber);
      }
      if (transactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TransactionId);
      }
      if (VoteAge != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VoteAge);
      }
      size += lockDaysList_.CalculateSize(_repeated_lockDaysList_codec);
      if (UnlockAge != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnlockAge);
      }
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TermNumber);
      }
      if (unlockTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockTimestamp);
      }
      if (withdrawTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithdrawTimestamp);
      }
      if (voteTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteTimestamp);
      }
      if (IsWithdrawn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VotingRecord other) {
      if (other == null) {
        return;
      }
      if (other.From.Length != 0) {
        From = other.From;
      }
      if (other.To.Length != 0) {
        To = other.To;
      }
      if (other.Count != 0L) {
        Count = other.Count;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      if (other.transactionId_ != null) {
        if (transactionId_ == null) {
          TransactionId = new global::AElf.Hash();
        }
        TransactionId.MergeFrom(other.TransactionId);
      }
      if (other.VoteAge != 0L) {
        VoteAge = other.VoteAge;
      }
      lockDaysList_.Add(other.lockDaysList_);
      if (other.UnlockAge != 0L) {
        UnlockAge = other.UnlockAge;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.unlockTimestamp_ != null) {
        if (unlockTimestamp_ == null) {
          UnlockTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UnlockTimestamp.MergeFrom(other.UnlockTimestamp);
      }
      if (other.withdrawTimestamp_ != null) {
        if (withdrawTimestamp_ == null) {
          WithdrawTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        WithdrawTimestamp.MergeFrom(other.WithdrawTimestamp);
      }
      if (other.voteTimestamp_ != null) {
        if (voteTimestamp_ == null) {
          VoteTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        VoteTimestamp.MergeFrom(other.VoteTimestamp);
      }
      if (other.IsWithdrawn != false) {
        IsWithdrawn = other.IsWithdrawn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            From = input.ReadString();
            break;
          }
          case 18: {
            To = input.ReadString();
            break;
          }
          case 24: {
            Count = input.ReadInt64();
            break;
          }
          case 32: {
            RoundNumber = input.ReadInt64();
            break;
          }
          case 42: {
            if (transactionId_ == null) {
              TransactionId = new global::AElf.Hash();
            }
            input.ReadMessage(TransactionId);
            break;
          }
          case 48: {
            VoteAge = input.ReadInt64();
            break;
          }
          case 58:
          case 56: {
            lockDaysList_.AddEntriesFrom(input, _repeated_lockDaysList_codec);
            break;
          }
          case 64: {
            UnlockAge = input.ReadInt64();
            break;
          }
          case 72: {
            TermNumber = input.ReadInt64();
            break;
          }
          case 82: {
            if (unlockTimestamp_ == null) {
              UnlockTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UnlockTimestamp);
            break;
          }
          case 90: {
            if (withdrawTimestamp_ == null) {
              WithdrawTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(WithdrawTimestamp);
            break;
          }
          case 98: {
            if (voteTimestamp_ == null) {
              VoteTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(VoteTimestamp);
            break;
          }
          case 104: {
            IsWithdrawn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The snap shot of one term.
  /// </summary>
  public sealed partial class TermSnapshot : pb::IMessage<TermSnapshot> {
    private static readonly pb::MessageParser<TermSnapshot> _parser = new pb::MessageParser<TermSnapshot>(() => new TermSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot(TermSnapshot other) : this() {
      endRoundNumber_ = other.endRoundNumber_;
      totalBlocks_ = other.totalBlocks_;
      candidatesSnapshot_ = other.candidatesSnapshot_.Clone();
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot Clone() {
      return new TermSnapshot(this);
    }

    /// <summary>Field number for the "EndRoundNumber" field.</summary>
    public const int EndRoundNumberFieldNumber = 1;
    private long endRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndRoundNumber {
      get { return endRoundNumber_; }
      set {
        endRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "TotalBlocks" field.</summary>
    public const int TotalBlocksFieldNumber = 2;
    private long totalBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBlocks {
      get { return totalBlocks_; }
      set {
        totalBlocks_ = value;
      }
    }

    /// <summary>Field number for the "CandidatesSnapshot" field.</summary>
    public const int CandidatesSnapshotFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Consensus.DPoS.CandidateInTerm> _repeated_candidatesSnapshot_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Consensus.DPoS.CandidateInTerm.Parser);
    private readonly pbc::RepeatedField<global::AElf.Consensus.DPoS.CandidateInTerm> candidatesSnapshot_ = new pbc::RepeatedField<global::AElf.Consensus.DPoS.CandidateInTerm>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Consensus.DPoS.CandidateInTerm> CandidatesSnapshot {
      get { return candidatesSnapshot_; }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 4;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndRoundNumber != other.EndRoundNumber) return false;
      if (TotalBlocks != other.TotalBlocks) return false;
      if(!candidatesSnapshot_.Equals(other.candidatesSnapshot_)) return false;
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndRoundNumber != 0L) hash ^= EndRoundNumber.GetHashCode();
      if (TotalBlocks != 0L) hash ^= TotalBlocks.GetHashCode();
      hash ^= candidatesSnapshot_.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndRoundNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EndRoundNumber);
      }
      if (TotalBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalBlocks);
      }
      candidatesSnapshot_.WriteTo(output, _repeated_candidatesSnapshot_codec);
      if (TermNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndRoundNumber);
      }
      if (TotalBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBlocks);
      }
      size += candidatesSnapshot_.CalculateSize(_repeated_candidatesSnapshot_codec);
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.EndRoundNumber != 0L) {
        EndRoundNumber = other.EndRoundNumber;
      }
      if (other.TotalBlocks != 0L) {
        TotalBlocks = other.TotalBlocks;
      }
      candidatesSnapshot_.Add(other.candidatesSnapshot_);
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndRoundNumber = input.ReadInt64();
            break;
          }
          case 16: {
            TotalBlocks = input.ReadInt64();
            break;
          }
          case 26: {
            candidatesSnapshot_.AddEntriesFrom(input, _repeated_candidatesSnapshot_codec);
            break;
          }
          case 32: {
            TermNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of a candidate of a specific term.
  /// </summary>
  public sealed partial class CandidateInTerm : pb::IMessage<CandidateInTerm> {
    private static readonly pb::MessageParser<CandidateInTerm> _parser = new pb::MessageParser<CandidateInTerm>(() => new CandidateInTerm());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateInTerm> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInTerm() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInTerm(CandidateInTerm other) : this() {
      publicKey_ = other.publicKey_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      votes_ = other.votes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInTerm Clone() {
      return new CandidateInTerm(this);
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 2;
    private global::AElf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "Votes" field.</summary>
    public const int VotesFieldNumber = 3;
    private long votes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Votes {
      get { return votes_; }
      set {
        votes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateInTerm);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateInTerm other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (Votes != other.Votes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (Votes != 0L) hash ^= Votes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      if (address_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Address);
      }
      if (Votes != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Votes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (Votes != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Votes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateInTerm other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.Votes != 0L) {
        Votes = other.Votes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 18: {
            if (address_ == null) {
              Address = new global::AElf.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 24: {
            Votes = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of a round.
  /// </summary>
  public sealed partial class Round : pb::IMessage<Round> {
    private static readonly pb::MessageParser<Round> _parser = new pb::MessageParser<Round>(() => new Round());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Round> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round(Round other) : this() {
      roundNumber_ = other.roundNumber_;
      realTimeMinersInformation_ = other.realTimeMinersInformation_.Clone();
      mainChainMinersRoundNumber_ = other.mainChainMinersRoundNumber_;
      blockchainAge_ = other.blockchainAge_;
      extraBlockProducerOfPreviousRound_ = other.extraBlockProducerOfPreviousRound_;
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Round Clone() {
      return new Round(this);
    }

    /// <summary>Field number for the "RoundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 1;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    /// <summary>Field number for the "RealTimeMinersInformation" field.</summary>
    public const int RealTimeMinersInformationFieldNumber = 2;
    private static readonly pbc::MapField<string, global::AElf.Consensus.DPoS.MinerInRound>.Codec _map_realTimeMinersInformation_codec
        = new pbc::MapField<string, global::AElf.Consensus.DPoS.MinerInRound>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Consensus.DPoS.MinerInRound.Parser), 18);
    private readonly pbc::MapField<string, global::AElf.Consensus.DPoS.MinerInRound> realTimeMinersInformation_ = new pbc::MapField<string, global::AElf.Consensus.DPoS.MinerInRound>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Consensus.DPoS.MinerInRound> RealTimeMinersInformation {
      get { return realTimeMinersInformation_; }
    }

    /// <summary>Field number for the "MainChainMinersRoundNumber" field.</summary>
    public const int MainChainMinersRoundNumberFieldNumber = 3;
    private long mainChainMinersRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MainChainMinersRoundNumber {
      get { return mainChainMinersRoundNumber_; }
      set {
        mainChainMinersRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "BlockchainAge" field.</summary>
    public const int BlockchainAgeFieldNumber = 4;
    private long blockchainAge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockchainAge {
      get { return blockchainAge_; }
      set {
        blockchainAge_ = value;
      }
    }

    /// <summary>Field number for the "ExtraBlockProducerOfPreviousRound" field.</summary>
    public const int ExtraBlockProducerOfPreviousRoundFieldNumber = 7;
    private string extraBlockProducerOfPreviousRound_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ExtraBlockProducerOfPreviousRound {
      get { return extraBlockProducerOfPreviousRound_; }
      set {
        extraBlockProducerOfPreviousRound_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 8;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Round);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Round other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoundNumber != other.RoundNumber) return false;
      if (!RealTimeMinersInformation.Equals(other.RealTimeMinersInformation)) return false;
      if (MainChainMinersRoundNumber != other.MainChainMinersRoundNumber) return false;
      if (BlockchainAge != other.BlockchainAge) return false;
      if (ExtraBlockProducerOfPreviousRound != other.ExtraBlockProducerOfPreviousRound) return false;
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      hash ^= RealTimeMinersInformation.GetHashCode();
      if (MainChainMinersRoundNumber != 0L) hash ^= MainChainMinersRoundNumber.GetHashCode();
      if (BlockchainAge != 0L) hash ^= BlockchainAge.GetHashCode();
      if (ExtraBlockProducerOfPreviousRound.Length != 0) hash ^= ExtraBlockProducerOfPreviousRound.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoundNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoundNumber);
      }
      realTimeMinersInformation_.WriteTo(output, _map_realTimeMinersInformation_codec);
      if (MainChainMinersRoundNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(MainChainMinersRoundNumber);
      }
      if (BlockchainAge != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BlockchainAge);
      }
      if (ExtraBlockProducerOfPreviousRound.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ExtraBlockProducerOfPreviousRound);
      }
      if (TermNumber != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundNumber);
      }
      size += realTimeMinersInformation_.CalculateSize(_map_realTimeMinersInformation_codec);
      if (MainChainMinersRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MainChainMinersRoundNumber);
      }
      if (BlockchainAge != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockchainAge);
      }
      if (ExtraBlockProducerOfPreviousRound.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ExtraBlockProducerOfPreviousRound);
      }
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Round other) {
      if (other == null) {
        return;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      realTimeMinersInformation_.Add(other.realTimeMinersInformation_);
      if (other.MainChainMinersRoundNumber != 0L) {
        MainChainMinersRoundNumber = other.MainChainMinersRoundNumber;
      }
      if (other.BlockchainAge != 0L) {
        BlockchainAge = other.BlockchainAge;
      }
      if (other.ExtraBlockProducerOfPreviousRound.Length != 0) {
        ExtraBlockProducerOfPreviousRound = other.ExtraBlockProducerOfPreviousRound;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoundNumber = input.ReadInt64();
            break;
          }
          case 18: {
            realTimeMinersInformation_.AddEntriesFrom(input, _map_realTimeMinersInformation_codec);
            break;
          }
          case 24: {
            MainChainMinersRoundNumber = input.ReadInt64();
            break;
          }
          case 32: {
            BlockchainAge = input.ReadInt64();
            break;
          }
          case 58: {
            ExtraBlockProducerOfPreviousRound = input.ReadString();
            break;
          }
          case 64: {
            TermNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of a miner in a specific round.
  /// </summary>
  public sealed partial class MinerInRound : pb::IMessage<MinerInRound> {
    private static readonly pb::MessageParser<MinerInRound> _parser = new pb::MessageParser<MinerInRound>(() => new MinerInRound());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerInRound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound(MinerInRound other) : this() {
      order_ = other.order_;
      isExtraBlockProducer_ = other.isExtraBlockProducer_;
      inValue_ = other.inValue_ != null ? other.inValue_.Clone() : null;
      outValue_ = other.outValue_ != null ? other.outValue_.Clone() : null;
      signature_ = other.signature_ != null ? other.signature_.Clone() : null;
      expectedMiningTime_ = other.expectedMiningTime_ != null ? other.expectedMiningTime_.Clone() : null;
      producedBlocks_ = other.producedBlocks_;
      missedTimeSlots_ = other.missedTimeSlots_;
      publicKey_ = other.publicKey_;
      promisedTinyBlocks_ = other.promisedTinyBlocks_;
      alias_ = other.alias_;
      previousInValue_ = other.previousInValue_ != null ? other.previousInValue_.Clone() : null;
      supposedOrderOfNextRound_ = other.supposedOrderOfNextRound_;
      finalOrderOfNextRound_ = other.finalOrderOfNextRound_;
      actualMiningTime_ = other.actualMiningTime_ != null ? other.actualMiningTime_.Clone() : null;
      encryptedInValues_ = other.encryptedInValues_.Clone();
      decryptedPreviousInValues_ = other.decryptedPreviousInValues_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerInRound Clone() {
      return new MinerInRound(this);
    }

    /// <summary>Field number for the "Order" field.</summary>
    public const int OrderFieldNumber = 1;
    private int order_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Order {
      get { return order_; }
      set {
        order_ = value;
      }
    }

    /// <summary>Field number for the "IsExtraBlockProducer" field.</summary>
    public const int IsExtraBlockProducerFieldNumber = 2;
    private bool isExtraBlockProducer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsExtraBlockProducer {
      get { return isExtraBlockProducer_; }
      set {
        isExtraBlockProducer_ = value;
      }
    }

    /// <summary>Field number for the "InValue" field.</summary>
    public const int InValueFieldNumber = 3;
    private global::AElf.Hash inValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash InValue {
      get { return inValue_; }
      set {
        inValue_ = value;
      }
    }

    /// <summary>Field number for the "OutValue" field.</summary>
    public const int OutValueFieldNumber = 4;
    private global::AElf.Hash outValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash OutValue {
      get { return outValue_; }
      set {
        outValue_ = value;
      }
    }

    /// <summary>Field number for the "Signature" field.</summary>
    public const int SignatureFieldNumber = 5;
    private global::AElf.Hash signature_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash Signature {
      get { return signature_; }
      set {
        signature_ = value;
      }
    }

    /// <summary>Field number for the "ExpectedMiningTime" field.</summary>
    public const int ExpectedMiningTimeFieldNumber = 6;
    private global::Google.Protobuf.WellKnownTypes.Timestamp expectedMiningTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ExpectedMiningTime {
      get { return expectedMiningTime_; }
      set {
        expectedMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "ProducedBlocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 7;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "MissedTimeSlots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 8;
    private long missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 9;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PromisedTinyBlocks" field.</summary>
    public const int PromisedTinyBlocksFieldNumber = 10;
    private int promisedTinyBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PromisedTinyBlocks {
      get { return promisedTinyBlocks_; }
      set {
        promisedTinyBlocks_ = value;
      }
    }

    /// <summary>Field number for the "Alias" field.</summary>
    public const int AliasFieldNumber = 11;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PreviousInValue" field.</summary>
    public const int PreviousInValueFieldNumber = 12;
    private global::AElf.Hash previousInValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash PreviousInValue {
      get { return previousInValue_; }
      set {
        previousInValue_ = value;
      }
    }

    /// <summary>Field number for the "SupposedOrderOfNextRound" field.</summary>
    public const int SupposedOrderOfNextRoundFieldNumber = 13;
    private int supposedOrderOfNextRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SupposedOrderOfNextRound {
      get { return supposedOrderOfNextRound_; }
      set {
        supposedOrderOfNextRound_ = value;
      }
    }

    /// <summary>Field number for the "FinalOrderOfNextRound" field.</summary>
    public const int FinalOrderOfNextRoundFieldNumber = 14;
    private int finalOrderOfNextRound_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FinalOrderOfNextRound {
      get { return finalOrderOfNextRound_; }
      set {
        finalOrderOfNextRound_ = value;
      }
    }

    /// <summary>Field number for the "ActualMiningTime" field.</summary>
    public const int ActualMiningTimeFieldNumber = 15;
    private global::Google.Protobuf.WellKnownTypes.Timestamp actualMiningTime_;
    /// <summary>
    /// Miners must fill actual mining time when they do the mining.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp ActualMiningTime {
      get { return actualMiningTime_; }
      set {
        actualMiningTime_ = value;
      }
    }

    /// <summary>Field number for the "EncryptedInValues" field.</summary>
    public const int EncryptedInValuesFieldNumber = 16;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_encryptedInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 130);
    private readonly pbc::MapField<string, pb::ByteString> encryptedInValues_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> EncryptedInValues {
      get { return encryptedInValues_; }
    }

    /// <summary>Field number for the "DecryptedPreviousInValues" field.</summary>
    public const int DecryptedPreviousInValuesFieldNumber = 17;
    private static readonly pbc::MapField<string, pb::ByteString>.Codec _map_decryptedPreviousInValues_codec
        = new pbc::MapField<string, pb::ByteString>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBytes(18), 138);
    private readonly pbc::MapField<string, pb::ByteString> decryptedPreviousInValues_ = new pbc::MapField<string, pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, pb::ByteString> DecryptedPreviousInValues {
      get { return decryptedPreviousInValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinerInRound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerInRound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Order != other.Order) return false;
      if (IsExtraBlockProducer != other.IsExtraBlockProducer) return false;
      if (!object.Equals(InValue, other.InValue)) return false;
      if (!object.Equals(OutValue, other.OutValue)) return false;
      if (!object.Equals(Signature, other.Signature)) return false;
      if (!object.Equals(ExpectedMiningTime, other.ExpectedMiningTime)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (PublicKey != other.PublicKey) return false;
      if (PromisedTinyBlocks != other.PromisedTinyBlocks) return false;
      if (Alias != other.Alias) return false;
      if (!object.Equals(PreviousInValue, other.PreviousInValue)) return false;
      if (SupposedOrderOfNextRound != other.SupposedOrderOfNextRound) return false;
      if (FinalOrderOfNextRound != other.FinalOrderOfNextRound) return false;
      if (!object.Equals(ActualMiningTime, other.ActualMiningTime)) return false;
      if (!EncryptedInValues.Equals(other.EncryptedInValues)) return false;
      if (!DecryptedPreviousInValues.Equals(other.DecryptedPreviousInValues)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Order != 0) hash ^= Order.GetHashCode();
      if (IsExtraBlockProducer != false) hash ^= IsExtraBlockProducer.GetHashCode();
      if (inValue_ != null) hash ^= InValue.GetHashCode();
      if (outValue_ != null) hash ^= OutValue.GetHashCode();
      if (signature_ != null) hash ^= Signature.GetHashCode();
      if (expectedMiningTime_ != null) hash ^= ExpectedMiningTime.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      if (MissedTimeSlots != 0L) hash ^= MissedTimeSlots.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (PromisedTinyBlocks != 0) hash ^= PromisedTinyBlocks.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (previousInValue_ != null) hash ^= PreviousInValue.GetHashCode();
      if (SupposedOrderOfNextRound != 0) hash ^= SupposedOrderOfNextRound.GetHashCode();
      if (FinalOrderOfNextRound != 0) hash ^= FinalOrderOfNextRound.GetHashCode();
      if (actualMiningTime_ != null) hash ^= ActualMiningTime.GetHashCode();
      hash ^= EncryptedInValues.GetHashCode();
      hash ^= DecryptedPreviousInValues.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Order != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Order);
      }
      if (IsExtraBlockProducer != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsExtraBlockProducer);
      }
      if (inValue_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(InValue);
      }
      if (outValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(OutValue);
      }
      if (signature_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Signature);
      }
      if (expectedMiningTime_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ExpectedMiningTime);
      }
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(MissedTimeSlots);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(PublicKey);
      }
      if (PromisedTinyBlocks != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PromisedTinyBlocks);
      }
      if (Alias.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Alias);
      }
      if (previousInValue_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(PreviousInValue);
      }
      if (SupposedOrderOfNextRound != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SupposedOrderOfNextRound);
      }
      if (FinalOrderOfNextRound != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(FinalOrderOfNextRound);
      }
      if (actualMiningTime_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ActualMiningTime);
      }
      encryptedInValues_.WriteTo(output, _map_encryptedInValues_codec);
      decryptedPreviousInValues_.WriteTo(output, _map_decryptedPreviousInValues_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Order != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Order);
      }
      if (IsExtraBlockProducer != false) {
        size += 1 + 1;
      }
      if (inValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InValue);
      }
      if (outValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutValue);
      }
      if (signature_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signature);
      }
      if (expectedMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ExpectedMiningTime);
      }
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MissedTimeSlots);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (PromisedTinyBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PromisedTinyBlocks);
      }
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (previousInValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousInValue);
      }
      if (SupposedOrderOfNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SupposedOrderOfNextRound);
      }
      if (FinalOrderOfNextRound != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FinalOrderOfNextRound);
      }
      if (actualMiningTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActualMiningTime);
      }
      size += encryptedInValues_.CalculateSize(_map_encryptedInValues_codec);
      size += decryptedPreviousInValues_.CalculateSize(_map_decryptedPreviousInValues_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerInRound other) {
      if (other == null) {
        return;
      }
      if (other.Order != 0) {
        Order = other.Order;
      }
      if (other.IsExtraBlockProducer != false) {
        IsExtraBlockProducer = other.IsExtraBlockProducer;
      }
      if (other.inValue_ != null) {
        if (inValue_ == null) {
          InValue = new global::AElf.Hash();
        }
        InValue.MergeFrom(other.InValue);
      }
      if (other.outValue_ != null) {
        if (outValue_ == null) {
          OutValue = new global::AElf.Hash();
        }
        OutValue.MergeFrom(other.OutValue);
      }
      if (other.signature_ != null) {
        if (signature_ == null) {
          Signature = new global::AElf.Hash();
        }
        Signature.MergeFrom(other.Signature);
      }
      if (other.expectedMiningTime_ != null) {
        if (expectedMiningTime_ == null) {
          ExpectedMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ExpectedMiningTime.MergeFrom(other.ExpectedMiningTime);
      }
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.MissedTimeSlots != 0L) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.PromisedTinyBlocks != 0) {
        PromisedTinyBlocks = other.PromisedTinyBlocks;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      if (other.previousInValue_ != null) {
        if (previousInValue_ == null) {
          PreviousInValue = new global::AElf.Hash();
        }
        PreviousInValue.MergeFrom(other.PreviousInValue);
      }
      if (other.SupposedOrderOfNextRound != 0) {
        SupposedOrderOfNextRound = other.SupposedOrderOfNextRound;
      }
      if (other.FinalOrderOfNextRound != 0) {
        FinalOrderOfNextRound = other.FinalOrderOfNextRound;
      }
      if (other.actualMiningTime_ != null) {
        if (actualMiningTime_ == null) {
          ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        ActualMiningTime.MergeFrom(other.ActualMiningTime);
      }
      encryptedInValues_.Add(other.encryptedInValues_);
      decryptedPreviousInValues_.Add(other.decryptedPreviousInValues_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Order = input.ReadInt32();
            break;
          }
          case 16: {
            IsExtraBlockProducer = input.ReadBool();
            break;
          }
          case 26: {
            if (inValue_ == null) {
              InValue = new global::AElf.Hash();
            }
            input.ReadMessage(InValue);
            break;
          }
          case 34: {
            if (outValue_ == null) {
              OutValue = new global::AElf.Hash();
            }
            input.ReadMessage(OutValue);
            break;
          }
          case 42: {
            if (signature_ == null) {
              Signature = new global::AElf.Hash();
            }
            input.ReadMessage(Signature);
            break;
          }
          case 50: {
            if (expectedMiningTime_ == null) {
              ExpectedMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ExpectedMiningTime);
            break;
          }
          case 56: {
            ProducedBlocks = input.ReadInt64();
            break;
          }
          case 64: {
            MissedTimeSlots = input.ReadInt64();
            break;
          }
          case 74: {
            PublicKey = input.ReadString();
            break;
          }
          case 80: {
            PromisedTinyBlocks = input.ReadInt32();
            break;
          }
          case 90: {
            Alias = input.ReadString();
            break;
          }
          case 98: {
            if (previousInValue_ == null) {
              PreviousInValue = new global::AElf.Hash();
            }
            input.ReadMessage(PreviousInValue);
            break;
          }
          case 104: {
            SupposedOrderOfNextRound = input.ReadInt32();
            break;
          }
          case 112: {
            FinalOrderOfNextRound = input.ReadInt32();
            break;
          }
          case 122: {
            if (actualMiningTime_ == null) {
              ActualMiningTime = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(ActualMiningTime);
            break;
          }
          case 130: {
            encryptedInValues_.AddEntriesFrom(input, _map_encryptedInValues_codec);
            break;
          }
          case 138: {
            decryptedPreviousInValues_.AddEntriesFrom(input, _map_decryptedPreviousInValues_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The information of a candidate.
  /// </summary>
  public sealed partial class CandidateInHistory : pb::IMessage<CandidateInHistory> {
    private static readonly pb::MessageParser<CandidateInHistory> _parser = new pb::MessageParser<CandidateInHistory>(() => new CandidateInHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateInHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistory(CandidateInHistory other) : this() {
      publicKey_ = other.publicKey_;
      terms_ = other.terms_.Clone();
      producedBlocks_ = other.producedBlocks_;
      missedTimeSlots_ = other.missedTimeSlots_;
      continualAppointmentCount_ = other.continualAppointmentCount_;
      reappointmentCount_ = other.reappointmentCount_;
      aliases_ = other.aliases_.Clone();
      currentAlias_ = other.currentAlias_;
      currentVotesNumber_ = other.currentVotesNumber_;
      address_ = other.address_ != null ? other.address_.Clone() : null;
      announcementTransactionId_ = other.announcementTransactionId_ != null ? other.announcementTransactionId_.Clone() : null;
      isEvilNode_ = other.isEvilNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistory Clone() {
      return new CandidateInHistory(this);
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Terms" field.</summary>
    public const int TermsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_terms_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> terms_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Terms {
      get { return terms_; }
    }

    /// <summary>Field number for the "ProducedBlocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 3;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "MissedTimeSlots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 4;
    private long missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "ContinualAppointmentCount" field.</summary>
    public const int ContinualAppointmentCountFieldNumber = 5;
    private long continualAppointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ContinualAppointmentCount {
      get { return continualAppointmentCount_; }
      set {
        continualAppointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "ReappointmentCount" field.</summary>
    public const int ReappointmentCountFieldNumber = 6;
    private long reappointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReappointmentCount {
      get { return reappointmentCount_; }
      set {
        reappointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "Aliases" field.</summary>
    public const int AliasesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_aliases_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> aliases_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Aliases {
      get { return aliases_; }
    }

    /// <summary>Field number for the "CurrentAlias" field.</summary>
    public const int CurrentAliasFieldNumber = 8;
    private string currentAlias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAlias {
      get { return currentAlias_; }
      set {
        currentAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CurrentVotesNumber" field.</summary>
    public const int CurrentVotesNumberFieldNumber = 9;
    private long currentVotesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentVotesNumber {
      get { return currentVotesNumber_; }
      set {
        currentVotesNumber_ = value;
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 11;
    private global::AElf.Address address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    /// <summary>Field number for the "AnnouncementTransactionId" field.</summary>
    public const int AnnouncementTransactionIdFieldNumber = 12;
    private global::AElf.Hash announcementTransactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash AnnouncementTransactionId {
      get { return announcementTransactionId_; }
      set {
        announcementTransactionId_ = value;
      }
    }

    /// <summary>Field number for the "IsEvilNode" field.</summary>
    public const int IsEvilNodeFieldNumber = 13;
    private bool isEvilNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvilNode {
      get { return isEvilNode_; }
      set {
        isEvilNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateInHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateInHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if(!terms_.Equals(other.terms_)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (ContinualAppointmentCount != other.ContinualAppointmentCount) return false;
      if (ReappointmentCount != other.ReappointmentCount) return false;
      if(!aliases_.Equals(other.aliases_)) return false;
      if (CurrentAlias != other.CurrentAlias) return false;
      if (CurrentVotesNumber != other.CurrentVotesNumber) return false;
      if (!object.Equals(Address, other.Address)) return false;
      if (!object.Equals(AnnouncementTransactionId, other.AnnouncementTransactionId)) return false;
      if (IsEvilNode != other.IsEvilNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      hash ^= terms_.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      if (MissedTimeSlots != 0L) hash ^= MissedTimeSlots.GetHashCode();
      if (ContinualAppointmentCount != 0L) hash ^= ContinualAppointmentCount.GetHashCode();
      if (ReappointmentCount != 0L) hash ^= ReappointmentCount.GetHashCode();
      hash ^= aliases_.GetHashCode();
      if (CurrentAlias.Length != 0) hash ^= CurrentAlias.GetHashCode();
      if (CurrentVotesNumber != 0L) hash ^= CurrentVotesNumber.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      if (announcementTransactionId_ != null) hash ^= AnnouncementTransactionId.GetHashCode();
      if (IsEvilNode != false) hash ^= IsEvilNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      terms_.WriteTo(output, _repeated_terms_codec);
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ContinualAppointmentCount);
      }
      if (ReappointmentCount != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(ReappointmentCount);
      }
      aliases_.WriteTo(output, _repeated_aliases_codec);
      if (CurrentAlias.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrentAlias);
      }
      if (CurrentVotesNumber != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(CurrentVotesNumber);
      }
      if (address_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(Address);
      }
      if (announcementTransactionId_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AnnouncementTransactionId);
      }
      if (IsEvilNode != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsEvilNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      size += terms_.CalculateSize(_repeated_terms_codec);
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ContinualAppointmentCount);
      }
      if (ReappointmentCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReappointmentCount);
      }
      size += aliases_.CalculateSize(_repeated_aliases_codec);
      if (CurrentAlias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAlias);
      }
      if (CurrentVotesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentVotesNumber);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      if (announcementTransactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnnouncementTransactionId);
      }
      if (IsEvilNode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateInHistory other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      terms_.Add(other.terms_);
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.MissedTimeSlots != 0L) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.ContinualAppointmentCount != 0L) {
        ContinualAppointmentCount = other.ContinualAppointmentCount;
      }
      if (other.ReappointmentCount != 0L) {
        ReappointmentCount = other.ReappointmentCount;
      }
      aliases_.Add(other.aliases_);
      if (other.CurrentAlias.Length != 0) {
        CurrentAlias = other.CurrentAlias;
      }
      if (other.CurrentVotesNumber != 0L) {
        CurrentVotesNumber = other.CurrentVotesNumber;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          Address = new global::AElf.Address();
        }
        Address.MergeFrom(other.Address);
      }
      if (other.announcementTransactionId_ != null) {
        if (announcementTransactionId_ == null) {
          AnnouncementTransactionId = new global::AElf.Hash();
        }
        AnnouncementTransactionId.MergeFrom(other.AnnouncementTransactionId);
      }
      if (other.IsEvilNode != false) {
        IsEvilNode = other.IsEvilNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            terms_.AddEntriesFrom(input, _repeated_terms_codec);
            break;
          }
          case 24: {
            ProducedBlocks = input.ReadInt64();
            break;
          }
          case 32: {
            MissedTimeSlots = input.ReadInt64();
            break;
          }
          case 40: {
            ContinualAppointmentCount = input.ReadInt64();
            break;
          }
          case 48: {
            ReappointmentCount = input.ReadInt64();
            break;
          }
          case 58: {
            aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
            break;
          }
          case 66: {
            CurrentAlias = input.ReadString();
            break;
          }
          case 72: {
            CurrentVotesNumber = input.ReadInt64();
            break;
          }
          case 90: {
            if (address_ == null) {
              Address = new global::AElf.Address();
            }
            input.ReadMessage(Address);
            break;
          }
          case 98: {
            if (announcementTransactionId_ == null) {
              AnnouncementTransactionId = new global::AElf.Hash();
            }
            input.ReadMessage(AnnouncementTransactionId);
            break;
          }
          case 104: {
            IsEvilNode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketsDictionary : pb::IMessage<TicketsDictionary> {
    private static readonly pb::MessageParser<TicketsDictionary> _parser = new pb::MessageParser<TicketsDictionary>(() => new TicketsDictionary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketsDictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsDictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsDictionary(TicketsDictionary other) : this() {
      maps_ = other.maps_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsDictionary Clone() {
      return new TicketsDictionary(this);
    }

    /// <summary>Field number for the "Maps" field.</summary>
    public const int MapsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Consensus.DPoS.Tickets>.Codec _map_maps_codec
        = new pbc::MapField<string, global::AElf.Consensus.DPoS.Tickets>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Consensus.DPoS.Tickets.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Consensus.DPoS.Tickets> maps_ = new pbc::MapField<string, global::AElf.Consensus.DPoS.Tickets>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Consensus.DPoS.Tickets> Maps {
      get { return maps_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketsDictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketsDictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Maps.Equals(other.Maps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Maps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maps_.WriteTo(output, _map_maps_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maps_.CalculateSize(_map_maps_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketsDictionary other) {
      if (other == null) {
        return;
      }
      maps_.Add(other.maps_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maps_.AddEntriesFrom(input, _map_maps_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateInHistoryDictionary : pb::IMessage<CandidateInHistoryDictionary> {
    private static readonly pb::MessageParser<CandidateInHistoryDictionary> _parser = new pb::MessageParser<CandidateInHistoryDictionary>(() => new CandidateInHistoryDictionary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateInHistoryDictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistoryDictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistoryDictionary(CandidateInHistoryDictionary other) : this() {
      maps_ = other.maps_.Clone();
      candidatesNumber_ = other.candidatesNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateInHistoryDictionary Clone() {
      return new CandidateInHistoryDictionary(this);
    }

    /// <summary>Field number for the "Maps" field.</summary>
    public const int MapsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Consensus.DPoS.CandidateInHistory>.Codec _map_maps_codec
        = new pbc::MapField<string, global::AElf.Consensus.DPoS.CandidateInHistory>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Consensus.DPoS.CandidateInHistory.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Consensus.DPoS.CandidateInHistory> maps_ = new pbc::MapField<string, global::AElf.Consensus.DPoS.CandidateInHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Consensus.DPoS.CandidateInHistory> Maps {
      get { return maps_; }
    }

    /// <summary>Field number for the "CandidatesNumber" field.</summary>
    public const int CandidatesNumberFieldNumber = 3;
    private int candidatesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CandidatesNumber {
      get { return candidatesNumber_; }
      set {
        candidatesNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateInHistoryDictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateInHistoryDictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Maps.Equals(other.Maps)) return false;
      if (CandidatesNumber != other.CandidatesNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Maps.GetHashCode();
      if (CandidatesNumber != 0) hash ^= CandidatesNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maps_.WriteTo(output, _map_maps_codec);
      if (CandidatesNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CandidatesNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maps_.CalculateSize(_map_maps_codec);
      if (CandidatesNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CandidatesNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateInHistoryDictionary other) {
      if (other == null) {
        return;
      }
      maps_.Add(other.maps_);
      if (other.CandidatesNumber != 0) {
        CandidatesNumber = other.CandidatesNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maps_.AddEntriesFrom(input, _map_maps_codec);
            break;
          }
          case 24: {
            CandidatesNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketsHistories : pb::IMessage<TicketsHistories> {
    private static readonly pb::MessageParser<TicketsHistories> _parser = new pb::MessageParser<TicketsHistories>(() => new TicketsHistories());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketsHistories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsHistories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsHistories(TicketsHistories other) : this() {
      values_ = other.values_.Clone();
      historiesNumber_ = other.historiesNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsHistories Clone() {
      return new TicketsHistories(this);
    }

    /// <summary>Field number for the "Values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Consensus.DPoS.TicketsHistory> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Consensus.DPoS.TicketsHistory.Parser);
    private readonly pbc::RepeatedField<global::AElf.Consensus.DPoS.TicketsHistory> values_ = new pbc::RepeatedField<global::AElf.Consensus.DPoS.TicketsHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Consensus.DPoS.TicketsHistory> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "HistoriesNumber" field.</summary>
    public const int HistoriesNumberFieldNumber = 2;
    private long historiesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HistoriesNumber {
      get { return historiesNumber_; }
      set {
        historiesNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketsHistories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketsHistories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (HistoriesNumber != other.HistoriesNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (HistoriesNumber != 0L) hash ^= HistoriesNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (HistoriesNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(HistoriesNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (HistoriesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(HistoriesNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketsHistories other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.HistoriesNumber != 0L) {
        HistoriesNumber = other.HistoriesNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 16: {
            HistoriesNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TicketsHistory : pb::IMessage<TicketsHistory> {
    private static readonly pb::MessageParser<TicketsHistory> _parser = new pb::MessageParser<TicketsHistory>(() => new TicketsHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TicketsHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsHistory(TicketsHistory other) : this() {
      candidateAlias_ = other.candidateAlias_;
      votesNumber_ = other.votesNumber_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      state_ = other.state_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TicketsHistory Clone() {
      return new TicketsHistory(this);
    }

    /// <summary>Field number for the "CandidateAlias" field.</summary>
    public const int CandidateAliasFieldNumber = 1;
    private string candidateAlias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CandidateAlias {
      get { return candidateAlias_; }
      set {
        candidateAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VotesNumber" field.</summary>
    public const int VotesNumberFieldNumber = 2;
    private long votesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VotesNumber {
      get { return votesNumber_; }
      set {
        votesNumber_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 4;
    private bool state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::AElf.Consensus.DPoS.TicketsHistoryType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.TicketsHistoryType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TicketsHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TicketsHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CandidateAlias != other.CandidateAlias) return false;
      if (VotesNumber != other.VotesNumber) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (State != other.State) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CandidateAlias.Length != 0) hash ^= CandidateAlias.GetHashCode();
      if (VotesNumber != 0L) hash ^= VotesNumber.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (State != false) hash ^= State.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CandidateAlias.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CandidateAlias);
      }
      if (VotesNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(VotesNumber);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (State != false) {
        output.WriteRawTag(32);
        output.WriteBool(State);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CandidateAlias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CandidateAlias);
      }
      if (VotesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(VotesNumber);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (State != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TicketsHistory other) {
      if (other == null) {
        return;
      }
      if (other.CandidateAlias.Length != 0) {
        CandidateAlias = other.CandidateAlias;
      }
      if (other.VotesNumber != 0L) {
        VotesNumber = other.VotesNumber;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.State != false) {
        State = other.State;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CandidateAlias = input.ReadString();
            break;
          }
          case 16: {
            VotesNumber = input.ReadInt64();
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 32: {
            State = input.ReadBool();
            break;
          }
          case 40: {
            Type = (global::AElf.Consensus.DPoS.TicketsHistoryType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DPoSHeaderInformation : pb::IMessage<DPoSHeaderInformation> {
    private static readonly pb::MessageParser<DPoSHeaderInformation> _parser = new pb::MessageParser<DPoSHeaderInformation>(() => new DPoSHeaderInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPoSHeaderInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSHeaderInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSHeaderInformation(DPoSHeaderInformation other) : this() {
      senderPublicKey_ = other.senderPublicKey_;
      round_ = other.round_ != null ? other.round_.Clone() : null;
      behaviour_ = other.behaviour_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSHeaderInformation Clone() {
      return new DPoSHeaderInformation(this);
    }

    /// <summary>Field number for the "SenderPublicKey" field.</summary>
    public const int SenderPublicKeyFieldNumber = 1;
    private pb::ByteString senderPublicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SenderPublicKey {
      get { return senderPublicKey_; }
      set {
        senderPublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Round" field.</summary>
    public const int RoundFieldNumber = 2;
    private global::AElf.Consensus.DPoS.Round round_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.Round Round {
      get { return round_; }
      set {
        round_ = value;
      }
    }

    /// <summary>Field number for the "Behaviour" field.</summary>
    public const int BehaviourFieldNumber = 3;
    private global::AElf.Consensus.DPoS.DPoSBehaviour behaviour_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.DPoSBehaviour Behaviour {
      get { return behaviour_; }
      set {
        behaviour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPoSHeaderInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPoSHeaderInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SenderPublicKey != other.SenderPublicKey) return false;
      if (!object.Equals(Round, other.Round)) return false;
      if (Behaviour != other.Behaviour) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SenderPublicKey.Length != 0) hash ^= SenderPublicKey.GetHashCode();
      if (round_ != null) hash ^= Round.GetHashCode();
      if (Behaviour != 0) hash ^= Behaviour.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderPublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SenderPublicKey);
      }
      if (round_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Round);
      }
      if (Behaviour != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Behaviour);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SenderPublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SenderPublicKey);
      }
      if (round_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Round);
      }
      if (Behaviour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behaviour);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPoSHeaderInformation other) {
      if (other == null) {
        return;
      }
      if (other.SenderPublicKey.Length != 0) {
        SenderPublicKey = other.SenderPublicKey;
      }
      if (other.round_ != null) {
        if (round_ == null) {
          Round = new global::AElf.Consensus.DPoS.Round();
        }
        Round.MergeFrom(other.Round);
      }
      if (other.Behaviour != 0) {
        Behaviour = other.Behaviour;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SenderPublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            if (round_ == null) {
              Round = new global::AElf.Consensus.DPoS.Round();
            }
            input.ReadMessage(Round);
            break;
          }
          case 24: {
            Behaviour = (global::AElf.Consensus.DPoS.DPoSBehaviour) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DPoSHint : pb::IMessage<DPoSHint> {
    private static readonly pb::MessageParser<DPoSHint> _parser = new pb::MessageParser<DPoSHint>(() => new DPoSHint());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPoSHint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSHint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSHint(DPoSHint other) : this() {
      behaviour_ = other.behaviour_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSHint Clone() {
      return new DPoSHint(this);
    }

    /// <summary>Field number for the "Behaviour" field.</summary>
    public const int BehaviourFieldNumber = 1;
    private global::AElf.Consensus.DPoS.DPoSBehaviour behaviour_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.DPoSBehaviour Behaviour {
      get { return behaviour_; }
      set {
        behaviour_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPoSHint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPoSHint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Behaviour != other.Behaviour) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Behaviour != 0) hash ^= Behaviour.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Behaviour != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Behaviour);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Behaviour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behaviour);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPoSHint other) {
      if (other == null) {
        return;
      }
      if (other.Behaviour != 0) {
        Behaviour = other.Behaviour;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Behaviour = (global::AElf.Consensus.DPoS.DPoSBehaviour) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DPoSTriggerInformation : pb::IMessage<DPoSTriggerInformation> {
    private static readonly pb::MessageParser<DPoSTriggerInformation> _parser = new pb::MessageParser<DPoSTriggerInformation>(() => new DPoSTriggerInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPoSTriggerInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSTriggerInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSTriggerInformation(DPoSTriggerInformation other) : this() {
      publicKey_ = other.publicKey_;
      randomHash_ = other.randomHash_ != null ? other.randomHash_.Clone() : null;
      previousRandomHash_ = other.previousRandomHash_ != null ? other.previousRandomHash_.Clone() : null;
      behaviour_ = other.behaviour_;
      initialTermNumber_ = other.initialTermNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSTriggerInformation Clone() {
      return new DPoSTriggerInformation(this);
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    /// <summary>
    /// A must-have.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "RandomHash" field.</summary>
    public const int RandomHashFieldNumber = 2;
    private global::AElf.Hash randomHash_;
    /// <summary>
    /// To calculate In Value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash RandomHash {
      get { return randomHash_; }
      set {
        randomHash_ = value;
      }
    }

    /// <summary>Field number for the "PreviousRandomHash" field.</summary>
    public const int PreviousRandomHashFieldNumber = 3;
    private global::AElf.Hash previousRandomHash_;
    /// <summary>
    /// Random hash of previous round for validation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash PreviousRandomHash {
      get { return previousRandomHash_; }
      set {
        previousRandomHash_ = value;
      }
    }

    /// <summary>Field number for the "Behaviour" field.</summary>
    public const int BehaviourFieldNumber = 4;
    private global::AElf.Consensus.DPoS.DPoSBehaviour behaviour_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.DPoSBehaviour Behaviour {
      get { return behaviour_; }
      set {
        behaviour_ = value;
      }
    }

    /// <summary>Field number for the "InitialTermNumber" field.</summary>
    public const int InitialTermNumberFieldNumber = 5;
    private long initialTermNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long InitialTermNumber {
      get { return initialTermNumber_; }
      set {
        initialTermNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPoSTriggerInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPoSTriggerInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (!object.Equals(RandomHash, other.RandomHash)) return false;
      if (!object.Equals(PreviousRandomHash, other.PreviousRandomHash)) return false;
      if (Behaviour != other.Behaviour) return false;
      if (InitialTermNumber != other.InitialTermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (randomHash_ != null) hash ^= RandomHash.GetHashCode();
      if (previousRandomHash_ != null) hash ^= PreviousRandomHash.GetHashCode();
      if (Behaviour != 0) hash ^= Behaviour.GetHashCode();
      if (InitialTermNumber != 0L) hash ^= InitialTermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicKey);
      }
      if (randomHash_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(RandomHash);
      }
      if (previousRandomHash_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PreviousRandomHash);
      }
      if (Behaviour != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Behaviour);
      }
      if (InitialTermNumber != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(InitialTermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (randomHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RandomHash);
      }
      if (previousRandomHash_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PreviousRandomHash);
      }
      if (Behaviour != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Behaviour);
      }
      if (InitialTermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InitialTermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPoSTriggerInformation other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.randomHash_ != null) {
        if (randomHash_ == null) {
          RandomHash = new global::AElf.Hash();
        }
        RandomHash.MergeFrom(other.RandomHash);
      }
      if (other.previousRandomHash_ != null) {
        if (previousRandomHash_ == null) {
          PreviousRandomHash = new global::AElf.Hash();
        }
        PreviousRandomHash.MergeFrom(other.PreviousRandomHash);
      }
      if (other.Behaviour != 0) {
        Behaviour = other.Behaviour;
      }
      if (other.InitialTermNumber != 0L) {
        InitialTermNumber = other.InitialTermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 18: {
            if (randomHash_ == null) {
              RandomHash = new global::AElf.Hash();
            }
            input.ReadMessage(RandomHash);
            break;
          }
          case 26: {
            if (previousRandomHash_ == null) {
              PreviousRandomHash = new global::AElf.Hash();
            }
            input.ReadMessage(PreviousRandomHash);
            break;
          }
          case 32: {
            Behaviour = (global::AElf.Consensus.DPoS.DPoSBehaviour) input.ReadEnum();
            break;
          }
          case 40: {
            InitialTermNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CommandInput : pb::IMessage<CommandInput> {
    private static readonly pb::MessageParser<CommandInput> _parser = new pb::MessageParser<CommandInput>(() => new CommandInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CommandInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandInput(CommandInput other) : this() {
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CommandInput Clone() {
      return new CommandInput(this);
    }

    /// <summary>Field number for the "PublicKey" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CommandInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CommandInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CommandInput other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitialDPoSContractInput : pb::IMessage<InitialDPoSContractInput> {
    private static readonly pb::MessageParser<InitialDPoSContractInput> _parser = new pb::MessageParser<InitialDPoSContractInput>(() => new InitialDPoSContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialDPoSContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialDPoSContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialDPoSContractInput(InitialDPoSContractInput other) : this() {
      tokenContractSystemName_ = other.tokenContractSystemName_ != null ? other.tokenContractSystemName_.Clone() : null;
      dividendsContractSystemName_ = other.dividendsContractSystemName_ != null ? other.dividendsContractSystemName_.Clone() : null;
      lockTokenForElection_ = other.lockTokenForElection_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialDPoSContractInput Clone() {
      return new InitialDPoSContractInput(this);
    }

    /// <summary>Field number for the "tokenContractSystemName" field.</summary>
    public const int TokenContractSystemNameFieldNumber = 1;
    private global::AElf.Hash tokenContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash TokenContractSystemName {
      get { return tokenContractSystemName_; }
      set {
        tokenContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "dividendsContractSystemName" field.</summary>
    public const int DividendsContractSystemNameFieldNumber = 2;
    private global::AElf.Hash dividendsContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash DividendsContractSystemName {
      get { return dividendsContractSystemName_; }
      set {
        dividendsContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "lockTokenForElection" field.</summary>
    public const int LockTokenForElectionFieldNumber = 3;
    private long lockTokenForElection_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockTokenForElection {
      get { return lockTokenForElection_; }
      set {
        lockTokenForElection_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialDPoSContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialDPoSContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TokenContractSystemName, other.TokenContractSystemName)) return false;
      if (!object.Equals(DividendsContractSystemName, other.DividendsContractSystemName)) return false;
      if (LockTokenForElection != other.LockTokenForElection) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tokenContractSystemName_ != null) hash ^= TokenContractSystemName.GetHashCode();
      if (dividendsContractSystemName_ != null) hash ^= DividendsContractSystemName.GetHashCode();
      if (LockTokenForElection != 0L) hash ^= LockTokenForElection.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tokenContractSystemName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TokenContractSystemName);
      }
      if (dividendsContractSystemName_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(DividendsContractSystemName);
      }
      if (LockTokenForElection != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(LockTokenForElection);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tokenContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractSystemName);
      }
      if (dividendsContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DividendsContractSystemName);
      }
      if (LockTokenForElection != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LockTokenForElection);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialDPoSContractInput other) {
      if (other == null) {
        return;
      }
      if (other.tokenContractSystemName_ != null) {
        if (tokenContractSystemName_ == null) {
          TokenContractSystemName = new global::AElf.Hash();
        }
        TokenContractSystemName.MergeFrom(other.TokenContractSystemName);
      }
      if (other.dividendsContractSystemName_ != null) {
        if (dividendsContractSystemName_ == null) {
          DividendsContractSystemName = new global::AElf.Hash();
        }
        DividendsContractSystemName.MergeFrom(other.DividendsContractSystemName);
      }
      if (other.LockTokenForElection != 0L) {
        LockTokenForElection = other.LockTokenForElection;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tokenContractSystemName_ == null) {
              TokenContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(TokenContractSystemName);
            break;
          }
          case 18: {
            if (dividendsContractSystemName_ == null) {
              DividendsContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(DividendsContractSystemName);
            break;
          }
          case 24: {
            LockTokenForElection = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitialDividendContractInput : pb::IMessage<InitialDividendContractInput> {
    private static readonly pb::MessageParser<InitialDividendContractInput> _parser = new pb::MessageParser<InitialDividendContractInput>(() => new InitialDividendContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialDividendContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialDividendContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialDividendContractInput(InitialDividendContractInput other) : this() {
      tokenContractSystemName_ = other.tokenContractSystemName_ != null ? other.tokenContractSystemName_.Clone() : null;
      consensusContractSystemName_ = other.consensusContractSystemName_ != null ? other.consensusContractSystemName_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialDividendContractInput Clone() {
      return new InitialDividendContractInput(this);
    }

    /// <summary>Field number for the "tokenContractSystemName" field.</summary>
    public const int TokenContractSystemNameFieldNumber = 1;
    private global::AElf.Hash tokenContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash TokenContractSystemName {
      get { return tokenContractSystemName_; }
      set {
        tokenContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "consensusContractSystemName" field.</summary>
    public const int ConsensusContractSystemNameFieldNumber = 2;
    private global::AElf.Hash consensusContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ConsensusContractSystemName {
      get { return consensusContractSystemName_; }
      set {
        consensusContractSystemName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialDividendContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialDividendContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TokenContractSystemName, other.TokenContractSystemName)) return false;
      if (!object.Equals(ConsensusContractSystemName, other.ConsensusContractSystemName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tokenContractSystemName_ != null) hash ^= TokenContractSystemName.GetHashCode();
      if (consensusContractSystemName_ != null) hash ^= ConsensusContractSystemName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tokenContractSystemName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TokenContractSystemName);
      }
      if (consensusContractSystemName_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ConsensusContractSystemName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tokenContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractSystemName);
      }
      if (consensusContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConsensusContractSystemName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialDividendContractInput other) {
      if (other == null) {
        return;
      }
      if (other.tokenContractSystemName_ != null) {
        if (tokenContractSystemName_ == null) {
          TokenContractSystemName = new global::AElf.Hash();
        }
        TokenContractSystemName.MergeFrom(other.TokenContractSystemName);
      }
      if (other.consensusContractSystemName_ != null) {
        if (consensusContractSystemName_ == null) {
          ConsensusContractSystemName = new global::AElf.Hash();
        }
        ConsensusContractSystemName.MergeFrom(other.ConsensusContractSystemName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tokenContractSystemName_ == null) {
              TokenContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(TokenContractSystemName);
            break;
          }
          case 18: {
            if (consensusContractSystemName_ == null) {
              ConsensusContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(ConsensusContractSystemName);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DPoSStrategyInput : pb::IMessage<DPoSStrategyInput> {
    private static readonly pb::MessageParser<DPoSStrategyInput> _parser = new pb::MessageParser<DPoSStrategyInput>(() => new DPoSStrategyInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DPoSStrategyInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSStrategyInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSStrategyInput(DPoSStrategyInput other) : this() {
      isBlockchainAgeSettable_ = other.isBlockchainAgeSettable_;
      isTimeSlotSkippable_ = other.isTimeSlotSkippable_;
      isVerbose_ = other.isVerbose_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DPoSStrategyInput Clone() {
      return new DPoSStrategyInput(this);
    }

    /// <summary>Field number for the "isBlockchainAgeSettable" field.</summary>
    public const int IsBlockchainAgeSettableFieldNumber = 1;
    private bool isBlockchainAgeSettable_;
    /// <summary>
    /// For testing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsBlockchainAgeSettable {
      get { return isBlockchainAgeSettable_; }
      set {
        isBlockchainAgeSettable_ = value;
      }
    }

    /// <summary>Field number for the "isTimeSlotSkippable" field.</summary>
    public const int IsTimeSlotSkippableFieldNumber = 2;
    private bool isTimeSlotSkippable_;
    /// <summary>
    /// Skip own time slot if failed to receive block from previous miner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTimeSlotSkippable {
      get { return isTimeSlotSkippable_; }
      set {
        isTimeSlotSkippable_ = value;
      }
    }

    /// <summary>Field number for the "isVerbose" field.</summary>
    public const int IsVerboseFieldNumber = 3;
    private bool isVerbose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVerbose {
      get { return isVerbose_; }
      set {
        isVerbose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DPoSStrategyInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DPoSStrategyInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsBlockchainAgeSettable != other.IsBlockchainAgeSettable) return false;
      if (IsTimeSlotSkippable != other.IsTimeSlotSkippable) return false;
      if (IsVerbose != other.IsVerbose) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsBlockchainAgeSettable != false) hash ^= IsBlockchainAgeSettable.GetHashCode();
      if (IsTimeSlotSkippable != false) hash ^= IsTimeSlotSkippable.GetHashCode();
      if (IsVerbose != false) hash ^= IsVerbose.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsBlockchainAgeSettable != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsBlockchainAgeSettable);
      }
      if (IsTimeSlotSkippable != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsTimeSlotSkippable);
      }
      if (IsVerbose != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsVerbose);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsBlockchainAgeSettable != false) {
        size += 1 + 1;
      }
      if (IsTimeSlotSkippable != false) {
        size += 1 + 1;
      }
      if (IsVerbose != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DPoSStrategyInput other) {
      if (other == null) {
        return;
      }
      if (other.IsBlockchainAgeSettable != false) {
        IsBlockchainAgeSettable = other.IsBlockchainAgeSettable;
      }
      if (other.IsTimeSlotSkippable != false) {
        IsTimeSlotSkippable = other.IsTimeSlotSkippable;
      }
      if (other.IsVerbose != false) {
        IsVerbose = other.IsVerbose;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsBlockchainAgeSettable = input.ReadBool();
            break;
          }
          case 16: {
            IsTimeSlotSkippable = input.ReadBool();
            break;
          }
          case 24: {
            IsVerbose = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TermInfo : pb::IMessage<TermInfo> {
    private static readonly pb::MessageParser<TermInfo> _parser = new pb::MessageParser<TermInfo>(() => new TermInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermInfo(TermInfo other) : this() {
      termNumber_ = other.termNumber_;
      roundNumber_ = other.roundNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermInfo Clone() {
      return new TermInfo(this);
    }

    /// <summary>Field number for the "termNumber" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "roundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 2;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (RoundNumber != other.RoundNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(RoundNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermInfo other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            RoundNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteInput : pb::IMessage<VoteInput> {
    private static readonly pb::MessageParser<VoteInput> _parser = new pb::MessageParser<VoteInput>(() => new VoteInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInput(VoteInput other) : this() {
      candidatePublicKey_ = other.candidatePublicKey_;
      amount_ = other.amount_;
      lockTime_ = other.lockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInput Clone() {
      return new VoteInput(this);
    }

    /// <summary>Field number for the "candidatePublicKey" field.</summary>
    public const int CandidatePublicKeyFieldNumber = 1;
    private string candidatePublicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CandidatePublicKey {
      get { return candidatePublicKey_; }
      set {
        candidatePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "lockTime" field.</summary>
    public const int LockTimeFieldNumber = 3;
    private int lockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CandidatePublicKey != other.CandidatePublicKey) return false;
      if (Amount != other.Amount) return false;
      if (LockTime != other.LockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CandidatePublicKey.Length != 0) hash ^= CandidatePublicKey.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CandidatePublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CandidatePublicKey);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (LockTime != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(LockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CandidatePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CandidatePublicKey);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (LockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteInput other) {
      if (other == null) {
        return;
      }
      if (other.CandidatePublicKey.Length != 0) {
        CandidatePublicKey = other.CandidatePublicKey;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CandidatePublicKey = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 24: {
            LockTime = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PageInfo : pb::IMessage<PageInfo> {
    private static readonly pb::MessageParser<PageInfo> _parser = new pb::MessageParser<PageInfo>(() => new PageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo(PageInfo other) : this() {
      start_ = other.start_;
      length_ = other.length_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo Clone() {
      return new PageInfo(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Start);
      }
      if (Length != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Length);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Start);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Length);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadSInt32();
            break;
          }
          case 16: {
            Length = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PageableTicketsInfoInput : pb::IMessage<PageableTicketsInfoInput> {
    private static readonly pb::MessageParser<PageableTicketsInfoInput> _parser = new pb::MessageParser<PageableTicketsInfoInput>(() => new PageableTicketsInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageableTicketsInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableTicketsInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableTicketsInfoInput(PageableTicketsInfoInput other) : this() {
      start_ = other.start_;
      length_ = other.length_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableTicketsInfoInput Clone() {
      return new PageableTicketsInfoInput(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageableTicketsInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageableTicketsInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Start);
      }
      if (Length != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Length);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Start);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Length);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageableTicketsInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadSInt32();
            break;
          }
          case 16: {
            Length = input.ReadSInt32();
            break;
          }
          case 26: {
            PublicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PageableElectionInfoInput : pb::IMessage<PageableElectionInfoInput> {
    private static readonly pb::MessageParser<PageableElectionInfoInput> _parser = new pb::MessageParser<PageableElectionInfoInput>(() => new PageableElectionInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageableElectionInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableElectionInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableElectionInfoInput(PageableElectionInfoInput other) : this() {
      start_ = other.start_;
      length_ = other.length_;
      orderBy_ = other.orderBy_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableElectionInfoInput Clone() {
      return new PageableElectionInfoInput(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private int start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private int length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "orderBy" field.</summary>
    public const int OrderByFieldNumber = 3;
    private int orderBy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int OrderBy {
      get { return orderBy_; }
      set {
        orderBy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageableElectionInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageableElectionInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      if (OrderBy != other.OrderBy) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0) hash ^= Start.GetHashCode();
      if (Length != 0) hash ^= Length.GetHashCode();
      if (OrderBy != 0) hash ^= OrderBy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(Start);
      }
      if (Length != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(Length);
      }
      if (OrderBy != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(OrderBy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Start);
      }
      if (Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Length);
      }
      if (OrderBy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(OrderBy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageableElectionInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0) {
        Start = other.Start;
      }
      if (other.Length != 0) {
        Length = other.Length;
      }
      if (other.OrderBy != 0) {
        OrderBy = other.OrderBy;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadSInt32();
            break;
          }
          case 16: {
            Length = input.ReadSInt32();
            break;
          }
          case 24: {
            OrderBy = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Alias : pb::IMessage<Alias> {
    private static readonly pb::MessageParser<Alias> _parser = new pb::MessageParser<Alias>(() => new Alias());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Alias> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alias() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alias(Alias other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Alias Clone() {
      return new Alias(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Alias);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Alias other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Alias other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicKey : pb::IMessage<PublicKey> {
    private static readonly pb::MessageParser<PublicKey> _parser = new pb::MessageParser<PublicKey>(() => new PublicKey());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicKey> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKey() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKey(PublicKey other) : this() {
      hex_ = other.hex_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKey Clone() {
      return new PublicKey(this);
    }

    /// <summary>Field number for the "hex" field.</summary>
    public const int HexFieldNumber = 1;
    private string hex_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hex {
      get { return hex_; }
      set {
        hex_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicKey);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicKey other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hex != other.Hex) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hex.Length != 0) hash ^= Hex.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hex.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Hex);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hex);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicKey other) {
      if (other == null) {
        return;
      }
      if (other.Hex.Length != 0) {
        Hex = other.Hex;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Hex = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FriendlyString : pb::IMessage<FriendlyString> {
    private static readonly pb::MessageParser<FriendlyString> _parser = new pb::MessageParser<FriendlyString>(() => new FriendlyString());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FriendlyString> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendlyString() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendlyString(FriendlyString other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FriendlyString Clone() {
      return new FriendlyString(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FriendlyString);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FriendlyString other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FriendlyString other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MinerListWithRoundNumber : pb::IMessage<MinerListWithRoundNumber> {
    private static readonly pb::MessageParser<MinerListWithRoundNumber> _parser = new pb::MessageParser<MinerListWithRoundNumber>(() => new MinerListWithRoundNumber());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MinerListWithRoundNumber> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerListWithRoundNumber() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerListWithRoundNumber(MinerListWithRoundNumber other) : this() {
      minerList_ = other.minerList_ != null ? other.minerList_.Clone() : null;
      roundNumber_ = other.roundNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MinerListWithRoundNumber Clone() {
      return new MinerListWithRoundNumber(this);
    }

    /// <summary>Field number for the "MinerList" field.</summary>
    public const int MinerListFieldNumber = 1;
    private global::AElf.Consensus.DPoS.Miners minerList_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.Miners MinerList {
      get { return minerList_; }
      set {
        minerList_ = value;
      }
    }

    /// <summary>Field number for the "RoundNumber" field.</summary>
    public const int RoundNumberFieldNumber = 4;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MinerListWithRoundNumber);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MinerListWithRoundNumber other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MinerList, other.MinerList)) return false;
      if (RoundNumber != other.RoundNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (minerList_ != null) hash ^= MinerList.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (minerList_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MinerList);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(RoundNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (minerList_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MinerList);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoundNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MinerListWithRoundNumber other) {
      if (other == null) {
        return;
      }
      if (other.minerList_ != null) {
        if (minerList_ == null) {
          MinerList = new global::AElf.Consensus.DPoS.Miners();
        }
        MinerList.MergeFrom(other.MinerList);
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (minerList_ == null) {
              MinerList = new global::AElf.Consensus.DPoS.Miners();
            }
            input.ReadMessage(MinerList);
            break;
          }
          case 32: {
            RoundNumber = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendDividendsInput : pb::IMessage<SendDividendsInput> {
    private static readonly pb::MessageParser<SendDividendsInput> _parser = new pb::MessageParser<SendDividendsInput>(() => new SendDividendsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendDividendsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDividendsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDividendsInput(SendDividendsInput other) : this() {
      to_ = other.to_ != null ? other.to_.Clone() : null;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendDividendsInput Clone() {
      return new SendDividendsInput(this);
    }

    /// <summary>Field number for the "to" field.</summary>
    public const int ToFieldNumber = 1;
    private global::AElf.Address to_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address To {
      get { return to_; }
      set {
        to_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendDividendsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendDividendsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(To, other.To)) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (to_ != null) hash ^= To.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (to_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(To);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (to_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(To);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendDividendsInput other) {
      if (other == null) {
        return;
      }
      if (other.to_ != null) {
        if (to_ == null) {
          To = new global::AElf.Address();
        }
        To.MergeFrom(other.To);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (to_ == null) {
              To = new global::AElf.Address();
            }
            input.ReadMessage(To);
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddDividendsInput : pb::IMessage<AddDividendsInput> {
    private static readonly pb::MessageParser<AddDividendsInput> _parser = new pb::MessageParser<AddDividendsInput>(() => new AddDividendsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddDividendsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDividendsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDividendsInput(AddDividendsInput other) : this() {
      termNumber_ = other.termNumber_;
      dividendsAmount_ = other.dividendsAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddDividendsInput Clone() {
      return new AddDividendsInput(this);
    }

    /// <summary>Field number for the "termNumber" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "dividendsAmount" field.</summary>
    public const int DividendsAmountFieldNumber = 2;
    private long dividendsAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DividendsAmount {
      get { return dividendsAmount_; }
      set {
        dividendsAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddDividendsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddDividendsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (DividendsAmount != other.DividendsAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (DividendsAmount != 0L) hash ^= DividendsAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (DividendsAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(DividendsAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (DividendsAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(DividendsAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddDividendsInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.DividendsAmount != 0L) {
        DividendsAmount = other.DividendsAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            DividendsAmount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WeightsInfo : pb::IMessage<WeightsInfo> {
    private static readonly pb::MessageParser<WeightsInfo> _parser = new pb::MessageParser<WeightsInfo>(() => new WeightsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WeightsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightsInfo(WeightsInfo other) : this() {
      termNumber_ = other.termNumber_;
      weights_ = other.weights_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WeightsInfo Clone() {
      return new WeightsInfo(this);
    }

    /// <summary>Field number for the "termNumber" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 2;
    private long weights_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Weights {
      get { return weights_; }
      set {
        weights_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WeightsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WeightsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (Weights != other.Weights) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (Weights != 0L) hash ^= Weights.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (Weights != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Weights);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (Weights != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Weights);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WeightsInfo other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.Weights != 0L) {
        Weights = other.Weights;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            Weights = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteInfo : pb::IMessage<VoteInfo> {
    private static readonly pb::MessageParser<VoteInfo> _parser = new pb::MessageParser<VoteInfo>(() => new VoteInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInfo(VoteInfo other) : this() {
      record_ = other.record_ != null ? other.record_.Clone() : null;
      age_ = other.age_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteInfo Clone() {
      return new VoteInfo(this);
    }

    /// <summary>Field number for the "record" field.</summary>
    public const int RecordFieldNumber = 1;
    private global::AElf.Consensus.DPoS.VotingRecord record_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Consensus.DPoS.VotingRecord Record {
      get { return record_; }
      set {
        record_ = value;
      }
    }

    /// <summary>Field number for the "age" field.</summary>
    public const int AgeFieldNumber = 2;
    private long age_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Age {
      get { return age_; }
      set {
        age_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Record, other.Record)) return false;
      if (Age != other.Age) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (record_ != null) hash ^= Record.GetHashCode();
      if (Age != 0L) hash ^= Age.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (record_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Record);
      }
      if (Age != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Age);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (record_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Record);
      }
      if (Age != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Age);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteInfo other) {
      if (other == null) {
        return;
      }
      if (other.record_ != null) {
        if (record_ == null) {
          Record = new global::AElf.Consensus.DPoS.VotingRecord();
        }
        Record.MergeFrom(other.Record);
      }
      if (other.Age != 0L) {
        Age = other.Age;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (record_ == null) {
              Record = new global::AElf.Consensus.DPoS.VotingRecord();
            }
            input.ReadMessage(Record);
            break;
          }
          case 16: {
            Age = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CheckDividendsInput : pb::IMessage<CheckDividendsInput> {
    private static readonly pb::MessageParser<CheckDividendsInput> _parser = new pb::MessageParser<CheckDividendsInput>(() => new CheckDividendsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckDividendsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Consensus.DPoS.ConsensusDposReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDividendsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDividendsInput(CheckDividendsInput other) : this() {
      termNumber_ = other.termNumber_;
      ticketsAmount_ = other.ticketsAmount_;
      lockTime_ = other.lockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckDividendsInput Clone() {
      return new CheckDividendsInput(this);
    }

    /// <summary>Field number for the "termNumber" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "ticketsAmount" field.</summary>
    public const int TicketsAmountFieldNumber = 2;
    private long ticketsAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TicketsAmount {
      get { return ticketsAmount_; }
      set {
        ticketsAmount_ = value;
      }
    }

    /// <summary>Field number for the "lockTime" field.</summary>
    public const int LockTimeFieldNumber = 3;
    private int lockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckDividendsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckDividendsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (TicketsAmount != other.TicketsAmount) return false;
      if (LockTime != other.LockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (TicketsAmount != 0L) hash ^= TicketsAmount.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (TicketsAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TicketsAmount);
      }
      if (LockTime != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(LockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (TicketsAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TicketsAmount);
      }
      if (LockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckDividendsInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.TicketsAmount != 0L) {
        TicketsAmount = other.TicketsAmount;
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            TicketsAmount = input.ReadSInt64();
            break;
          }
          case 24: {
            LockTime = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
