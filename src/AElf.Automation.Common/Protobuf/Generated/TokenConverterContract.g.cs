// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: token_converter_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Contracts.TokenConverter {

  /// <summary>Holder for reflection information generated from token_converter_contract.proto</summary>
  public static partial class TokenConverterContractReflection {

    #region Descriptor
    /// <summary>File descriptor for token_converter_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenConverterContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch50b2tlbl9jb252ZXJ0ZXJfY29udHJhY3QucHJvdG8aDGNvbW1vbi5wcm90",
            "bxoSYWVsZl9vcHRpb25zLnByb3RvGh5nb29nbGUvcHJvdG9idWYvd3JhcHBl",
            "cnMucHJvdG8aG2dvb2dsZS9wcm90b2J1Zi9lbXB0eS5wcm90byKFAQoJQ29u",
            "bmVjdG9yEg4KBnN5bWJvbBgBIAEoCRIXCg92aXJ0dWFsX2JhbGFuY2UYAiAB",
            "KBISDgoGd2VpZ2h0GAMgASgJEiIKGmlzX3ZpcnR1YWxfYmFsYW5jZV9lbmFi",
            "bGVkGAQgASgIEhsKE2lzX3B1cmNoYXNlX2VuYWJsZWQYBSABKAgiHQoLVG9r",
            "ZW5TeW1ib2wSDgoGc3ltYm9sGAEgASgJItMBCg9Jbml0aWFsaXplSW5wdXQS",
            "GQoRYmFzZV90b2tlbl9zeW1ib2wYASABKAkSEAoIZmVlX3JhdGUYAiABKAkS",
            "HgoKY29ubmVjdG9ycxgDIAMoCzIKLkNvbm5lY3RvchIoChZ0b2tlbl9jb250",
            "cmFjdF9hZGRyZXNzGAQgASgLMgguQWRkcmVzcxImChRmZWVfcmVjZWl2ZXJf",
            "YWRkcmVzcxgFIAEoCzIILkFkZHJlc3MSIQoPbWFuYWdlcl9hZGRyZXNzGAYg",
            "ASgLMgguQWRkcmVzcyI9CghCdXlJbnB1dBIOCgZzeW1ib2wYASABKAkSDgoG",
            "YW1vdW50GAIgASgSEhEKCXBheV9saW1pdBgDIAEoEiJCCglTZWxsSW5wdXQS",
            "DgoGc3ltYm9sGAEgASgJEg4KBmFtb3VudBgCIAEoEhIVCg1yZWNlaXZlX2xp",
            "bWl0GAMgASgSImoKC1Rva2VuQm91Z2h0EhUKBnN5bWJvbBgBIAEoCUIFiI/1",
            "AQESFQoNYm91Z2h0X2Ftb3VudBgCIAEoEhITCgtiYXNlX2Ftb3VudBgDIAEo",
            "EhISCgpmZWVfYW1vdW50GAQgASgSOgSguxgBImYKCVRva2VuU29sZBIVCgZz",
            "eW1ib2wYASABKAlCBYiP9QEBEhMKC3NvbGRfYW1vdW50GAIgASgSEhMKC2Jh",
            "c2VfYW1vdW50GAMgASgSEhIKCmZlZV9hbW91bnQYBCABKBI6BKC7GAEy4QYK",
            "FlRva2VuQ29udmVydGVyQ29udHJhY3QSOAoKSW5pdGlhbGl6ZRIQLkluaXRp",
            "YWxpemVJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIAEjQKDFNldENv",
            "bm5lY3RvchIKLkNvbm5lY3RvchoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EioKA0J1eRIJLkJ1eUlucHV0GhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgAS",
            "LAoEU2VsbBIKLlNlbGxJbnB1dBoWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eSIA",
            "EkQKClNldEZlZVJhdGUSHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUa",
            "Fi5nb29nbGUucHJvdG9idWYuRW1wdHkiABI7ChVTZXRGZWVSZWNlaXZlckFk",
            "ZHJlc3MSCC5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVmLkVtcHR5IgASNwoR",
            "U2V0TWFuYWdlckFkZHJlc3MSCC5BZGRyZXNzGhYuZ29vZ2xlLnByb3RvYnVm",
            "LkVtcHR5IgASQgoXR2V0VG9rZW5Db250cmFjdEFkZHJlc3MSFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkaCC5BZGRyZXNzIgWIifcBARJAChVHZXRGZWVSZWNl",
            "aXZlckFkZHJlc3MSFi5nb29nbGUucHJvdG9idWYuRW1wdHkaCC5BZGRyZXNz",
            "IgWIifcBARI8ChFHZXRNYW5hZ2VyQWRkcmVzcxIWLmdvb2dsZS5wcm90b2J1",
            "Zi5FbXB0eRoILkFkZHJlc3MiBYiJ9wEBEi8KDEdldENvbm5lY3RvchIMLlRv",
            "a2VuU3ltYm9sGgouQ29ubmVjdG9yIgWIifcBARJJCgpHZXRGZWVSYXRlEhYu",
            "Z29vZ2xlLnByb3RvYnVmLkVtcHR5GhwuZ29vZ2xlLnByb3RvYnVmLlN0cmlu",
            "Z1ZhbHVlIgWIifcBARJBChJHZXRCYXNlVG9rZW5TeW1ib2wSFi5nb29nbGUu",
            "cHJvdG9idWYuRW1wdHkaDC5Ub2tlblN5bWJvbCIFiIn3AQEaPrLM9gE5QUVs",
            "Zi5Db250cmFjdHMuVG9rZW5Db252ZXJ0ZXIuVG9rZW5Db252ZXJ0ZXJDb250",
            "cmFjdFN0YXRlQiCqAh1BRWxmLkNvbnRyYWN0cy5Ub2tlbkNvbnZlcnRlcmIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.CommonReflection.Descriptor, global::Aelf.AelfOptionsReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.WrappersReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.Connector), global::AElf.Contracts.TokenConverter.Connector.Parser, new[]{ "Symbol", "VirtualBalance", "Weight", "IsVirtualBalanceEnabled", "IsPurchaseEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.TokenSymbol), global::AElf.Contracts.TokenConverter.TokenSymbol.Parser, new[]{ "Symbol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.InitializeInput), global::AElf.Contracts.TokenConverter.InitializeInput.Parser, new[]{ "BaseTokenSymbol", "FeeRate", "Connectors", "TokenContractAddress", "FeeReceiverAddress", "ManagerAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.BuyInput), global::AElf.Contracts.TokenConverter.BuyInput.Parser, new[]{ "Symbol", "Amount", "PayLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.SellInput), global::AElf.Contracts.TokenConverter.SellInput.Parser, new[]{ "Symbol", "Amount", "ReceiveLimit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.TokenBought), global::AElf.Contracts.TokenConverter.TokenBought.Parser, new[]{ "Symbol", "BoughtAmount", "BaseAmount", "FeeAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Contracts.TokenConverter.TokenSold), global::AElf.Contracts.TokenConverter.TokenSold.Parser, new[]{ "Symbol", "SoldAmount", "BaseAmount", "FeeAmount" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Connector : pb::IMessage<Connector> {
    private static readonly pb::MessageParser<Connector> _parser = new pb::MessageParser<Connector>(() => new Connector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Connector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector(Connector other) : this() {
      symbol_ = other.symbol_;
      virtualBalance_ = other.virtualBalance_;
      weight_ = other.weight_;
      isVirtualBalanceEnabled_ = other.isVirtualBalanceEnabled_;
      isPurchaseEnabled_ = other.isPurchaseEnabled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Connector Clone() {
      return new Connector(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "virtual_balance" field.</summary>
    public const int VirtualBalanceFieldNumber = 2;
    private long virtualBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VirtualBalance {
      get { return virtualBalance_; }
      set {
        virtualBalance_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private string weight_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Weight {
      get { return weight_; }
      set {
        weight_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_virtual_balance_enabled" field.</summary>
    public const int IsVirtualBalanceEnabledFieldNumber = 4;
    private bool isVirtualBalanceEnabled_;
    /// <summary>
    /// true if virtual balance is enabled, false if not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsVirtualBalanceEnabled {
      get { return isVirtualBalanceEnabled_; }
      set {
        isVirtualBalanceEnabled_ = value;
      }
    }

    /// <summary>Field number for the "is_purchase_enabled" field.</summary>
    public const int IsPurchaseEnabledFieldNumber = 5;
    private bool isPurchaseEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPurchaseEnabled {
      get { return isPurchaseEnabled_; }
      set {
        isPurchaseEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Connector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Connector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (VirtualBalance != other.VirtualBalance) return false;
      if (Weight != other.Weight) return false;
      if (IsVirtualBalanceEnabled != other.IsVirtualBalanceEnabled) return false;
      if (IsPurchaseEnabled != other.IsPurchaseEnabled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (VirtualBalance != 0L) hash ^= VirtualBalance.GetHashCode();
      if (Weight.Length != 0) hash ^= Weight.GetHashCode();
      if (IsVirtualBalanceEnabled != false) hash ^= IsVirtualBalanceEnabled.GetHashCode();
      if (IsPurchaseEnabled != false) hash ^= IsPurchaseEnabled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (VirtualBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(VirtualBalance);
      }
      if (Weight.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Weight);
      }
      if (IsVirtualBalanceEnabled != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsVirtualBalanceEnabled);
      }
      if (IsPurchaseEnabled != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsPurchaseEnabled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (VirtualBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(VirtualBalance);
      }
      if (Weight.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Weight);
      }
      if (IsVirtualBalanceEnabled != false) {
        size += 1 + 1;
      }
      if (IsPurchaseEnabled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Connector other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.VirtualBalance != 0L) {
        VirtualBalance = other.VirtualBalance;
      }
      if (other.Weight.Length != 0) {
        Weight = other.Weight;
      }
      if (other.IsVirtualBalanceEnabled != false) {
        IsVirtualBalanceEnabled = other.IsVirtualBalanceEnabled;
      }
      if (other.IsPurchaseEnabled != false) {
        IsPurchaseEnabled = other.IsPurchaseEnabled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            VirtualBalance = input.ReadSInt64();
            break;
          }
          case 26: {
            Weight = input.ReadString();
            break;
          }
          case 32: {
            IsVirtualBalanceEnabled = input.ReadBool();
            break;
          }
          case 40: {
            IsPurchaseEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenSymbol : pb::IMessage<TokenSymbol> {
    private static readonly pb::MessageParser<TokenSymbol> _parser = new pb::MessageParser<TokenSymbol>(() => new TokenSymbol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenSymbol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbol(TokenSymbol other) : this() {
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSymbol Clone() {
      return new TokenSymbol(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenSymbol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenSymbol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenSymbol other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InitializeInput : pb::IMessage<InitializeInput> {
    private static readonly pb::MessageParser<InitializeInput> _parser = new pb::MessageParser<InitializeInput>(() => new InitializeInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput(InitializeInput other) : this() {
      baseTokenSymbol_ = other.baseTokenSymbol_;
      feeRate_ = other.feeRate_;
      connectors_ = other.connectors_.Clone();
      tokenContractAddress_ = other.tokenContractAddress_ != null ? other.tokenContractAddress_.Clone() : null;
      feeReceiverAddress_ = other.feeReceiverAddress_ != null ? other.feeReceiverAddress_.Clone() : null;
      managerAddress_ = other.managerAddress_ != null ? other.managerAddress_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeInput Clone() {
      return new InitializeInput(this);
    }

    /// <summary>Field number for the "base_token_symbol" field.</summary>
    public const int BaseTokenSymbolFieldNumber = 1;
    private string baseTokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BaseTokenSymbol {
      get { return baseTokenSymbol_; }
      set {
        baseTokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fee_rate" field.</summary>
    public const int FeeRateFieldNumber = 2;
    private string feeRate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FeeRate {
      get { return feeRate_; }
      set {
        feeRate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "connectors" field.</summary>
    public const int ConnectorsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Contracts.TokenConverter.Connector> _repeated_connectors_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Contracts.TokenConverter.Connector.Parser);
    private readonly pbc::RepeatedField<global::AElf.Contracts.TokenConverter.Connector> connectors_ = new pbc::RepeatedField<global::AElf.Contracts.TokenConverter.Connector>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Contracts.TokenConverter.Connector> Connectors {
      get { return connectors_; }
    }

    /// <summary>Field number for the "token_contract_address" field.</summary>
    public const int TokenContractAddressFieldNumber = 4;
    private global::AElf.Address tokenContractAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address TokenContractAddress {
      get { return tokenContractAddress_; }
      set {
        tokenContractAddress_ = value;
      }
    }

    /// <summary>Field number for the "fee_receiver_address" field.</summary>
    public const int FeeReceiverAddressFieldNumber = 5;
    private global::AElf.Address feeReceiverAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address FeeReceiverAddress {
      get { return feeReceiverAddress_; }
      set {
        feeReceiverAddress_ = value;
      }
    }

    /// <summary>Field number for the "manager_address" field.</summary>
    public const int ManagerAddressFieldNumber = 6;
    private global::AElf.Address managerAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address ManagerAddress {
      get { return managerAddress_; }
      set {
        managerAddress_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseTokenSymbol != other.BaseTokenSymbol) return false;
      if (FeeRate != other.FeeRate) return false;
      if(!connectors_.Equals(other.connectors_)) return false;
      if (!object.Equals(TokenContractAddress, other.TokenContractAddress)) return false;
      if (!object.Equals(FeeReceiverAddress, other.FeeReceiverAddress)) return false;
      if (!object.Equals(ManagerAddress, other.ManagerAddress)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseTokenSymbol.Length != 0) hash ^= BaseTokenSymbol.GetHashCode();
      if (FeeRate.Length != 0) hash ^= FeeRate.GetHashCode();
      hash ^= connectors_.GetHashCode();
      if (tokenContractAddress_ != null) hash ^= TokenContractAddress.GetHashCode();
      if (feeReceiverAddress_ != null) hash ^= FeeReceiverAddress.GetHashCode();
      if (managerAddress_ != null) hash ^= ManagerAddress.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseTokenSymbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(BaseTokenSymbol);
      }
      if (FeeRate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FeeRate);
      }
      connectors_.WriteTo(output, _repeated_connectors_codec);
      if (tokenContractAddress_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TokenContractAddress);
      }
      if (feeReceiverAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(FeeReceiverAddress);
      }
      if (managerAddress_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(ManagerAddress);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseTokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BaseTokenSymbol);
      }
      if (FeeRate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FeeRate);
      }
      size += connectors_.CalculateSize(_repeated_connectors_codec);
      if (tokenContractAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractAddress);
      }
      if (feeReceiverAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FeeReceiverAddress);
      }
      if (managerAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ManagerAddress);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeInput other) {
      if (other == null) {
        return;
      }
      if (other.BaseTokenSymbol.Length != 0) {
        BaseTokenSymbol = other.BaseTokenSymbol;
      }
      if (other.FeeRate.Length != 0) {
        FeeRate = other.FeeRate;
      }
      connectors_.Add(other.connectors_);
      if (other.tokenContractAddress_ != null) {
        if (tokenContractAddress_ == null) {
          TokenContractAddress = new global::AElf.Address();
        }
        TokenContractAddress.MergeFrom(other.TokenContractAddress);
      }
      if (other.feeReceiverAddress_ != null) {
        if (feeReceiverAddress_ == null) {
          FeeReceiverAddress = new global::AElf.Address();
        }
        FeeReceiverAddress.MergeFrom(other.FeeReceiverAddress);
      }
      if (other.managerAddress_ != null) {
        if (managerAddress_ == null) {
          ManagerAddress = new global::AElf.Address();
        }
        ManagerAddress.MergeFrom(other.ManagerAddress);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            BaseTokenSymbol = input.ReadString();
            break;
          }
          case 18: {
            FeeRate = input.ReadString();
            break;
          }
          case 26: {
            connectors_.AddEntriesFrom(input, _repeated_connectors_codec);
            break;
          }
          case 34: {
            if (tokenContractAddress_ == null) {
              TokenContractAddress = new global::AElf.Address();
            }
            input.ReadMessage(TokenContractAddress);
            break;
          }
          case 42: {
            if (feeReceiverAddress_ == null) {
              FeeReceiverAddress = new global::AElf.Address();
            }
            input.ReadMessage(FeeReceiverAddress);
            break;
          }
          case 50: {
            if (managerAddress_ == null) {
              ManagerAddress = new global::AElf.Address();
            }
            input.ReadMessage(ManagerAddress);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuyInput : pb::IMessage<BuyInput> {
    private static readonly pb::MessageParser<BuyInput> _parser = new pb::MessageParser<BuyInput>(() => new BuyInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyInput(BuyInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      payLimit_ = other.payLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyInput Clone() {
      return new BuyInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "pay_limit" field.</summary>
    public const int PayLimitFieldNumber = 3;
    private long payLimit_;
    /// <summary>
    /// No buy if paying more than this, 0 if no limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PayLimit {
      get { return payLimit_; }
      set {
        payLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (PayLimit != other.PayLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (PayLimit != 0L) hash ^= PayLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (PayLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(PayLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (PayLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(PayLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.PayLimit != 0L) {
        PayLimit = other.PayLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 24: {
            PayLimit = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SellInput : pb::IMessage<SellInput> {
    private static readonly pb::MessageParser<SellInput> _parser = new pb::MessageParser<SellInput>(() => new SellInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SellInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellInput(SellInput other) : this() {
      symbol_ = other.symbol_;
      amount_ = other.amount_;
      receiveLimit_ = other.receiveLimit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SellInput Clone() {
      return new SellInput(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "receive_limit" field.</summary>
    public const int ReceiveLimitFieldNumber = 3;
    private long receiveLimit_;
    /// <summary>
    /// No sell if receiving less than this, 0 if no limit
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReceiveLimit {
      get { return receiveLimit_; }
      set {
        receiveLimit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SellInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SellInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (Amount != other.Amount) return false;
      if (ReceiveLimit != other.ReceiveLimit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (ReceiveLimit != 0L) hash ^= ReceiveLimit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (ReceiveLimit != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ReceiveLimit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (ReceiveLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ReceiveLimit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SellInput other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.ReceiveLimit != 0L) {
        ReceiveLimit = other.ReceiveLimit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 24: {
            ReceiveLimit = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Events
  /// </summary>
  public sealed partial class TokenBought : pb::IMessage<TokenBought> {
    private static readonly pb::MessageParser<TokenBought> _parser = new pb::MessageParser<TokenBought>(() => new TokenBought());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenBought> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBought() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBought(TokenBought other) : this() {
      symbol_ = other.symbol_;
      boughtAmount_ = other.boughtAmount_;
      baseAmount_ = other.baseAmount_;
      feeAmount_ = other.feeAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenBought Clone() {
      return new TokenBought(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bought_amount" field.</summary>
    public const int BoughtAmountFieldNumber = 2;
    private long boughtAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BoughtAmount {
      get { return boughtAmount_; }
      set {
        boughtAmount_ = value;
      }
    }

    /// <summary>Field number for the "base_amount" field.</summary>
    public const int BaseAmountFieldNumber = 3;
    private long baseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseAmount {
      get { return baseAmount_; }
      set {
        baseAmount_ = value;
      }
    }

    /// <summary>Field number for the "fee_amount" field.</summary>
    public const int FeeAmountFieldNumber = 4;
    private long feeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeAmount {
      get { return feeAmount_; }
      set {
        feeAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenBought);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenBought other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (BoughtAmount != other.BoughtAmount) return false;
      if (BaseAmount != other.BaseAmount) return false;
      if (FeeAmount != other.FeeAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (BoughtAmount != 0L) hash ^= BoughtAmount.GetHashCode();
      if (BaseAmount != 0L) hash ^= BaseAmount.GetHashCode();
      if (FeeAmount != 0L) hash ^= FeeAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (BoughtAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(BoughtAmount);
      }
      if (BaseAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(BaseAmount);
      }
      if (FeeAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(FeeAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (BoughtAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BoughtAmount);
      }
      if (BaseAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BaseAmount);
      }
      if (FeeAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FeeAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenBought other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.BoughtAmount != 0L) {
        BoughtAmount = other.BoughtAmount;
      }
      if (other.BaseAmount != 0L) {
        BaseAmount = other.BaseAmount;
      }
      if (other.FeeAmount != 0L) {
        FeeAmount = other.FeeAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            BoughtAmount = input.ReadSInt64();
            break;
          }
          case 24: {
            BaseAmount = input.ReadSInt64();
            break;
          }
          case 32: {
            FeeAmount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenSold : pb::IMessage<TokenSold> {
    private static readonly pb::MessageParser<TokenSold> _parser = new pb::MessageParser<TokenSold>(() => new TokenSold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TokenSold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Contracts.TokenConverter.TokenConverterContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSold(TokenSold other) : this() {
      symbol_ = other.symbol_;
      soldAmount_ = other.soldAmount_;
      baseAmount_ = other.baseAmount_;
      feeAmount_ = other.feeAmount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TokenSold Clone() {
      return new TokenSold(this);
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 1;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sold_amount" field.</summary>
    public const int SoldAmountFieldNumber = 2;
    private long soldAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SoldAmount {
      get { return soldAmount_; }
      set {
        soldAmount_ = value;
      }
    }

    /// <summary>Field number for the "base_amount" field.</summary>
    public const int BaseAmountFieldNumber = 3;
    private long baseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BaseAmount {
      get { return baseAmount_; }
      set {
        baseAmount_ = value;
      }
    }

    /// <summary>Field number for the "fee_amount" field.</summary>
    public const int FeeAmountFieldNumber = 4;
    private long feeAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long FeeAmount {
      get { return feeAmount_; }
      set {
        feeAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TokenSold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TokenSold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Symbol != other.Symbol) return false;
      if (SoldAmount != other.SoldAmount) return false;
      if (BaseAmount != other.BaseAmount) return false;
      if (FeeAmount != other.FeeAmount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (SoldAmount != 0L) hash ^= SoldAmount.GetHashCode();
      if (BaseAmount != 0L) hash ^= BaseAmount.GetHashCode();
      if (FeeAmount != 0L) hash ^= FeeAmount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Symbol.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Symbol);
      }
      if (SoldAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(SoldAmount);
      }
      if (BaseAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(BaseAmount);
      }
      if (FeeAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(FeeAmount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (SoldAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SoldAmount);
      }
      if (BaseAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(BaseAmount);
      }
      if (FeeAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(FeeAmount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TokenSold other) {
      if (other == null) {
        return;
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      if (other.SoldAmount != 0L) {
        SoldAmount = other.SoldAmount;
      }
      if (other.BaseAmount != 0L) {
        BaseAmount = other.BaseAmount;
      }
      if (other.FeeAmount != 0L) {
        FeeAmount = other.FeeAmount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Symbol = input.ReadString();
            break;
          }
          case 16: {
            SoldAmount = input.ReadSInt64();
            break;
          }
          case 24: {
            BaseAmount = input.ReadSInt64();
            break;
          }
          case 32: {
            FeeAmount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
