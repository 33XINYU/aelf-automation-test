// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: profit.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Kernel {

  /// <summary>Holder for reflection information generated from profit.proto</summary>
  public static partial class ProfitReflection {

    #region Descriptor
    /// <summary>File descriptor for profit.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProfitReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgxwcm9maXQucHJvdG8aDGNvbW1vbi5wcm90byJKCh1Jbml0aWFsaXplUHJv",
            "Zml0Q29udHJhY3RJbnB1dBIpChp0b2tlbl9jb250cmFjdF9zeXN0ZW1fbmFt",
            "ZRgBIAEoCzIFLkhhc2giYgoVQ3JlYXRlUHJvZml0SXRlbUlucHV0EhQKDHRv",
            "dGFsX3dlaWdodBgBIAEoEhIUCgx0b2tlbl9zeW1ib2wYAiABKAkSHQoVZXhw",
            "aXJlZF9wZXJpb2RfbnVtYmVyGAMgASgSIu0BCgpQcm9maXRJdGVtEiEKD3Zp",
            "cnR1YWxfYWRkcmVzcxgBIAEoCzIILkFkZHJlc3MSFAoMdG90YWxfd2VpZ2h0",
            "GAIgASgSEhQKDHRvdGFsX2Ftb3VudBgDIAEoEhIWCg5jdXJyZW50X3Blcmlv",
            "ZBgEIAEoEhIUCgx0b2tlbl9zeW1ib2wYBSABKAkSKAoQc3ViX3Byb2ZpdF9p",
            "dGVtcxgHIAMoCzIOLlN1YlByb2ZpdEl0ZW0SGQoHY3JlYXRvchgIIAEoCzII",
            "LkFkZHJlc3MSHQoVZXhwaXJlZF9wZXJpb2RfbnVtYmVyGAkgASgSIjkKDVN1",
            "YlByb2ZpdEl0ZW0SGAoJcHJvZml0X2lkGAEgASgLMgUuSGFzaBIOCgZ3ZWln",
            "aHQYAiABKBIiagoOQWRkV2VpZ2h0SW5wdXQSGgoIcmVjZWl2ZXIYASABKAsy",
            "CC5BZGRyZXNzEhgKCXByb2ZpdF9pZBgCIAEoCzIFLkhhc2gSDgoGd2VpZ2h0",
            "GAMgASgSEhIKCmVuZF9wZXJpb2QYBCABKBIiRgoOU3ViV2VpZ2h0SW5wdXQS",
            "GgoIcmVjZWl2ZXIYASABKAsyCC5BZGRyZXNzEhgKCXByb2ZpdF9pZBgCIAEo",
            "CzIFLkhhc2giJwoLUHJvZml0SW5wdXQSGAoJcHJvZml0X2lkGAEgASgLMgUu",
            "SGFzaCJOChJSZWxlYXNlUHJvZml0SW5wdXQSGAoJcHJvZml0X2lkGAEgASgL",
            "MgUuSGFzaBIOCgZwZXJpb2QYAiABKBISDgoGYW1vdW50GAMgASgSIi8KDVBy",
            "b2ZpdERldGFpbHMSHgoHRGV0YWlscxgBIAMoCzINLlByb2ZpdERldGFpbCJk",
            "CgxQcm9maXREZXRhaWwSFAoMc3RhcnRfcGVyaW9kGAEgASgSEhIKCmVuZF9w",
            "ZXJpb2QYAiABKBISDgoGd2VpZ2h0GAMgASgSEhoKEmxhc3RfcHJvZml0X3Bl",
            "cmlvZBgEIAEoEiJLCg9BZGRQcm9maXRzSW5wdXQSGAoJcHJvZml0X2lkGAEg",
            "ASgLMgUuSGFzaBIOCgZhbW91bnQYAiABKBISDgoGcGVyaW9kGAMgASgSIm0K",
            "GlJlZ2lzdGVyU3ViUHJvZml0SXRlbUlucHV0EhgKCXByb2ZpdF9pZBgBIAEo",
            "CzIFLkhhc2gSHAoNc3ViX3Byb2ZpdF9pZBgCIAEoCzIFLkhhc2gSFwoPc3Vi",
            "X2l0ZW1fd2VpZ2h0GAMgASgSImgKGENhbmNlbFN1YlByb2ZpdEl0ZW1JbnB1",
            "dBIRCglpdGVtX25hbWUYASABKAkSFQoNc3ViX2l0ZW1fbmFtZRgCIAEoCRIi",
            "ChBzdWJfaXRlbV9jcmVhdG9yGAMgASgLMgguQWRkcmVzcyJfChpSZWxlYXNl",
            "ZFByb2ZpdHNJbmZvcm1hdGlvbhIUCgx0b3RhbF93ZWlnaHQYASABKBISFgoO",
            "cHJvZml0c19hbW91bnQYAiABKBISEwoLaXNfcmVsZWFzZWQYAyABKAgiLgoS",
            "Q3JlYXRlZFByb2ZpdEl0ZW1zEhgKCVByb2ZpdElkcxgBIAMoCzIFLkhhc2gi",
            "NwoaR2V0Q3JlYXRlZFByb2ZpdEl0ZW1zSW5wdXQSGQoHY3JlYXRvchgBIAEo",
            "CzIILkFkZHJlc3MiTAogR2V0UHJvZml0SXRlbVZpcnR1YWxBZGRyZXNzSW5w",
            "dXQSGAoJcHJvZml0X2lkGAEgASgLMgUuSGFzaBIOCgZwZXJpb2QYAiABKBIi",
            "TgoiR2V0UmVsZWFzZWRQcm9maXRzSW5mb3JtYXRpb25JbnB1dBIYCglwcm9m",
            "aXRfaWQYASABKAsyBS5IYXNoEg4KBnBlcmlvZBgCIAEoEiJNChVHZXRQcm9m",
            "aXREZXRhaWxzSW5wdXQSGAoJcHJvZml0X2lkGAEgASgLMgUuSGFzaBIaCghy",
            "ZWNlaXZlchgCIAEoCzIILkFkZHJlc3NCDqoCC0FFbGYuS2VybmVsYgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.InitializeProfitContractInput), global::AElf.Kernel.InitializeProfitContractInput.Parser, new[]{ "TokenContractSystemName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CreateProfitItemInput), global::AElf.Kernel.CreateProfitItemInput.Parser, new[]{ "TotalWeight", "TokenSymbol", "ExpiredPeriodNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ProfitItem), global::AElf.Kernel.ProfitItem.Parser, new[]{ "VirtualAddress", "TotalWeight", "TotalAmount", "CurrentPeriod", "TokenSymbol", "SubProfitItems", "Creator", "ExpiredPeriodNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SubProfitItem), global::AElf.Kernel.SubProfitItem.Parser, new[]{ "ProfitId", "Weight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.AddWeightInput), global::AElf.Kernel.AddWeightInput.Parser, new[]{ "Receiver", "ProfitId", "Weight", "EndPeriod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.SubWeightInput), global::AElf.Kernel.SubWeightInput.Parser, new[]{ "Receiver", "ProfitId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ProfitInput), global::AElf.Kernel.ProfitInput.Parser, new[]{ "ProfitId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ReleaseProfitInput), global::AElf.Kernel.ReleaseProfitInput.Parser, new[]{ "ProfitId", "Period", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ProfitDetails), global::AElf.Kernel.ProfitDetails.Parser, new[]{ "Details" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ProfitDetail), global::AElf.Kernel.ProfitDetail.Parser, new[]{ "StartPeriod", "EndPeriod", "Weight", "LastProfitPeriod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.AddProfitsInput), global::AElf.Kernel.AddProfitsInput.Parser, new[]{ "ProfitId", "Amount", "Period" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.RegisterSubProfitItemInput), global::AElf.Kernel.RegisterSubProfitItemInput.Parser, new[]{ "ProfitId", "SubProfitId", "SubItemWeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CancelSubProfitItemInput), global::AElf.Kernel.CancelSubProfitItemInput.Parser, new[]{ "ItemName", "SubItemName", "SubItemCreator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ReleasedProfitsInformation), global::AElf.Kernel.ReleasedProfitsInformation.Parser, new[]{ "TotalWeight", "ProfitsAmount", "IsReleased" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CreatedProfitItems), global::AElf.Kernel.CreatedProfitItems.Parser, new[]{ "ProfitIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.GetCreatedProfitItemsInput), global::AElf.Kernel.GetCreatedProfitItemsInput.Parser, new[]{ "Creator" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.GetProfitItemVirtualAddressInput), global::AElf.Kernel.GetProfitItemVirtualAddressInput.Parser, new[]{ "ProfitId", "Period" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.GetReleasedProfitsInformationInput), global::AElf.Kernel.GetReleasedProfitsInformationInput.Parser, new[]{ "ProfitId", "Period" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.GetProfitDetailsInput), global::AElf.Kernel.GetProfitDetailsInput.Parser, new[]{ "ProfitId", "Receiver" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class InitializeProfitContractInput : pb::IMessage<InitializeProfitContractInput> {
    private static readonly pb::MessageParser<InitializeProfitContractInput> _parser = new pb::MessageParser<InitializeProfitContractInput>(() => new InitializeProfitContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitializeProfitContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeProfitContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeProfitContractInput(InitializeProfitContractInput other) : this() {
      tokenContractSystemName_ = other.tokenContractSystemName_ != null ? other.tokenContractSystemName_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitializeProfitContractInput Clone() {
      return new InitializeProfitContractInput(this);
    }

    /// <summary>Field number for the "token_contract_system_name" field.</summary>
    public const int TokenContractSystemNameFieldNumber = 1;
    private global::AElf.Hash tokenContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash TokenContractSystemName {
      get { return tokenContractSystemName_; }
      set {
        tokenContractSystemName_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitializeProfitContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitializeProfitContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TokenContractSystemName, other.TokenContractSystemName)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (tokenContractSystemName_ != null) hash ^= TokenContractSystemName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (tokenContractSystemName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TokenContractSystemName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (tokenContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractSystemName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitializeProfitContractInput other) {
      if (other == null) {
        return;
      }
      if (other.tokenContractSystemName_ != null) {
        if (tokenContractSystemName_ == null) {
          TokenContractSystemName = new global::AElf.Hash();
        }
        TokenContractSystemName.MergeFrom(other.TokenContractSystemName);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (tokenContractSystemName_ == null) {
              TokenContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(TokenContractSystemName);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateProfitItemInput : pb::IMessage<CreateProfitItemInput> {
    private static readonly pb::MessageParser<CreateProfitItemInput> _parser = new pb::MessageParser<CreateProfitItemInput>(() => new CreateProfitItemInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateProfitItemInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateProfitItemInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateProfitItemInput(CreateProfitItemInput other) : this() {
      totalWeight_ = other.totalWeight_;
      tokenSymbol_ = other.tokenSymbol_;
      expiredPeriodNumber_ = other.expiredPeriodNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateProfitItemInput Clone() {
      return new CreateProfitItemInput(this);
    }

    /// <summary>Field number for the "total_weight" field.</summary>
    public const int TotalWeightFieldNumber = 1;
    private long totalWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalWeight {
      get { return totalWeight_; }
      set {
        totalWeight_ = value;
      }
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 2;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expired_period_number" field.</summary>
    public const int ExpiredPeriodNumberFieldNumber = 3;
    private long expiredPeriodNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiredPeriodNumber {
      get { return expiredPeriodNumber_; }
      set {
        expiredPeriodNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateProfitItemInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateProfitItemInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalWeight != other.TotalWeight) return false;
      if (TokenSymbol != other.TokenSymbol) return false;
      if (ExpiredPeriodNumber != other.ExpiredPeriodNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalWeight != 0L) hash ^= TotalWeight.GetHashCode();
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      if (ExpiredPeriodNumber != 0L) hash ^= ExpiredPeriodNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalWeight != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TotalWeight);
      }
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TokenSymbol);
      }
      if (ExpiredPeriodNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ExpiredPeriodNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalWeight);
      }
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      if (ExpiredPeriodNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ExpiredPeriodNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateProfitItemInput other) {
      if (other == null) {
        return;
      }
      if (other.TotalWeight != 0L) {
        TotalWeight = other.TotalWeight;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      if (other.ExpiredPeriodNumber != 0L) {
        ExpiredPeriodNumber = other.ExpiredPeriodNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalWeight = input.ReadSInt64();
            break;
          }
          case 18: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 24: {
            ExpiredPeriodNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfitItem : pb::IMessage<ProfitItem> {
    private static readonly pb::MessageParser<ProfitItem> _parser = new pb::MessageParser<ProfitItem>(() => new ProfitItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitItem(ProfitItem other) : this() {
      virtualAddress_ = other.virtualAddress_ != null ? other.virtualAddress_.Clone() : null;
      totalWeight_ = other.totalWeight_;
      totalAmount_ = other.totalAmount_;
      currentPeriod_ = other.currentPeriod_;
      tokenSymbol_ = other.tokenSymbol_;
      subProfitItems_ = other.subProfitItems_.Clone();
      creator_ = other.creator_ != null ? other.creator_.Clone() : null;
      expiredPeriodNumber_ = other.expiredPeriodNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitItem Clone() {
      return new ProfitItem(this);
    }

    /// <summary>Field number for the "virtual_address" field.</summary>
    public const int VirtualAddressFieldNumber = 1;
    private global::AElf.Address virtualAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address VirtualAddress {
      get { return virtualAddress_; }
      set {
        virtualAddress_ = value;
      }
    }

    /// <summary>Field number for the "total_weight" field.</summary>
    public const int TotalWeightFieldNumber = 2;
    private long totalWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalWeight {
      get { return totalWeight_; }
      set {
        totalWeight_ = value;
      }
    }

    /// <summary>Field number for the "total_amount" field.</summary>
    public const int TotalAmountFieldNumber = 3;
    private long totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    /// <summary>Field number for the "current_period" field.</summary>
    public const int CurrentPeriodFieldNumber = 4;
    private long currentPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentPeriod {
      get { return currentPeriod_; }
      set {
        currentPeriod_ = value;
      }
    }

    /// <summary>Field number for the "token_symbol" field.</summary>
    public const int TokenSymbolFieldNumber = 5;
    private string tokenSymbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenSymbol {
      get { return tokenSymbol_; }
      set {
        tokenSymbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_profit_items" field.</summary>
    public const int SubProfitItemsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::AElf.Kernel.SubProfitItem> _repeated_subProfitItems_codec
        = pb::FieldCodec.ForMessage(58, global::AElf.Kernel.SubProfitItem.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.SubProfitItem> subProfitItems_ = new pbc::RepeatedField<global::AElf.Kernel.SubProfitItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.SubProfitItem> SubProfitItems {
      get { return subProfitItems_; }
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 8;
    private global::AElf.Address creator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Creator {
      get { return creator_; }
      set {
        creator_ = value;
      }
    }

    /// <summary>Field number for the "expired_period_number" field.</summary>
    public const int ExpiredPeriodNumberFieldNumber = 9;
    private long expiredPeriodNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExpiredPeriodNumber {
      get { return expiredPeriodNumber_; }
      set {
        expiredPeriodNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VirtualAddress, other.VirtualAddress)) return false;
      if (TotalWeight != other.TotalWeight) return false;
      if (TotalAmount != other.TotalAmount) return false;
      if (CurrentPeriod != other.CurrentPeriod) return false;
      if (TokenSymbol != other.TokenSymbol) return false;
      if(!subProfitItems_.Equals(other.subProfitItems_)) return false;
      if (!object.Equals(Creator, other.Creator)) return false;
      if (ExpiredPeriodNumber != other.ExpiredPeriodNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (virtualAddress_ != null) hash ^= VirtualAddress.GetHashCode();
      if (TotalWeight != 0L) hash ^= TotalWeight.GetHashCode();
      if (TotalAmount != 0L) hash ^= TotalAmount.GetHashCode();
      if (CurrentPeriod != 0L) hash ^= CurrentPeriod.GetHashCode();
      if (TokenSymbol.Length != 0) hash ^= TokenSymbol.GetHashCode();
      hash ^= subProfitItems_.GetHashCode();
      if (creator_ != null) hash ^= Creator.GetHashCode();
      if (ExpiredPeriodNumber != 0L) hash ^= ExpiredPeriodNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (virtualAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VirtualAddress);
      }
      if (TotalWeight != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TotalWeight);
      }
      if (TotalAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(TotalAmount);
      }
      if (CurrentPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(CurrentPeriod);
      }
      if (TokenSymbol.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TokenSymbol);
      }
      subProfitItems_.WriteTo(output, _repeated_subProfitItems_codec);
      if (creator_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Creator);
      }
      if (ExpiredPeriodNumber != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(ExpiredPeriodNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (virtualAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VirtualAddress);
      }
      if (TotalWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalWeight);
      }
      if (TotalAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalAmount);
      }
      if (CurrentPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CurrentPeriod);
      }
      if (TokenSymbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenSymbol);
      }
      size += subProfitItems_.CalculateSize(_repeated_subProfitItems_codec);
      if (creator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creator);
      }
      if (ExpiredPeriodNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ExpiredPeriodNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitItem other) {
      if (other == null) {
        return;
      }
      if (other.virtualAddress_ != null) {
        if (virtualAddress_ == null) {
          VirtualAddress = new global::AElf.Address();
        }
        VirtualAddress.MergeFrom(other.VirtualAddress);
      }
      if (other.TotalWeight != 0L) {
        TotalWeight = other.TotalWeight;
      }
      if (other.TotalAmount != 0L) {
        TotalAmount = other.TotalAmount;
      }
      if (other.CurrentPeriod != 0L) {
        CurrentPeriod = other.CurrentPeriod;
      }
      if (other.TokenSymbol.Length != 0) {
        TokenSymbol = other.TokenSymbol;
      }
      subProfitItems_.Add(other.subProfitItems_);
      if (other.creator_ != null) {
        if (creator_ == null) {
          Creator = new global::AElf.Address();
        }
        Creator.MergeFrom(other.Creator);
      }
      if (other.ExpiredPeriodNumber != 0L) {
        ExpiredPeriodNumber = other.ExpiredPeriodNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (virtualAddress_ == null) {
              VirtualAddress = new global::AElf.Address();
            }
            input.ReadMessage(VirtualAddress);
            break;
          }
          case 16: {
            TotalWeight = input.ReadSInt64();
            break;
          }
          case 24: {
            TotalAmount = input.ReadSInt64();
            break;
          }
          case 32: {
            CurrentPeriod = input.ReadSInt64();
            break;
          }
          case 42: {
            TokenSymbol = input.ReadString();
            break;
          }
          case 58: {
            subProfitItems_.AddEntriesFrom(input, _repeated_subProfitItems_codec);
            break;
          }
          case 66: {
            if (creator_ == null) {
              Creator = new global::AElf.Address();
            }
            input.ReadMessage(Creator);
            break;
          }
          case 72: {
            ExpiredPeriodNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubProfitItem : pb::IMessage<SubProfitItem> {
    private static readonly pb::MessageParser<SubProfitItem> _parser = new pb::MessageParser<SubProfitItem>(() => new SubProfitItem());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubProfitItem> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubProfitItem() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubProfitItem(SubProfitItem other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      weight_ = other.weight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubProfitItem Clone() {
      return new SubProfitItem(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private long weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubProfitItem);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubProfitItem other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (Weight != other.Weight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (Weight != 0L) hash ^= Weight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (Weight != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Weight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (Weight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Weight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubProfitItem other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.Weight != 0L) {
        Weight = other.Weight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 16: {
            Weight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddWeightInput : pb::IMessage<AddWeightInput> {
    private static readonly pb::MessageParser<AddWeightInput> _parser = new pb::MessageParser<AddWeightInput>(() => new AddWeightInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddWeightInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddWeightInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddWeightInput(AddWeightInput other) : this() {
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      weight_ = other.weight_;
      endPeriod_ = other.endPeriod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddWeightInput Clone() {
      return new AddWeightInput(this);
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 1;
    private global::AElf.Address receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 2;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private long weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "end_period" field.</summary>
    public const int EndPeriodFieldNumber = 4;
    private long endPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndPeriod {
      get { return endPeriod_; }
      set {
        endPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddWeightInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddWeightInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Receiver, other.Receiver)) return false;
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (Weight != other.Weight) return false;
      if (EndPeriod != other.EndPeriod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (Weight != 0L) hash ^= Weight.GetHashCode();
      if (EndPeriod != 0L) hash ^= EndPeriod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (receiver_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Receiver);
      }
      if (profitId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProfitId);
      }
      if (Weight != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Weight);
      }
      if (EndPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(EndPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (Weight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Weight);
      }
      if (EndPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddWeightInput other) {
      if (other == null) {
        return;
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::AElf.Address();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.Weight != 0L) {
        Weight = other.Weight;
      }
      if (other.EndPeriod != 0L) {
        EndPeriod = other.EndPeriod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (receiver_ == null) {
              Receiver = new global::AElf.Address();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 18: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 24: {
            Weight = input.ReadSInt64();
            break;
          }
          case 32: {
            EndPeriod = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubWeightInput : pb::IMessage<SubWeightInput> {
    private static readonly pb::MessageParser<SubWeightInput> _parser = new pb::MessageParser<SubWeightInput>(() => new SubWeightInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubWeightInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubWeightInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubWeightInput(SubWeightInput other) : this() {
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubWeightInput Clone() {
      return new SubWeightInput(this);
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 1;
    private global::AElf.Address receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 2;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubWeightInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubWeightInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Receiver, other.Receiver)) return false;
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (receiver_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Receiver);
      }
      if (profitId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProfitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubWeightInput other) {
      if (other == null) {
        return;
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::AElf.Address();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (receiver_ == null) {
              Receiver = new global::AElf.Address();
            }
            input.ReadMessage(Receiver);
            break;
          }
          case 18: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfitInput : pb::IMessage<ProfitInput> {
    private static readonly pb::MessageParser<ProfitInput> _parser = new pb::MessageParser<ProfitInput>(() => new ProfitInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitInput(ProfitInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitInput Clone() {
      return new ProfitInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReleaseProfitInput : pb::IMessage<ReleaseProfitInput> {
    private static readonly pb::MessageParser<ReleaseProfitInput> _parser = new pb::MessageParser<ReleaseProfitInput>(() => new ReleaseProfitInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseProfitInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseProfitInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseProfitInput(ReleaseProfitInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      period_ = other.period_;
      amount_ = other.amount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseProfitInput Clone() {
      return new ReleaseProfitInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 2;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseProfitInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseProfitInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (Period != other.Period) return false;
      if (Amount != other.Amount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (Period != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Period);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseProfitInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 16: {
            Period = input.ReadSInt64();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfitDetails : pb::IMessage<ProfitDetails> {
    private static readonly pb::MessageParser<ProfitDetails> _parser = new pb::MessageParser<ProfitDetails>(() => new ProfitDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails(ProfitDetails other) : this() {
      details_ = other.details_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails Clone() {
      return new ProfitDetails(this);
    }

    /// <summary>Field number for the "Details" field.</summary>
    public const int DetailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.ProfitDetail> _repeated_details_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.ProfitDetail.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.ProfitDetail> details_ = new pbc::RepeatedField<global::AElf.Kernel.ProfitDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.ProfitDetail> Details {
      get { return details_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!details_.Equals(other.details_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= details_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      details_.WriteTo(output, _repeated_details_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += details_.CalculateSize(_repeated_details_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitDetails other) {
      if (other == null) {
        return;
      }
      details_.Add(other.details_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfitDetail : pb::IMessage<ProfitDetail> {
    private static readonly pb::MessageParser<ProfitDetail> _parser = new pb::MessageParser<ProfitDetail>(() => new ProfitDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail(ProfitDetail other) : this() {
      startPeriod_ = other.startPeriod_;
      endPeriod_ = other.endPeriod_;
      weight_ = other.weight_;
      lastProfitPeriod_ = other.lastProfitPeriod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail Clone() {
      return new ProfitDetail(this);
    }

    /// <summary>Field number for the "start_period" field.</summary>
    public const int StartPeriodFieldNumber = 1;
    private long startPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartPeriod {
      get { return startPeriod_; }
      set {
        startPeriod_ = value;
      }
    }

    /// <summary>Field number for the "end_period" field.</summary>
    public const int EndPeriodFieldNumber = 2;
    private long endPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndPeriod {
      get { return endPeriod_; }
      set {
        endPeriod_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 3;
    private long weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "last_profit_period" field.</summary>
    public const int LastProfitPeriodFieldNumber = 4;
    private long lastProfitPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastProfitPeriod {
      get { return lastProfitPeriod_; }
      set {
        lastProfitPeriod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartPeriod != other.StartPeriod) return false;
      if (EndPeriod != other.EndPeriod) return false;
      if (Weight != other.Weight) return false;
      if (LastProfitPeriod != other.LastProfitPeriod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartPeriod != 0L) hash ^= StartPeriod.GetHashCode();
      if (EndPeriod != 0L) hash ^= EndPeriod.GetHashCode();
      if (Weight != 0L) hash ^= Weight.GetHashCode();
      if (LastProfitPeriod != 0L) hash ^= LastProfitPeriod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartPeriod != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(StartPeriod);
      }
      if (EndPeriod != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(EndPeriod);
      }
      if (Weight != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Weight);
      }
      if (LastProfitPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(LastProfitPeriod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartPeriod);
      }
      if (EndPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndPeriod);
      }
      if (Weight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Weight);
      }
      if (LastProfitPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastProfitPeriod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitDetail other) {
      if (other == null) {
        return;
      }
      if (other.StartPeriod != 0L) {
        StartPeriod = other.StartPeriod;
      }
      if (other.EndPeriod != 0L) {
        EndPeriod = other.EndPeriod;
      }
      if (other.Weight != 0L) {
        Weight = other.Weight;
      }
      if (other.LastProfitPeriod != 0L) {
        LastProfitPeriod = other.LastProfitPeriod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartPeriod = input.ReadSInt64();
            break;
          }
          case 16: {
            EndPeriod = input.ReadSInt64();
            break;
          }
          case 24: {
            Weight = input.ReadSInt64();
            break;
          }
          case 32: {
            LastProfitPeriod = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddProfitsInput : pb::IMessage<AddProfitsInput> {
    private static readonly pb::MessageParser<AddProfitsInput> _parser = new pb::MessageParser<AddProfitsInput>(() => new AddProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddProfitsInput(AddProfitsInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      amount_ = other.amount_;
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddProfitsInput Clone() {
      return new AddProfitsInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 3;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (Amount != other.Amount) return false;
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (Period != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 24: {
            Period = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterSubProfitItemInput : pb::IMessage<RegisterSubProfitItemInput> {
    private static readonly pb::MessageParser<RegisterSubProfitItemInput> _parser = new pb::MessageParser<RegisterSubProfitItemInput>(() => new RegisterSubProfitItemInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterSubProfitItemInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSubProfitItemInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSubProfitItemInput(RegisterSubProfitItemInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      subProfitId_ = other.subProfitId_ != null ? other.subProfitId_.Clone() : null;
      subItemWeight_ = other.subItemWeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterSubProfitItemInput Clone() {
      return new RegisterSubProfitItemInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "sub_profit_id" field.</summary>
    public const int SubProfitIdFieldNumber = 2;
    private global::AElf.Hash subProfitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash SubProfitId {
      get { return subProfitId_; }
      set {
        subProfitId_ = value;
      }
    }

    /// <summary>Field number for the "sub_item_weight" field.</summary>
    public const int SubItemWeightFieldNumber = 3;
    private long subItemWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SubItemWeight {
      get { return subItemWeight_; }
      set {
        subItemWeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterSubProfitItemInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterSubProfitItemInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (!object.Equals(SubProfitId, other.SubProfitId)) return false;
      if (SubItemWeight != other.SubItemWeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (subProfitId_ != null) hash ^= SubProfitId.GetHashCode();
      if (SubItemWeight != 0L) hash ^= SubItemWeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (subProfitId_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SubProfitId);
      }
      if (SubItemWeight != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(SubItemWeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (subProfitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubProfitId);
      }
      if (SubItemWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SubItemWeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterSubProfitItemInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.subProfitId_ != null) {
        if (subProfitId_ == null) {
          SubProfitId = new global::AElf.Hash();
        }
        SubProfitId.MergeFrom(other.SubProfitId);
      }
      if (other.SubItemWeight != 0L) {
        SubItemWeight = other.SubItemWeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 18: {
            if (subProfitId_ == null) {
              SubProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(SubProfitId);
            break;
          }
          case 24: {
            SubItemWeight = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CancelSubProfitItemInput : pb::IMessage<CancelSubProfitItemInput> {
    private static readonly pb::MessageParser<CancelSubProfitItemInput> _parser = new pb::MessageParser<CancelSubProfitItemInput>(() => new CancelSubProfitItemInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CancelSubProfitItemInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSubProfitItemInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSubProfitItemInput(CancelSubProfitItemInput other) : this() {
      itemName_ = other.itemName_;
      subItemName_ = other.subItemName_;
      subItemCreator_ = other.subItemCreator_ != null ? other.subItemCreator_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CancelSubProfitItemInput Clone() {
      return new CancelSubProfitItemInput(this);
    }

    /// <summary>Field number for the "item_name" field.</summary>
    public const int ItemNameFieldNumber = 1;
    private string itemName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ItemName {
      get { return itemName_; }
      set {
        itemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_item_name" field.</summary>
    public const int SubItemNameFieldNumber = 2;
    private string subItemName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SubItemName {
      get { return subItemName_; }
      set {
        subItemName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sub_item_creator" field.</summary>
    public const int SubItemCreatorFieldNumber = 3;
    private global::AElf.Address subItemCreator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address SubItemCreator {
      get { return subItemCreator_; }
      set {
        subItemCreator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CancelSubProfitItemInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CancelSubProfitItemInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemName != other.ItemName) return false;
      if (SubItemName != other.SubItemName) return false;
      if (!object.Equals(SubItemCreator, other.SubItemCreator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemName.Length != 0) hash ^= ItemName.GetHashCode();
      if (SubItemName.Length != 0) hash ^= SubItemName.GetHashCode();
      if (subItemCreator_ != null) hash ^= SubItemCreator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ItemName);
      }
      if (SubItemName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SubItemName);
      }
      if (subItemCreator_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SubItemCreator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ItemName);
      }
      if (SubItemName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SubItemName);
      }
      if (subItemCreator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SubItemCreator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CancelSubProfitItemInput other) {
      if (other == null) {
        return;
      }
      if (other.ItemName.Length != 0) {
        ItemName = other.ItemName;
      }
      if (other.SubItemName.Length != 0) {
        SubItemName = other.SubItemName;
      }
      if (other.subItemCreator_ != null) {
        if (subItemCreator_ == null) {
          SubItemCreator = new global::AElf.Address();
        }
        SubItemCreator.MergeFrom(other.SubItemCreator);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ItemName = input.ReadString();
            break;
          }
          case 18: {
            SubItemName = input.ReadString();
            break;
          }
          case 26: {
            if (subItemCreator_ == null) {
              SubItemCreator = new global::AElf.Address();
            }
            input.ReadMessage(SubItemCreator);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReleasedProfitsInformation : pb::IMessage<ReleasedProfitsInformation> {
    private static readonly pb::MessageParser<ReleasedProfitsInformation> _parser = new pb::MessageParser<ReleasedProfitsInformation>(() => new ReleasedProfitsInformation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleasedProfitsInformation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleasedProfitsInformation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleasedProfitsInformation(ReleasedProfitsInformation other) : this() {
      totalWeight_ = other.totalWeight_;
      profitsAmount_ = other.profitsAmount_;
      isReleased_ = other.isReleased_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleasedProfitsInformation Clone() {
      return new ReleasedProfitsInformation(this);
    }

    /// <summary>Field number for the "total_weight" field.</summary>
    public const int TotalWeightFieldNumber = 1;
    private long totalWeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalWeight {
      get { return totalWeight_; }
      set {
        totalWeight_ = value;
      }
    }

    /// <summary>Field number for the "profits_amount" field.</summary>
    public const int ProfitsAmountFieldNumber = 2;
    private long profitsAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProfitsAmount {
      get { return profitsAmount_; }
      set {
        profitsAmount_ = value;
      }
    }

    /// <summary>Field number for the "is_released" field.</summary>
    public const int IsReleasedFieldNumber = 3;
    private bool isReleased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleased {
      get { return isReleased_; }
      set {
        isReleased_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleasedProfitsInformation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleasedProfitsInformation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalWeight != other.TotalWeight) return false;
      if (ProfitsAmount != other.ProfitsAmount) return false;
      if (IsReleased != other.IsReleased) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalWeight != 0L) hash ^= TotalWeight.GetHashCode();
      if (ProfitsAmount != 0L) hash ^= ProfitsAmount.GetHashCode();
      if (IsReleased != false) hash ^= IsReleased.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalWeight != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TotalWeight);
      }
      if (ProfitsAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(ProfitsAmount);
      }
      if (IsReleased != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReleased);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalWeight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalWeight);
      }
      if (ProfitsAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProfitsAmount);
      }
      if (IsReleased != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleasedProfitsInformation other) {
      if (other == null) {
        return;
      }
      if (other.TotalWeight != 0L) {
        TotalWeight = other.TotalWeight;
      }
      if (other.ProfitsAmount != 0L) {
        ProfitsAmount = other.ProfitsAmount;
      }
      if (other.IsReleased != false) {
        IsReleased = other.IsReleased;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalWeight = input.ReadSInt64();
            break;
          }
          case 16: {
            ProfitsAmount = input.ReadSInt64();
            break;
          }
          case 24: {
            IsReleased = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreatedProfitItems : pb::IMessage<CreatedProfitItems> {
    private static readonly pb::MessageParser<CreatedProfitItems> _parser = new pb::MessageParser<CreatedProfitItems>(() => new CreatedProfitItems());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatedProfitItems> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedProfitItems() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedProfitItems(CreatedProfitItems other) : this() {
      profitIds_ = other.profitIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedProfitItems Clone() {
      return new CreatedProfitItems(this);
    }

    /// <summary>Field number for the "ProfitIds" field.</summary>
    public const int ProfitIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_profitIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> profitIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ProfitIds {
      get { return profitIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatedProfitItems);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatedProfitItems other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!profitIds_.Equals(other.profitIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= profitIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      profitIds_.WriteTo(output, _repeated_profitIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += profitIds_.CalculateSize(_repeated_profitIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatedProfitItems other) {
      if (other == null) {
        return;
      }
      profitIds_.Add(other.profitIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            profitIds_.AddEntriesFrom(input, _repeated_profitIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetCreatedProfitItemsInput : pb::IMessage<GetCreatedProfitItemsInput> {
    private static readonly pb::MessageParser<GetCreatedProfitItemsInput> _parser = new pb::MessageParser<GetCreatedProfitItemsInput>(() => new GetCreatedProfitItemsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetCreatedProfitItemsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCreatedProfitItemsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCreatedProfitItemsInput(GetCreatedProfitItemsInput other) : this() {
      creator_ = other.creator_ != null ? other.creator_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetCreatedProfitItemsInput Clone() {
      return new GetCreatedProfitItemsInput(this);
    }

    /// <summary>Field number for the "creator" field.</summary>
    public const int CreatorFieldNumber = 1;
    private global::AElf.Address creator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Creator {
      get { return creator_; }
      set {
        creator_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetCreatedProfitItemsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetCreatedProfitItemsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Creator, other.Creator)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (creator_ != null) hash ^= Creator.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (creator_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Creator);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (creator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Creator);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetCreatedProfitItemsInput other) {
      if (other == null) {
        return;
      }
      if (other.creator_ != null) {
        if (creator_ == null) {
          Creator = new global::AElf.Address();
        }
        Creator.MergeFrom(other.Creator);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (creator_ == null) {
              Creator = new global::AElf.Address();
            }
            input.ReadMessage(Creator);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProfitItemVirtualAddressInput : pb::IMessage<GetProfitItemVirtualAddressInput> {
    private static readonly pb::MessageParser<GetProfitItemVirtualAddressInput> _parser = new pb::MessageParser<GetProfitItemVirtualAddressInput>(() => new GetProfitItemVirtualAddressInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfitItemVirtualAddressInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitItemVirtualAddressInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitItemVirtualAddressInput(GetProfitItemVirtualAddressInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitItemVirtualAddressInput Clone() {
      return new GetProfitItemVirtualAddressInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 2;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfitItemVirtualAddressInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfitItemVirtualAddressInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (Period != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfitItemVirtualAddressInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 16: {
            Period = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetReleasedProfitsInformationInput : pb::IMessage<GetReleasedProfitsInformationInput> {
    private static readonly pb::MessageParser<GetReleasedProfitsInformationInput> _parser = new pb::MessageParser<GetReleasedProfitsInformationInput>(() => new GetReleasedProfitsInformationInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetReleasedProfitsInformationInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReleasedProfitsInformationInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReleasedProfitsInformationInput(GetReleasedProfitsInformationInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetReleasedProfitsInformationInput Clone() {
      return new GetReleasedProfitsInformationInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 2;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetReleasedProfitsInformationInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetReleasedProfitsInformationInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (Period != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetReleasedProfitsInformationInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 16: {
            Period = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProfitDetailsInput : pb::IMessage<GetProfitDetailsInput> {
    private static readonly pb::MessageParser<GetProfitDetailsInput> _parser = new pb::MessageParser<GetProfitDetailsInput>(() => new GetProfitDetailsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfitDetailsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ProfitReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput(GetProfitDetailsInput other) : this() {
      profitId_ = other.profitId_ != null ? other.profitId_.Clone() : null;
      receiver_ = other.receiver_ != null ? other.receiver_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput Clone() {
      return new GetProfitDetailsInput(this);
    }

    /// <summary>Field number for the "profit_id" field.</summary>
    public const int ProfitIdFieldNumber = 1;
    private global::AElf.Hash profitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitId {
      get { return profitId_; }
      set {
        profitId_ = value;
      }
    }

    /// <summary>Field number for the "receiver" field.</summary>
    public const int ReceiverFieldNumber = 2;
    private global::AElf.Address receiver_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Receiver {
      get { return receiver_; }
      set {
        receiver_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfitDetailsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfitDetailsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(ProfitId, other.ProfitId)) return false;
      if (!object.Equals(Receiver, other.Receiver)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (profitId_ != null) hash ^= ProfitId.GetHashCode();
      if (receiver_ != null) hash ^= Receiver.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (profitId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ProfitId);
      }
      if (receiver_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Receiver);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (profitId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitId);
      }
      if (receiver_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Receiver);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfitDetailsInput other) {
      if (other == null) {
        return;
      }
      if (other.profitId_ != null) {
        if (profitId_ == null) {
          ProfitId = new global::AElf.Hash();
        }
        ProfitId.MergeFrom(other.ProfitId);
      }
      if (other.receiver_ != null) {
        if (receiver_ == null) {
          Receiver = new global::AElf.Address();
        }
        Receiver.MergeFrom(other.Receiver);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (profitId_ == null) {
              ProfitId = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitId);
            break;
          }
          case 18: {
            if (receiver_ == null) {
              Receiver = new global::AElf.Address();
            }
            input.ReadMessage(Receiver);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
