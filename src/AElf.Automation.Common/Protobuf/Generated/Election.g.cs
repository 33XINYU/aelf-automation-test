// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: election.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Kernel {

  /// <summary>Holder for reflection information generated from election.proto</summary>
  public static partial class ElectionReflection {

    #region Descriptor
    /// <summary>File descriptor for election.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ElectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5lbGVjdGlvbi5wcm90bxIIZWxlY3Rpb24aDGNvbW1vbi5wcm90bxofZ29v",
            "Z2xlL3Byb3RvYnVmL3RpbWVzdGFtcC5wcm90byKJAgocSW5pdGlhbEVsZWN0",
            "aW9uQ29udHJhY3RJbnB1dBIoChl2b3RlX2NvbnRyYWN0X3N5c3RlbV9uYW1l",
            "GAEgASgLMgUuSGFzaBIqChtwcm9maXRfY29udHJhY3Rfc3lzdGVtX25hbWUY",
            "AiABKAsyBS5IYXNoEikKGnRva2VuX2NvbnRyYWN0X3N5c3RlbV9uYW1lGAMg",
            "ASgLMgUuSGFzaBIyCiNhZWxmX2NvbnNlbnN1c19jb250cmFjdF9zeXN0ZW1f",
            "bmFtZRgEIAEoCzIFLkhhc2gSGQoRbWluaW11bV9sb2NrX3RpbWUYBSABKBES",
            "GQoRbWF4aW11bV9sb2NrX3RpbWUYBiABKBEiOgogUmVnaXN0ZXJFbGVjdGlv",
            "blZvdGluZ0V2ZW50SW5wdXQSFgoObG9ja190aW1lX3VuaXQYASABKBEiFQoT",
            "Q3JlYXRlVHJlYXN1cnlJbnB1dCIZChdSZWdpc3RlclRvVHJlYXN1cnlJbnB1",
            "dCIrChRHZXRUZXJtU25hcHNob3RJbnB1dBITCgt0ZXJtX251bWJlchgBIAEo",
            "EiKRAQofVXBkYXRlQ2FuZGlkYXRlSW5mb3JtYXRpb25JbnB1dBISCgpwdWJs",
            "aWNfa2V5GAEgASgJEiAKGHJlY2VudGx5X3Byb2R1Y2VkX2Jsb2NrcxgCIAEo",
            "EhIiChpyZWNlbnRseV9taXNzZWRfdGltZV9zbG90cxgDIAEoEhIUCgxpc19l",
            "dmlsX25vZGUYBCABKAgiXgobUmVsZWFzZVRyZWFzdXJ5UHJvZml0c0lucHV0",
            "EhMKC3Rlcm1fbnVtYmVyGAEgASgSEhQKDG1pbmVkX2Jsb2NrcxgCIAEoEhIU",
            "Cgxyb3VuZF9udW1iZXIYAyABKBIiJgoVQW5ub3VuY2VFbGVjdGlvbklucHV0",
            "Eg0KBWFsaWFzGAEgASgJInIKDlZvdGVNaW5lcklucHV0EhsKE2NhbmRpZGF0",
            "ZV9wdWJsaWNLZXkYASABKAkSDgoGYW1vdW50GAIgASgSEhAKCGxvY2tUaW1l",
            "GAMgASgREiEKDmxvY2tfdGltZV91bml0GAQgASgOMgkuVGltZVVuaXQiLAoV",
            "VXBkYXRlVGVybU51bWJlcklucHV0EhMKC3Rlcm1fbnVtYmVyGAEgASgSIi0K",
            "FkdldEVsZWN0aW9uUmVzdWx0SW5wdXQSEwoLdGVybV9udW1iZXIYASABKBIi",
            "oAEKDkVsZWN0aW9uUmVzdWx0EhMKC3Rlcm1fbnVtYmVyGAEgASgSEjYKB3Jl",
            "c3VsdHMYAiADKAsyJS5lbGVjdGlvbi5FbGVjdGlvblJlc3VsdC5SZXN1bHRz",
            "RW50cnkSEQoJaXNfYWN0aXZlGAMgASgIGi4KDFJlc3VsdHNFbnRyeRILCgNr",
            "ZXkYASABKAkSDQoFdmFsdWUYAiABKBI6AjgBItEECgVWb3RlcxIfChBhY3Rp",
            "dmVfdm90ZXNfaWRzGAEgAygLMgUuSGFzaBIiChN3aXRoZHJhd25fdm90ZXNf",
            "aWRzGAIgAygLMgUuSGFzaBIoChlvYnRhaW5lZF9hY3RpdmVfdm90ZXNfaWRz",
            "GAMgAygLMgUuSGFzaBIrChxvYnRhaW5lZF93aXRoZHJhd25fdm90ZXNfaWRz",
            "GAQgAygLMgUuSGFzaBIjCht2YWxpZF9vYnRhaW5lZF92b3Rlc19hbW91bnQY",
            "BSABKBISIAoYdmFsaWRfdm90ZWRfdm90ZXNfYW1vdW50GAYgASgSEiEKGWFs",
            "bF9vYnRhaW5lZF92b3Rlc19hbW91bnQYByABKBISHgoWYWxsX3ZvdGVkX3Zv",
            "dGVzX2Ftb3VudBgIIAEoEhISCgpwdWJsaWNfa2V5GAkgASgMEjwKFGFjdGl2",
            "ZV92b3Rlc19yZWNvcmRzGAogAygLMh4uZWxlY3Rpb24uRWxlY3Rpb25Wb3Rp",
            "bmdSZWNvcmQSPwoXd2l0aGRyYXduX3ZvdGVzX3JlY29yZHMYCyADKAsyHi5l",
            "bGVjdGlvbi5FbGVjdGlvblZvdGluZ1JlY29yZBJFCh1vYnRhaW5lZF9hY3Rp",
            "dmVfdm90ZXNfcmVjb3JkcxgMIAMoCzIeLmVsZWN0aW9uLkVsZWN0aW9uVm90",
            "aW5nUmVjb3JkEkgKIG9idGFpbmVkX3dpdGhkcmF3bl92b3Rlc19yZWNvcmRz",
            "GA0gAygLMh4uZWxlY3Rpb24uRWxlY3Rpb25Wb3RpbmdSZWNvcmQi3AIKEENh",
            "bmRpZGF0ZUhpc3RvcnkSEgoKcHVibGljX2tleRgBIAEoCRINCgV0ZXJtcxgC",
            "IAMoAxIXCg9wcm9kdWNlZF9ibG9ja3MYAyABKBISGQoRbWlzc2VkX3RpbWVf",
            "c2xvdHMYBCABKBISIwobY29udGludWFsX2FwcG9pbnRtZW50X2NvdW50GAUg",
            "ASgSEhsKE3JlYXBwb2ludG1lbnRfY291bnQYBiABKBISDwoHYWxpYXNlcxgH",
            "IAMoCRIVCg1jdXJyZW50X2FsaWFzGAggASgJEhwKFGN1cnJlbnRfdm90ZXNf",
            "bnVtYmVyGAkgASgSEioKG2Fubm91bmNlbWVudF90cmFuc2FjdGlvbl9pZBgM",
            "IAEoCzIFLkhhc2gSFAoMaXNfZXZpbF9ub2RlGA0gASgIEicKBXN0YXRlGA4g",
            "ASgOMhguZWxlY3Rpb24uQ2FuZGlkYXRlU3RhdGUiygIKFEVsZWN0aW9uVm90",
            "aW5nUmVjb3JkEhcKBXZvdGVyGAEgASgLMgguQWRkcmVzcxIRCgljYW5kaWRh",
            "dGUYAiABKAkSDgoGYW1vdW50GAMgASgSEhMKC3Rlcm1fbnVtYmVyGAQgASgS",
            "EhYKB3ZvdGVfaWQYBSABKAsyBS5IYXNoEhEKCWxvY2tfdGltZRgHIAEoERI0",
            "ChB1bmxvY2tfdGltZXN0YW1wGAogASgLMhouZ29vZ2xlLnByb3RvYnVmLlRp",
            "bWVzdGFtcBI2ChJ3aXRoZHJhd190aW1lc3RhbXAYCyABKAsyGi5nb29nbGUu",
            "cHJvdG9idWYuVGltZXN0YW1wEjIKDnZvdGVfdGltZXN0YW1wGAwgASgLMhou",
            "Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIUCgxpc193aXRoZHJhd24YDSAB",
            "KAgiVAogUGFnZWFibGVFbGVjdGlvblRpY2tldHNJbmZvSW5wdXQSDQoFc3Rh",
            "cnQYASABKBISDgoGbGVuZ3RoGAIgASgSEhEKCXB1YmxpY0tleRgDIAEoCSIp",
            "CghQYWdlSW5mbxINCgVzdGFydBgBIAEoEhIOCgZsZW5ndGgYAiABKBIivQEK",
            "GkNhbmRpZGF0ZUhpc3RvcnlEaWN0aW9uYXJ5EjwKBE1hcHMYASADKAsyLi5l",
            "bGVjdGlvbi5DYW5kaWRhdGVIaXN0b3J5RGljdGlvbmFyeS5NYXBzRW50cnkS",
            "GAoQQ2FuZGlkYXRlc051bWJlchgDIAEoEhpHCglNYXBzRW50cnkSCwoDa2V5",
            "GAEgASgJEikKBXZhbHVlGAIgASgLMhouZWxlY3Rpb24uQ2FuZGlkYXRlSGlz",
            "dG9yeToCOAEiZQoYRWxlY3Rpb25UaWNrZXRzSGlzdG9yaWVzEjAKBlZhbHVl",
            "cxgBIAMoCzIgLmVsZWN0aW9uLkVsZWN0aW9uVGlja2V0c0hpc3RvcnkSFwoP",
            "SGlzdG9yaWVzTnVtYmVyGAIgASgSIrcBChZFbGVjdGlvblRpY2tldHNIaXN0",
            "b3J5EhYKDkNhbmRpZGF0ZUFsaWFzGAEgASgJEhMKC1ZvdGVzTnVtYmVyGAIg",
            "ASgSEi0KCVRpbWVzdGFtcBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1l",
            "c3RhbXASDQoFU3RhdGUYBCABKAgSMgoEVHlwZRgFIAEoDjIkLmVsZWN0aW9u",
            "LkVsZWN0aW9uVGlja2V0c0hpc3RvcnlUeXBlIhwKC1N0cmluZ0lucHV0Eg0K",
            "BXZhbHVlGAEgASgJIh0KDFN0cmluZ091dHB1dBINCgV2YWx1ZRgBIAEoCSIf",
            "Cg5QdWJsaWNLZXlzTGlzdBINCgV2YWx1ZRgBIAMoDCLNAQoMVGVybVNuYXBz",
            "aG90EhYKDkVuZFJvdW5kTnVtYmVyGAEgASgSEhMKC1RvdGFsQmxvY2tzGAIg",
            "ASgSEkQKD0NhbmRpZGF0ZXNWb3RlcxgDIAMoCzIrLmVsZWN0aW9uLlRlcm1T",
            "bmFwc2hvdC5DYW5kaWRhdGVzVm90ZXNFbnRyeRISCgpUZXJtTnVtYmVyGAQg",
            "ASgSGjYKFENhbmRpZGF0ZXNWb3Rlc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2",
            "YWx1ZRgCIAEoEjoCOAEqQwoOQ2FuZGlkYXRlU3RhdGUSEAoMTm90QW5ub3Vu",
            "Y2VkEAASDwoLSXNDYW5kaWRhdGUQARIOCgpJc0V2aWxOb2RlEAIqPAoaRWxl",
            "Y3Rpb25UaWNrZXRzSGlzdG9yeVR5cGUSCAoETm9uZRAAEgoKBlJlZGVlbRAB",
            "EggKBFZvdGUQAkIOqgILQUVsZi5LZXJuZWxiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.CommonReflection.Descriptor, global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::AElf.Kernel.CandidateState), typeof(global::AElf.Kernel.ElectionTicketsHistoryType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.InitialElectionContractInput), global::AElf.Kernel.InitialElectionContractInput.Parser, new[]{ "VoteContractSystemName", "ProfitContractSystemName", "TokenContractSystemName", "AelfConsensusContractSystemName", "MinimumLockTime", "MaximumLockTime" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.RegisterElectionVotingEventInput), global::AElf.Kernel.RegisterElectionVotingEventInput.Parser, new[]{ "LockTimeUnit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CreateTreasuryInput), global::AElf.Kernel.CreateTreasuryInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.RegisterToTreasuryInput), global::AElf.Kernel.RegisterToTreasuryInput.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.GetTermSnapshotInput), global::AElf.Kernel.GetTermSnapshotInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.UpdateCandidateInformationInput), global::AElf.Kernel.UpdateCandidateInformationInput.Parser, new[]{ "PublicKey", "RecentlyProducedBlocks", "RecentlyMissedTimeSlots", "IsEvilNode" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ReleaseTreasuryProfitsInput), global::AElf.Kernel.ReleaseTreasuryProfitsInput.Parser, new[]{ "TermNumber", "MinedBlocks", "RoundNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.AnnounceElectionInput), global::AElf.Kernel.AnnounceElectionInput.Parser, new[]{ "Alias" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.VoteMinerInput), global::AElf.Kernel.VoteMinerInput.Parser, new[]{ "CandidatePublicKey", "Amount", "LockTime", "LockTimeUnit" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.UpdateTermNumberInput), global::AElf.Kernel.UpdateTermNumberInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.GetElectionResultInput), global::AElf.Kernel.GetElectionResultInput.Parser, new[]{ "TermNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ElectionResult), global::AElf.Kernel.ElectionResult.Parser, new[]{ "TermNumber", "Results", "IsActive" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.Votes), global::AElf.Kernel.Votes.Parser, new[]{ "ActiveVotesIds", "WithdrawnVotesIds", "ObtainedActiveVotesIds", "ObtainedWithdrawnVotesIds", "ValidObtainedVotesAmount", "ValidVotedVotesAmount", "AllObtainedVotesAmount", "AllVotedVotesAmount", "PublicKey", "ActiveVotesRecords", "WithdrawnVotesRecords", "ObtainedActiveVotesRecords", "ObtainedWithdrawnVotesRecords" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CandidateHistory), global::AElf.Kernel.CandidateHistory.Parser, new[]{ "PublicKey", "Terms", "ProducedBlocks", "MissedTimeSlots", "ContinualAppointmentCount", "ReappointmentCount", "Aliases", "CurrentAlias", "CurrentVotesNumber", "AnnouncementTransactionId", "IsEvilNode", "State" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ElectionVotingRecord), global::AElf.Kernel.ElectionVotingRecord.Parser, new[]{ "Voter", "Candidate", "Amount", "TermNumber", "VoteId", "LockTime", "UnlockTimestamp", "WithdrawTimestamp", "VoteTimestamp", "IsWithdrawn" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.PageableElectionTicketsInfoInput), global::AElf.Kernel.PageableElectionTicketsInfoInput.Parser, new[]{ "Start", "Length", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.PageInfo), global::AElf.Kernel.PageInfo.Parser, new[]{ "Start", "Length" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.CandidateHistoryDictionary), global::AElf.Kernel.CandidateHistoryDictionary.Parser, new[]{ "Maps", "CandidatesNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ElectionTicketsHistories), global::AElf.Kernel.ElectionTicketsHistories.Parser, new[]{ "Values", "HistoriesNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.ElectionTicketsHistory), global::AElf.Kernel.ElectionTicketsHistory.Parser, new[]{ "CandidateAlias", "VotesNumber", "Timestamp", "State", "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.StringInput), global::AElf.Kernel.StringInput.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.StringOutput), global::AElf.Kernel.StringOutput.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.PublicKeysList), global::AElf.Kernel.PublicKeysList.Parser, new[]{ "Value" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Kernel.TermSnapshot), global::AElf.Kernel.TermSnapshot.Parser, new[]{ "EndRoundNumber", "TotalBlocks", "CandidatesVotes", "TermNumber" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum CandidateState {
    [pbr::OriginalName("NotAnnounced")] NotAnnounced = 0,
    [pbr::OriginalName("IsCandidate")] IsCandidate = 1,
    [pbr::OriginalName("IsEvilNode")] IsEvilNode = 2,
  }

  public enum ElectionTicketsHistoryType {
    [pbr::OriginalName("None")] None = 0,
    [pbr::OriginalName("Redeem")] Redeem = 1,
    [pbr::OriginalName("Vote")] Vote = 2,
  }

  #endregion

  #region Messages
  public sealed partial class InitialElectionContractInput : pb::IMessage<InitialElectionContractInput> {
    private static readonly pb::MessageParser<InitialElectionContractInput> _parser = new pb::MessageParser<InitialElectionContractInput>(() => new InitialElectionContractInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InitialElectionContractInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialElectionContractInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialElectionContractInput(InitialElectionContractInput other) : this() {
      voteContractSystemName_ = other.voteContractSystemName_ != null ? other.voteContractSystemName_.Clone() : null;
      profitContractSystemName_ = other.profitContractSystemName_ != null ? other.profitContractSystemName_.Clone() : null;
      tokenContractSystemName_ = other.tokenContractSystemName_ != null ? other.tokenContractSystemName_.Clone() : null;
      aelfConsensusContractSystemName_ = other.aelfConsensusContractSystemName_ != null ? other.aelfConsensusContractSystemName_.Clone() : null;
      minimumLockTime_ = other.minimumLockTime_;
      maximumLockTime_ = other.maximumLockTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InitialElectionContractInput Clone() {
      return new InitialElectionContractInput(this);
    }

    /// <summary>Field number for the "vote_contract_system_name" field.</summary>
    public const int VoteContractSystemNameFieldNumber = 1;
    private global::AElf.Hash voteContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash VoteContractSystemName {
      get { return voteContractSystemName_; }
      set {
        voteContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "profit_contract_system_name" field.</summary>
    public const int ProfitContractSystemNameFieldNumber = 2;
    private global::AElf.Hash profitContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash ProfitContractSystemName {
      get { return profitContractSystemName_; }
      set {
        profitContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "token_contract_system_name" field.</summary>
    public const int TokenContractSystemNameFieldNumber = 3;
    private global::AElf.Hash tokenContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash TokenContractSystemName {
      get { return tokenContractSystemName_; }
      set {
        tokenContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "aelf_consensus_contract_system_name" field.</summary>
    public const int AelfConsensusContractSystemNameFieldNumber = 4;
    private global::AElf.Hash aelfConsensusContractSystemName_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash AelfConsensusContractSystemName {
      get { return aelfConsensusContractSystemName_; }
      set {
        aelfConsensusContractSystemName_ = value;
      }
    }

    /// <summary>Field number for the "minimum_lock_time" field.</summary>
    public const int MinimumLockTimeFieldNumber = 5;
    private int minimumLockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumLockTime {
      get { return minimumLockTime_; }
      set {
        minimumLockTime_ = value;
      }
    }

    /// <summary>Field number for the "maximum_lock_time" field.</summary>
    public const int MaximumLockTimeFieldNumber = 6;
    private int maximumLockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumLockTime {
      get { return maximumLockTime_; }
      set {
        maximumLockTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InitialElectionContractInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InitialElectionContractInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VoteContractSystemName, other.VoteContractSystemName)) return false;
      if (!object.Equals(ProfitContractSystemName, other.ProfitContractSystemName)) return false;
      if (!object.Equals(TokenContractSystemName, other.TokenContractSystemName)) return false;
      if (!object.Equals(AelfConsensusContractSystemName, other.AelfConsensusContractSystemName)) return false;
      if (MinimumLockTime != other.MinimumLockTime) return false;
      if (MaximumLockTime != other.MaximumLockTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (voteContractSystemName_ != null) hash ^= VoteContractSystemName.GetHashCode();
      if (profitContractSystemName_ != null) hash ^= ProfitContractSystemName.GetHashCode();
      if (tokenContractSystemName_ != null) hash ^= TokenContractSystemName.GetHashCode();
      if (aelfConsensusContractSystemName_ != null) hash ^= AelfConsensusContractSystemName.GetHashCode();
      if (MinimumLockTime != 0) hash ^= MinimumLockTime.GetHashCode();
      if (MaximumLockTime != 0) hash ^= MaximumLockTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (voteContractSystemName_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VoteContractSystemName);
      }
      if (profitContractSystemName_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ProfitContractSystemName);
      }
      if (tokenContractSystemName_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TokenContractSystemName);
      }
      if (aelfConsensusContractSystemName_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(AelfConsensusContractSystemName);
      }
      if (MinimumLockTime != 0) {
        output.WriteRawTag(40);
        output.WriteSInt32(MinimumLockTime);
      }
      if (MaximumLockTime != 0) {
        output.WriteRawTag(48);
        output.WriteSInt32(MaximumLockTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (voteContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteContractSystemName);
      }
      if (profitContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProfitContractSystemName);
      }
      if (tokenContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TokenContractSystemName);
      }
      if (aelfConsensusContractSystemName_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AelfConsensusContractSystemName);
      }
      if (MinimumLockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MinimumLockTime);
      }
      if (MaximumLockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(MaximumLockTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InitialElectionContractInput other) {
      if (other == null) {
        return;
      }
      if (other.voteContractSystemName_ != null) {
        if (voteContractSystemName_ == null) {
          VoteContractSystemName = new global::AElf.Hash();
        }
        VoteContractSystemName.MergeFrom(other.VoteContractSystemName);
      }
      if (other.profitContractSystemName_ != null) {
        if (profitContractSystemName_ == null) {
          ProfitContractSystemName = new global::AElf.Hash();
        }
        ProfitContractSystemName.MergeFrom(other.ProfitContractSystemName);
      }
      if (other.tokenContractSystemName_ != null) {
        if (tokenContractSystemName_ == null) {
          TokenContractSystemName = new global::AElf.Hash();
        }
        TokenContractSystemName.MergeFrom(other.TokenContractSystemName);
      }
      if (other.aelfConsensusContractSystemName_ != null) {
        if (aelfConsensusContractSystemName_ == null) {
          AelfConsensusContractSystemName = new global::AElf.Hash();
        }
        AelfConsensusContractSystemName.MergeFrom(other.AelfConsensusContractSystemName);
      }
      if (other.MinimumLockTime != 0) {
        MinimumLockTime = other.MinimumLockTime;
      }
      if (other.MaximumLockTime != 0) {
        MaximumLockTime = other.MaximumLockTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (voteContractSystemName_ == null) {
              VoteContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(VoteContractSystemName);
            break;
          }
          case 18: {
            if (profitContractSystemName_ == null) {
              ProfitContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(ProfitContractSystemName);
            break;
          }
          case 26: {
            if (tokenContractSystemName_ == null) {
              TokenContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(TokenContractSystemName);
            break;
          }
          case 34: {
            if (aelfConsensusContractSystemName_ == null) {
              AelfConsensusContractSystemName = new global::AElf.Hash();
            }
            input.ReadMessage(AelfConsensusContractSystemName);
            break;
          }
          case 40: {
            MinimumLockTime = input.ReadSInt32();
            break;
          }
          case 48: {
            MaximumLockTime = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterElectionVotingEventInput : pb::IMessage<RegisterElectionVotingEventInput> {
    private static readonly pb::MessageParser<RegisterElectionVotingEventInput> _parser = new pb::MessageParser<RegisterElectionVotingEventInput>(() => new RegisterElectionVotingEventInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterElectionVotingEventInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterElectionVotingEventInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterElectionVotingEventInput(RegisterElectionVotingEventInput other) : this() {
      lockTimeUnit_ = other.lockTimeUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterElectionVotingEventInput Clone() {
      return new RegisterElectionVotingEventInput(this);
    }

    /// <summary>Field number for the "lock_time_unit" field.</summary>
    public const int LockTimeUnitFieldNumber = 1;
    private int lockTimeUnit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTimeUnit {
      get { return lockTimeUnit_; }
      set {
        lockTimeUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterElectionVotingEventInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterElectionVotingEventInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LockTimeUnit != other.LockTimeUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LockTimeUnit != 0) hash ^= LockTimeUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LockTimeUnit != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(LockTimeUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LockTimeUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LockTimeUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterElectionVotingEventInput other) {
      if (other == null) {
        return;
      }
      if (other.LockTimeUnit != 0) {
        LockTimeUnit = other.LockTimeUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LockTimeUnit = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateTreasuryInput : pb::IMessage<CreateTreasuryInput> {
    private static readonly pb::MessageParser<CreateTreasuryInput> _parser = new pb::MessageParser<CreateTreasuryInput>(() => new CreateTreasuryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateTreasuryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTreasuryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTreasuryInput(CreateTreasuryInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateTreasuryInput Clone() {
      return new CreateTreasuryInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateTreasuryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateTreasuryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateTreasuryInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class RegisterToTreasuryInput : pb::IMessage<RegisterToTreasuryInput> {
    private static readonly pb::MessageParser<RegisterToTreasuryInput> _parser = new pb::MessageParser<RegisterToTreasuryInput>(() => new RegisterToTreasuryInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterToTreasuryInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterToTreasuryInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterToTreasuryInput(RegisterToTreasuryInput other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterToTreasuryInput Clone() {
      return new RegisterToTreasuryInput(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterToTreasuryInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterToTreasuryInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterToTreasuryInput other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class GetTermSnapshotInput : pb::IMessage<GetTermSnapshotInput> {
    private static readonly pb::MessageParser<GetTermSnapshotInput> _parser = new pb::MessageParser<GetTermSnapshotInput>(() => new GetTermSnapshotInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTermSnapshotInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTermSnapshotInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTermSnapshotInput(GetTermSnapshotInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTermSnapshotInput Clone() {
      return new GetTermSnapshotInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTermSnapshotInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTermSnapshotInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTermSnapshotInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateCandidateInformationInput : pb::IMessage<UpdateCandidateInformationInput> {
    private static readonly pb::MessageParser<UpdateCandidateInformationInput> _parser = new pb::MessageParser<UpdateCandidateInformationInput>(() => new UpdateCandidateInformationInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCandidateInformationInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCandidateInformationInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCandidateInformationInput(UpdateCandidateInformationInput other) : this() {
      publicKey_ = other.publicKey_;
      recentlyProducedBlocks_ = other.recentlyProducedBlocks_;
      recentlyMissedTimeSlots_ = other.recentlyMissedTimeSlots_;
      isEvilNode_ = other.isEvilNode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCandidateInformationInput Clone() {
      return new UpdateCandidateInformationInput(this);
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "recently_produced_blocks" field.</summary>
    public const int RecentlyProducedBlocksFieldNumber = 2;
    private long recentlyProducedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecentlyProducedBlocks {
      get { return recentlyProducedBlocks_; }
      set {
        recentlyProducedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "recently_missed_time_slots" field.</summary>
    public const int RecentlyMissedTimeSlotsFieldNumber = 3;
    private long recentlyMissedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RecentlyMissedTimeSlots {
      get { return recentlyMissedTimeSlots_; }
      set {
        recentlyMissedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "is_evil_node" field.</summary>
    public const int IsEvilNodeFieldNumber = 4;
    private bool isEvilNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvilNode {
      get { return isEvilNode_; }
      set {
        isEvilNode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCandidateInformationInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCandidateInformationInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if (RecentlyProducedBlocks != other.RecentlyProducedBlocks) return false;
      if (RecentlyMissedTimeSlots != other.RecentlyMissedTimeSlots) return false;
      if (IsEvilNode != other.IsEvilNode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (RecentlyProducedBlocks != 0L) hash ^= RecentlyProducedBlocks.GetHashCode();
      if (RecentlyMissedTimeSlots != 0L) hash ^= RecentlyMissedTimeSlots.GetHashCode();
      if (IsEvilNode != false) hash ^= IsEvilNode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      if (RecentlyProducedBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(RecentlyProducedBlocks);
      }
      if (RecentlyMissedTimeSlots != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(RecentlyMissedTimeSlots);
      }
      if (IsEvilNode != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsEvilNode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (RecentlyProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RecentlyProducedBlocks);
      }
      if (RecentlyMissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RecentlyMissedTimeSlots);
      }
      if (IsEvilNode != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCandidateInformationInput other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.RecentlyProducedBlocks != 0L) {
        RecentlyProducedBlocks = other.RecentlyProducedBlocks;
      }
      if (other.RecentlyMissedTimeSlots != 0L) {
        RecentlyMissedTimeSlots = other.RecentlyMissedTimeSlots;
      }
      if (other.IsEvilNode != false) {
        IsEvilNode = other.IsEvilNode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 16: {
            RecentlyProducedBlocks = input.ReadSInt64();
            break;
          }
          case 24: {
            RecentlyMissedTimeSlots = input.ReadSInt64();
            break;
          }
          case 32: {
            IsEvilNode = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReleaseTreasuryProfitsInput : pb::IMessage<ReleaseTreasuryProfitsInput> {
    private static readonly pb::MessageParser<ReleaseTreasuryProfitsInput> _parser = new pb::MessageParser<ReleaseTreasuryProfitsInput>(() => new ReleaseTreasuryProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReleaseTreasuryProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseTreasuryProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseTreasuryProfitsInput(ReleaseTreasuryProfitsInput other) : this() {
      termNumber_ = other.termNumber_;
      minedBlocks_ = other.minedBlocks_;
      roundNumber_ = other.roundNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReleaseTreasuryProfitsInput Clone() {
      return new ReleaseTreasuryProfitsInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "mined_blocks" field.</summary>
    public const int MinedBlocksFieldNumber = 2;
    private long minedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinedBlocks {
      get { return minedBlocks_; }
      set {
        minedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "round_number" field.</summary>
    public const int RoundNumberFieldNumber = 3;
    private long roundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RoundNumber {
      get { return roundNumber_; }
      set {
        roundNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReleaseTreasuryProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReleaseTreasuryProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (MinedBlocks != other.MinedBlocks) return false;
      if (RoundNumber != other.RoundNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (MinedBlocks != 0L) hash ^= MinedBlocks.GetHashCode();
      if (RoundNumber != 0L) hash ^= RoundNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (MinedBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(MinedBlocks);
      }
      if (RoundNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(RoundNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (MinedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MinedBlocks);
      }
      if (RoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(RoundNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReleaseTreasuryProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.MinedBlocks != 0L) {
        MinedBlocks = other.MinedBlocks;
      }
      if (other.RoundNumber != 0L) {
        RoundNumber = other.RoundNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            MinedBlocks = input.ReadSInt64();
            break;
          }
          case 24: {
            RoundNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AnnounceElectionInput : pb::IMessage<AnnounceElectionInput> {
    private static readonly pb::MessageParser<AnnounceElectionInput> _parser = new pb::MessageParser<AnnounceElectionInput>(() => new AnnounceElectionInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AnnounceElectionInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnounceElectionInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnounceElectionInput(AnnounceElectionInput other) : this() {
      alias_ = other.alias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AnnounceElectionInput Clone() {
      return new AnnounceElectionInput(this);
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 1;
    private string alias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AnnounceElectionInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AnnounceElectionInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Alias != other.Alias) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alias.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Alias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AnnounceElectionInput other) {
      if (other == null) {
        return;
      }
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class VoteMinerInput : pb::IMessage<VoteMinerInput> {
    private static readonly pb::MessageParser<VoteMinerInput> _parser = new pb::MessageParser<VoteMinerInput>(() => new VoteMinerInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VoteMinerInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinerInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinerInput(VoteMinerInput other) : this() {
      candidatePublicKey_ = other.candidatePublicKey_;
      amount_ = other.amount_;
      lockTime_ = other.lockTime_;
      lockTimeUnit_ = other.lockTimeUnit_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VoteMinerInput Clone() {
      return new VoteMinerInput(this);
    }

    /// <summary>Field number for the "candidate_publicKey" field.</summary>
    public const int CandidatePublicKeyFieldNumber = 1;
    private string candidatePublicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CandidatePublicKey {
      get { return candidatePublicKey_; }
      set {
        candidatePublicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "lockTime" field.</summary>
    public const int LockTimeFieldNumber = 3;
    private int lockTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    /// <summary>Field number for the "lock_time_unit" field.</summary>
    public const int LockTimeUnitFieldNumber = 4;
    private global::AElf.TimeUnit lockTimeUnit_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.TimeUnit LockTimeUnit {
      get { return lockTimeUnit_; }
      set {
        lockTimeUnit_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VoteMinerInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VoteMinerInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CandidatePublicKey != other.CandidatePublicKey) return false;
      if (Amount != other.Amount) return false;
      if (LockTime != other.LockTime) return false;
      if (LockTimeUnit != other.LockTimeUnit) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CandidatePublicKey.Length != 0) hash ^= CandidatePublicKey.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      if (LockTimeUnit != 0) hash ^= LockTimeUnit.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CandidatePublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CandidatePublicKey);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Amount);
      }
      if (LockTime != 0) {
        output.WriteRawTag(24);
        output.WriteSInt32(LockTime);
      }
      if (LockTimeUnit != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) LockTimeUnit);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CandidatePublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CandidatePublicKey);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (LockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LockTime);
      }
      if (LockTimeUnit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LockTimeUnit);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VoteMinerInput other) {
      if (other == null) {
        return;
      }
      if (other.CandidatePublicKey.Length != 0) {
        CandidatePublicKey = other.CandidatePublicKey;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
      if (other.LockTimeUnit != 0) {
        LockTimeUnit = other.LockTimeUnit;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CandidatePublicKey = input.ReadString();
            break;
          }
          case 16: {
            Amount = input.ReadSInt64();
            break;
          }
          case 24: {
            LockTime = input.ReadSInt32();
            break;
          }
          case 32: {
            LockTimeUnit = (global::AElf.TimeUnit) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateTermNumberInput : pb::IMessage<UpdateTermNumberInput> {
    private static readonly pb::MessageParser<UpdateTermNumberInput> _parser = new pb::MessageParser<UpdateTermNumberInput>(() => new UpdateTermNumberInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateTermNumberInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTermNumberInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTermNumberInput(UpdateTermNumberInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateTermNumberInput Clone() {
      return new UpdateTermNumberInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateTermNumberInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateTermNumberInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateTermNumberInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetElectionResultInput : pb::IMessage<GetElectionResultInput> {
    private static readonly pb::MessageParser<GetElectionResultInput> _parser = new pb::MessageParser<GetElectionResultInput>(() => new GetElectionResultInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetElectionResultInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetElectionResultInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetElectionResultInput(GetElectionResultInput other) : this() {
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetElectionResultInput Clone() {
      return new GetElectionResultInput(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetElectionResultInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetElectionResultInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetElectionResultInput other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectionResult : pb::IMessage<ElectionResult> {
    private static readonly pb::MessageParser<ElectionResult> _parser = new pb::MessageParser<ElectionResult>(() => new ElectionResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionResult(ElectionResult other) : this() {
      termNumber_ = other.termNumber_;
      results_ = other.results_.Clone();
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionResult Clone() {
      return new ElectionResult(this);
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 1;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_results_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 18);
    private readonly pbc::MapField<string, long> results_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "is_active" field.</summary>
    public const int IsActiveFieldNumber = 3;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TermNumber != other.TermNumber) return false;
      if (!Results.Equals(other.Results)) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      hash ^= Results.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TermNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TermNumber);
      }
      results_.WriteTo(output, _map_results_codec);
      if (IsActive != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      size += results_.CalculateSize(_map_results_codec);
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectionResult other) {
      if (other == null) {
        return;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      results_.Add(other.results_);
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _map_results_codec);
            break;
          }
          case 24: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Votes : pb::IMessage<Votes> {
    private static readonly pb::MessageParser<Votes> _parser = new pb::MessageParser<Votes>(() => new Votes());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Votes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes(Votes other) : this() {
      activeVotesIds_ = other.activeVotesIds_.Clone();
      withdrawnVotesIds_ = other.withdrawnVotesIds_.Clone();
      obtainedActiveVotesIds_ = other.obtainedActiveVotesIds_.Clone();
      obtainedWithdrawnVotesIds_ = other.obtainedWithdrawnVotesIds_.Clone();
      validObtainedVotesAmount_ = other.validObtainedVotesAmount_;
      validVotedVotesAmount_ = other.validVotedVotesAmount_;
      allObtainedVotesAmount_ = other.allObtainedVotesAmount_;
      allVotedVotesAmount_ = other.allVotedVotesAmount_;
      publicKey_ = other.publicKey_;
      activeVotesRecords_ = other.activeVotesRecords_.Clone();
      withdrawnVotesRecords_ = other.withdrawnVotesRecords_.Clone();
      obtainedActiveVotesRecords_ = other.obtainedActiveVotesRecords_.Clone();
      obtainedWithdrawnVotesRecords_ = other.obtainedWithdrawnVotesRecords_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Votes Clone() {
      return new Votes(this);
    }

    /// <summary>Field number for the "active_votes_ids" field.</summary>
    public const int ActiveVotesIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_activeVotesIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> activeVotesIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ActiveVotesIds {
      get { return activeVotesIds_; }
    }

    /// <summary>Field number for the "withdrawn_votes_ids" field.</summary>
    public const int WithdrawnVotesIdsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_withdrawnVotesIds_codec
        = pb::FieldCodec.ForMessage(18, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> withdrawnVotesIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> WithdrawnVotesIds {
      get { return withdrawnVotesIds_; }
    }

    /// <summary>Field number for the "obtained_active_votes_ids" field.</summary>
    public const int ObtainedActiveVotesIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_obtainedActiveVotesIds_codec
        = pb::FieldCodec.ForMessage(26, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> obtainedActiveVotesIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ObtainedActiveVotesIds {
      get { return obtainedActiveVotesIds_; }
    }

    /// <summary>Field number for the "obtained_withdrawn_votes_ids" field.</summary>
    public const int ObtainedWithdrawnVotesIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::AElf.Hash> _repeated_obtainedWithdrawnVotesIds_codec
        = pb::FieldCodec.ForMessage(34, global::AElf.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Hash> obtainedWithdrawnVotesIds_ = new pbc::RepeatedField<global::AElf.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Hash> ObtainedWithdrawnVotesIds {
      get { return obtainedWithdrawnVotesIds_; }
    }

    /// <summary>Field number for the "valid_obtained_votes_amount" field.</summary>
    public const int ValidObtainedVotesAmountFieldNumber = 5;
    private long validObtainedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidObtainedVotesAmount {
      get { return validObtainedVotesAmount_; }
      set {
        validObtainedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "valid_voted_votes_amount" field.</summary>
    public const int ValidVotedVotesAmountFieldNumber = 6;
    private long validVotedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ValidVotedVotesAmount {
      get { return validVotedVotesAmount_; }
      set {
        validVotedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "all_obtained_votes_amount" field.</summary>
    public const int AllObtainedVotesAmountFieldNumber = 7;
    private long allObtainedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllObtainedVotesAmount {
      get { return allObtainedVotesAmount_; }
      set {
        allObtainedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "all_voted_votes_amount" field.</summary>
    public const int AllVotedVotesAmountFieldNumber = 8;
    private long allVotedVotesAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AllVotedVotesAmount {
      get { return allVotedVotesAmount_; }
      set {
        allVotedVotesAmount_ = value;
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 9;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_votes_records" field.</summary>
    public const int ActiveVotesRecordsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::AElf.Kernel.ElectionVotingRecord> _repeated_activeVotesRecords_codec
        = pb::FieldCodec.ForMessage(82, global::AElf.Kernel.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> activeVotesRecords_ = new pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> ActiveVotesRecords {
      get { return activeVotesRecords_; }
    }

    /// <summary>Field number for the "withdrawn_votes_records" field.</summary>
    public const int WithdrawnVotesRecordsFieldNumber = 11;
    private static readonly pb::FieldCodec<global::AElf.Kernel.ElectionVotingRecord> _repeated_withdrawnVotesRecords_codec
        = pb::FieldCodec.ForMessage(90, global::AElf.Kernel.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> withdrawnVotesRecords_ = new pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> WithdrawnVotesRecords {
      get { return withdrawnVotesRecords_; }
    }

    /// <summary>Field number for the "obtained_active_votes_records" field.</summary>
    public const int ObtainedActiveVotesRecordsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::AElf.Kernel.ElectionVotingRecord> _repeated_obtainedActiveVotesRecords_codec
        = pb::FieldCodec.ForMessage(98, global::AElf.Kernel.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> obtainedActiveVotesRecords_ = new pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> ObtainedActiveVotesRecords {
      get { return obtainedActiveVotesRecords_; }
    }

    /// <summary>Field number for the "obtained_withdrawn_votes_records" field.</summary>
    public const int ObtainedWithdrawnVotesRecordsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::AElf.Kernel.ElectionVotingRecord> _repeated_obtainedWithdrawnVotesRecords_codec
        = pb::FieldCodec.ForMessage(106, global::AElf.Kernel.ElectionVotingRecord.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> obtainedWithdrawnVotesRecords_ = new pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.ElectionVotingRecord> ObtainedWithdrawnVotesRecords {
      get { return obtainedWithdrawnVotesRecords_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Votes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Votes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!activeVotesIds_.Equals(other.activeVotesIds_)) return false;
      if(!withdrawnVotesIds_.Equals(other.withdrawnVotesIds_)) return false;
      if(!obtainedActiveVotesIds_.Equals(other.obtainedActiveVotesIds_)) return false;
      if(!obtainedWithdrawnVotesIds_.Equals(other.obtainedWithdrawnVotesIds_)) return false;
      if (ValidObtainedVotesAmount != other.ValidObtainedVotesAmount) return false;
      if (ValidVotedVotesAmount != other.ValidVotedVotesAmount) return false;
      if (AllObtainedVotesAmount != other.AllObtainedVotesAmount) return false;
      if (AllVotedVotesAmount != other.AllVotedVotesAmount) return false;
      if (PublicKey != other.PublicKey) return false;
      if(!activeVotesRecords_.Equals(other.activeVotesRecords_)) return false;
      if(!withdrawnVotesRecords_.Equals(other.withdrawnVotesRecords_)) return false;
      if(!obtainedActiveVotesRecords_.Equals(other.obtainedActiveVotesRecords_)) return false;
      if(!obtainedWithdrawnVotesRecords_.Equals(other.obtainedWithdrawnVotesRecords_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= activeVotesIds_.GetHashCode();
      hash ^= withdrawnVotesIds_.GetHashCode();
      hash ^= obtainedActiveVotesIds_.GetHashCode();
      hash ^= obtainedWithdrawnVotesIds_.GetHashCode();
      if (ValidObtainedVotesAmount != 0L) hash ^= ValidObtainedVotesAmount.GetHashCode();
      if (ValidVotedVotesAmount != 0L) hash ^= ValidVotedVotesAmount.GetHashCode();
      if (AllObtainedVotesAmount != 0L) hash ^= AllObtainedVotesAmount.GetHashCode();
      if (AllVotedVotesAmount != 0L) hash ^= AllVotedVotesAmount.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      hash ^= activeVotesRecords_.GetHashCode();
      hash ^= withdrawnVotesRecords_.GetHashCode();
      hash ^= obtainedActiveVotesRecords_.GetHashCode();
      hash ^= obtainedWithdrawnVotesRecords_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      activeVotesIds_.WriteTo(output, _repeated_activeVotesIds_codec);
      withdrawnVotesIds_.WriteTo(output, _repeated_withdrawnVotesIds_codec);
      obtainedActiveVotesIds_.WriteTo(output, _repeated_obtainedActiveVotesIds_codec);
      obtainedWithdrawnVotesIds_.WriteTo(output, _repeated_obtainedWithdrawnVotesIds_codec);
      if (ValidObtainedVotesAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ValidObtainedVotesAmount);
      }
      if (ValidVotedVotesAmount != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(ValidVotedVotesAmount);
      }
      if (AllObtainedVotesAmount != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(AllObtainedVotesAmount);
      }
      if (AllVotedVotesAmount != 0L) {
        output.WriteRawTag(64);
        output.WriteSInt64(AllVotedVotesAmount);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(74);
        output.WriteBytes(PublicKey);
      }
      activeVotesRecords_.WriteTo(output, _repeated_activeVotesRecords_codec);
      withdrawnVotesRecords_.WriteTo(output, _repeated_withdrawnVotesRecords_codec);
      obtainedActiveVotesRecords_.WriteTo(output, _repeated_obtainedActiveVotesRecords_codec);
      obtainedWithdrawnVotesRecords_.WriteTo(output, _repeated_obtainedWithdrawnVotesRecords_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += activeVotesIds_.CalculateSize(_repeated_activeVotesIds_codec);
      size += withdrawnVotesIds_.CalculateSize(_repeated_withdrawnVotesIds_codec);
      size += obtainedActiveVotesIds_.CalculateSize(_repeated_obtainedActiveVotesIds_codec);
      size += obtainedWithdrawnVotesIds_.CalculateSize(_repeated_obtainedWithdrawnVotesIds_codec);
      if (ValidObtainedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ValidObtainedVotesAmount);
      }
      if (ValidVotedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ValidVotedVotesAmount);
      }
      if (AllObtainedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(AllObtainedVotesAmount);
      }
      if (AllVotedVotesAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(AllVotedVotesAmount);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      size += activeVotesRecords_.CalculateSize(_repeated_activeVotesRecords_codec);
      size += withdrawnVotesRecords_.CalculateSize(_repeated_withdrawnVotesRecords_codec);
      size += obtainedActiveVotesRecords_.CalculateSize(_repeated_obtainedActiveVotesRecords_codec);
      size += obtainedWithdrawnVotesRecords_.CalculateSize(_repeated_obtainedWithdrawnVotesRecords_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Votes other) {
      if (other == null) {
        return;
      }
      activeVotesIds_.Add(other.activeVotesIds_);
      withdrawnVotesIds_.Add(other.withdrawnVotesIds_);
      obtainedActiveVotesIds_.Add(other.obtainedActiveVotesIds_);
      obtainedWithdrawnVotesIds_.Add(other.obtainedWithdrawnVotesIds_);
      if (other.ValidObtainedVotesAmount != 0L) {
        ValidObtainedVotesAmount = other.ValidObtainedVotesAmount;
      }
      if (other.ValidVotedVotesAmount != 0L) {
        ValidVotedVotesAmount = other.ValidVotedVotesAmount;
      }
      if (other.AllObtainedVotesAmount != 0L) {
        AllObtainedVotesAmount = other.AllObtainedVotesAmount;
      }
      if (other.AllVotedVotesAmount != 0L) {
        AllVotedVotesAmount = other.AllVotedVotesAmount;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      activeVotesRecords_.Add(other.activeVotesRecords_);
      withdrawnVotesRecords_.Add(other.withdrawnVotesRecords_);
      obtainedActiveVotesRecords_.Add(other.obtainedActiveVotesRecords_);
      obtainedWithdrawnVotesRecords_.Add(other.obtainedWithdrawnVotesRecords_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            activeVotesIds_.AddEntriesFrom(input, _repeated_activeVotesIds_codec);
            break;
          }
          case 18: {
            withdrawnVotesIds_.AddEntriesFrom(input, _repeated_withdrawnVotesIds_codec);
            break;
          }
          case 26: {
            obtainedActiveVotesIds_.AddEntriesFrom(input, _repeated_obtainedActiveVotesIds_codec);
            break;
          }
          case 34: {
            obtainedWithdrawnVotesIds_.AddEntriesFrom(input, _repeated_obtainedWithdrawnVotesIds_codec);
            break;
          }
          case 40: {
            ValidObtainedVotesAmount = input.ReadSInt64();
            break;
          }
          case 48: {
            ValidVotedVotesAmount = input.ReadSInt64();
            break;
          }
          case 56: {
            AllObtainedVotesAmount = input.ReadSInt64();
            break;
          }
          case 64: {
            AllVotedVotesAmount = input.ReadSInt64();
            break;
          }
          case 74: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 82: {
            activeVotesRecords_.AddEntriesFrom(input, _repeated_activeVotesRecords_codec);
            break;
          }
          case 90: {
            withdrawnVotesRecords_.AddEntriesFrom(input, _repeated_withdrawnVotesRecords_codec);
            break;
          }
          case 98: {
            obtainedActiveVotesRecords_.AddEntriesFrom(input, _repeated_obtainedActiveVotesRecords_codec);
            break;
          }
          case 106: {
            obtainedWithdrawnVotesRecords_.AddEntriesFrom(input, _repeated_obtainedWithdrawnVotesRecords_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateHistory : pb::IMessage<CandidateHistory> {
    private static readonly pb::MessageParser<CandidateHistory> _parser = new pb::MessageParser<CandidateHistory>(() => new CandidateHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateHistory(CandidateHistory other) : this() {
      publicKey_ = other.publicKey_;
      terms_ = other.terms_.Clone();
      producedBlocks_ = other.producedBlocks_;
      missedTimeSlots_ = other.missedTimeSlots_;
      continualAppointmentCount_ = other.continualAppointmentCount_;
      reappointmentCount_ = other.reappointmentCount_;
      aliases_ = other.aliases_.Clone();
      currentAlias_ = other.currentAlias_;
      currentVotesNumber_ = other.currentVotesNumber_;
      announcementTransactionId_ = other.announcementTransactionId_ != null ? other.announcementTransactionId_.Clone() : null;
      isEvilNode_ = other.isEvilNode_;
      state_ = other.state_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateHistory Clone() {
      return new CandidateHistory(this);
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 1;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "terms" field.</summary>
    public const int TermsFieldNumber = 2;
    private static readonly pb::FieldCodec<long> _repeated_terms_codec
        = pb::FieldCodec.ForInt64(18);
    private readonly pbc::RepeatedField<long> terms_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Terms {
      get { return terms_; }
    }

    /// <summary>Field number for the "produced_blocks" field.</summary>
    public const int ProducedBlocksFieldNumber = 3;
    private long producedBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProducedBlocks {
      get { return producedBlocks_; }
      set {
        producedBlocks_ = value;
      }
    }

    /// <summary>Field number for the "missed_time_slots" field.</summary>
    public const int MissedTimeSlotsFieldNumber = 4;
    private long missedTimeSlots_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MissedTimeSlots {
      get { return missedTimeSlots_; }
      set {
        missedTimeSlots_ = value;
      }
    }

    /// <summary>Field number for the "continual_appointment_count" field.</summary>
    public const int ContinualAppointmentCountFieldNumber = 5;
    private long continualAppointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ContinualAppointmentCount {
      get { return continualAppointmentCount_; }
      set {
        continualAppointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "reappointment_count" field.</summary>
    public const int ReappointmentCountFieldNumber = 6;
    private long reappointmentCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ReappointmentCount {
      get { return reappointmentCount_; }
      set {
        reappointmentCount_ = value;
      }
    }

    /// <summary>Field number for the "aliases" field.</summary>
    public const int AliasesFieldNumber = 7;
    private static readonly pb::FieldCodec<string> _repeated_aliases_codec
        = pb::FieldCodec.ForString(58);
    private readonly pbc::RepeatedField<string> aliases_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Aliases {
      get { return aliases_; }
    }

    /// <summary>Field number for the "current_alias" field.</summary>
    public const int CurrentAliasFieldNumber = 8;
    private string currentAlias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentAlias {
      get { return currentAlias_; }
      set {
        currentAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "current_votes_number" field.</summary>
    public const int CurrentVotesNumberFieldNumber = 9;
    private long currentVotesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentVotesNumber {
      get { return currentVotesNumber_; }
      set {
        currentVotesNumber_ = value;
      }
    }

    /// <summary>Field number for the "announcement_transaction_id" field.</summary>
    public const int AnnouncementTransactionIdFieldNumber = 12;
    private global::AElf.Hash announcementTransactionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash AnnouncementTransactionId {
      get { return announcementTransactionId_; }
      set {
        announcementTransactionId_ = value;
      }
    }

    /// <summary>Field number for the "is_evil_node" field.</summary>
    public const int IsEvilNodeFieldNumber = 13;
    private bool isEvilNode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEvilNode {
      get { return isEvilNode_; }
      set {
        isEvilNode_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 14;
    private global::AElf.Kernel.CandidateState state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.CandidateState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicKey != other.PublicKey) return false;
      if(!terms_.Equals(other.terms_)) return false;
      if (ProducedBlocks != other.ProducedBlocks) return false;
      if (MissedTimeSlots != other.MissedTimeSlots) return false;
      if (ContinualAppointmentCount != other.ContinualAppointmentCount) return false;
      if (ReappointmentCount != other.ReappointmentCount) return false;
      if(!aliases_.Equals(other.aliases_)) return false;
      if (CurrentAlias != other.CurrentAlias) return false;
      if (CurrentVotesNumber != other.CurrentVotesNumber) return false;
      if (!object.Equals(AnnouncementTransactionId, other.AnnouncementTransactionId)) return false;
      if (IsEvilNode != other.IsEvilNode) return false;
      if (State != other.State) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      hash ^= terms_.GetHashCode();
      if (ProducedBlocks != 0L) hash ^= ProducedBlocks.GetHashCode();
      if (MissedTimeSlots != 0L) hash ^= MissedTimeSlots.GetHashCode();
      if (ContinualAppointmentCount != 0L) hash ^= ContinualAppointmentCount.GetHashCode();
      if (ReappointmentCount != 0L) hash ^= ReappointmentCount.GetHashCode();
      hash ^= aliases_.GetHashCode();
      if (CurrentAlias.Length != 0) hash ^= CurrentAlias.GetHashCode();
      if (CurrentVotesNumber != 0L) hash ^= CurrentVotesNumber.GetHashCode();
      if (announcementTransactionId_ != null) hash ^= AnnouncementTransactionId.GetHashCode();
      if (IsEvilNode != false) hash ^= IsEvilNode.GetHashCode();
      if (State != 0) hash ^= State.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PublicKey);
      }
      terms_.WriteTo(output, _repeated_terms_codec);
      if (ProducedBlocks != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ContinualAppointmentCount);
      }
      if (ReappointmentCount != 0L) {
        output.WriteRawTag(48);
        output.WriteSInt64(ReappointmentCount);
      }
      aliases_.WriteTo(output, _repeated_aliases_codec);
      if (CurrentAlias.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CurrentAlias);
      }
      if (CurrentVotesNumber != 0L) {
        output.WriteRawTag(72);
        output.WriteSInt64(CurrentVotesNumber);
      }
      if (announcementTransactionId_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(AnnouncementTransactionId);
      }
      if (IsEvilNode != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsEvilNode);
      }
      if (State != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) State);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      size += terms_.CalculateSize(_repeated_terms_codec);
      if (ProducedBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProducedBlocks);
      }
      if (MissedTimeSlots != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(MissedTimeSlots);
      }
      if (ContinualAppointmentCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ContinualAppointmentCount);
      }
      if (ReappointmentCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ReappointmentCount);
      }
      size += aliases_.CalculateSize(_repeated_aliases_codec);
      if (CurrentAlias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentAlias);
      }
      if (CurrentVotesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CurrentVotesNumber);
      }
      if (announcementTransactionId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AnnouncementTransactionId);
      }
      if (IsEvilNode != false) {
        size += 1 + 1;
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateHistory other) {
      if (other == null) {
        return;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      terms_.Add(other.terms_);
      if (other.ProducedBlocks != 0L) {
        ProducedBlocks = other.ProducedBlocks;
      }
      if (other.MissedTimeSlots != 0L) {
        MissedTimeSlots = other.MissedTimeSlots;
      }
      if (other.ContinualAppointmentCount != 0L) {
        ContinualAppointmentCount = other.ContinualAppointmentCount;
      }
      if (other.ReappointmentCount != 0L) {
        ReappointmentCount = other.ReappointmentCount;
      }
      aliases_.Add(other.aliases_);
      if (other.CurrentAlias.Length != 0) {
        CurrentAlias = other.CurrentAlias;
      }
      if (other.CurrentVotesNumber != 0L) {
        CurrentVotesNumber = other.CurrentVotesNumber;
      }
      if (other.announcementTransactionId_ != null) {
        if (announcementTransactionId_ == null) {
          AnnouncementTransactionId = new global::AElf.Hash();
        }
        AnnouncementTransactionId.MergeFrom(other.AnnouncementTransactionId);
      }
      if (other.IsEvilNode != false) {
        IsEvilNode = other.IsEvilNode;
      }
      if (other.State != 0) {
        State = other.State;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PublicKey = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            terms_.AddEntriesFrom(input, _repeated_terms_codec);
            break;
          }
          case 24: {
            ProducedBlocks = input.ReadSInt64();
            break;
          }
          case 32: {
            MissedTimeSlots = input.ReadSInt64();
            break;
          }
          case 40: {
            ContinualAppointmentCount = input.ReadSInt64();
            break;
          }
          case 48: {
            ReappointmentCount = input.ReadSInt64();
            break;
          }
          case 58: {
            aliases_.AddEntriesFrom(input, _repeated_aliases_codec);
            break;
          }
          case 66: {
            CurrentAlias = input.ReadString();
            break;
          }
          case 72: {
            CurrentVotesNumber = input.ReadSInt64();
            break;
          }
          case 98: {
            if (announcementTransactionId_ == null) {
              AnnouncementTransactionId = new global::AElf.Hash();
            }
            input.ReadMessage(AnnouncementTransactionId);
            break;
          }
          case 104: {
            IsEvilNode = input.ReadBool();
            break;
          }
          case 112: {
            State = (global::AElf.Kernel.CandidateState) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectionVotingRecord : pb::IMessage<ElectionVotingRecord> {
    private static readonly pb::MessageParser<ElectionVotingRecord> _parser = new pb::MessageParser<ElectionVotingRecord>(() => new ElectionVotingRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectionVotingRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionVotingRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionVotingRecord(ElectionVotingRecord other) : this() {
      voter_ = other.voter_ != null ? other.voter_.Clone() : null;
      candidate_ = other.candidate_;
      amount_ = other.amount_;
      termNumber_ = other.termNumber_;
      voteId_ = other.voteId_ != null ? other.voteId_.Clone() : null;
      lockTime_ = other.lockTime_;
      unlockTimestamp_ = other.unlockTimestamp_ != null ? other.unlockTimestamp_.Clone() : null;
      withdrawTimestamp_ = other.withdrawTimestamp_ != null ? other.withdrawTimestamp_.Clone() : null;
      voteTimestamp_ = other.voteTimestamp_ != null ? other.voteTimestamp_.Clone() : null;
      isWithdrawn_ = other.isWithdrawn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionVotingRecord Clone() {
      return new ElectionVotingRecord(this);
    }

    /// <summary>Field number for the "voter" field.</summary>
    public const int VoterFieldNumber = 1;
    private global::AElf.Address voter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Address Voter {
      get { return voter_; }
      set {
        voter_ = value;
      }
    }

    /// <summary>Field number for the "candidate" field.</summary>
    public const int CandidateFieldNumber = 2;
    private string candidate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Candidate {
      get { return candidate_; }
      set {
        candidate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 3;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    /// <summary>Field number for the "term_number" field.</summary>
    public const int TermNumberFieldNumber = 4;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    /// <summary>Field number for the "vote_id" field.</summary>
    public const int VoteIdFieldNumber = 5;
    private global::AElf.Hash voteId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Hash VoteId {
      get { return voteId_; }
      set {
        voteId_ = value;
      }
    }

    /// <summary>Field number for the "lock_time" field.</summary>
    public const int LockTimeFieldNumber = 7;
    private int lockTime_;
    /// <summary>
    /// Hours
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LockTime {
      get { return lockTime_; }
      set {
        lockTime_ = value;
      }
    }

    /// <summary>Field number for the "unlock_timestamp" field.</summary>
    public const int UnlockTimestampFieldNumber = 10;
    private global::Google.Protobuf.WellKnownTypes.Timestamp unlockTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp UnlockTimestamp {
      get { return unlockTimestamp_; }
      set {
        unlockTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "withdraw_timestamp" field.</summary>
    public const int WithdrawTimestampFieldNumber = 11;
    private global::Google.Protobuf.WellKnownTypes.Timestamp withdrawTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp WithdrawTimestamp {
      get { return withdrawTimestamp_; }
      set {
        withdrawTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "vote_timestamp" field.</summary>
    public const int VoteTimestampFieldNumber = 12;
    private global::Google.Protobuf.WellKnownTypes.Timestamp voteTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp VoteTimestamp {
      get { return voteTimestamp_; }
      set {
        voteTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "is_withdrawn" field.</summary>
    public const int IsWithdrawnFieldNumber = 13;
    private bool isWithdrawn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWithdrawn {
      get { return isWithdrawn_; }
      set {
        isWithdrawn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectionVotingRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectionVotingRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Voter, other.Voter)) return false;
      if (Candidate != other.Candidate) return false;
      if (Amount != other.Amount) return false;
      if (TermNumber != other.TermNumber) return false;
      if (!object.Equals(VoteId, other.VoteId)) return false;
      if (LockTime != other.LockTime) return false;
      if (!object.Equals(UnlockTimestamp, other.UnlockTimestamp)) return false;
      if (!object.Equals(WithdrawTimestamp, other.WithdrawTimestamp)) return false;
      if (!object.Equals(VoteTimestamp, other.VoteTimestamp)) return false;
      if (IsWithdrawn != other.IsWithdrawn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (voter_ != null) hash ^= Voter.GetHashCode();
      if (Candidate.Length != 0) hash ^= Candidate.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (voteId_ != null) hash ^= VoteId.GetHashCode();
      if (LockTime != 0) hash ^= LockTime.GetHashCode();
      if (unlockTimestamp_ != null) hash ^= UnlockTimestamp.GetHashCode();
      if (withdrawTimestamp_ != null) hash ^= WithdrawTimestamp.GetHashCode();
      if (voteTimestamp_ != null) hash ^= VoteTimestamp.GetHashCode();
      if (IsWithdrawn != false) hash ^= IsWithdrawn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (voter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Voter);
      }
      if (Candidate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Candidate);
      }
      if (Amount != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Amount);
      }
      if (TermNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(TermNumber);
      }
      if (voteId_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(VoteId);
      }
      if (LockTime != 0) {
        output.WriteRawTag(56);
        output.WriteSInt32(LockTime);
      }
      if (unlockTimestamp_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(UnlockTimestamp);
      }
      if (withdrawTimestamp_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(WithdrawTimestamp);
      }
      if (voteTimestamp_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(VoteTimestamp);
      }
      if (IsWithdrawn != false) {
        output.WriteRawTag(104);
        output.WriteBool(IsWithdrawn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (voter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Voter);
      }
      if (Candidate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Candidate);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Amount);
      }
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (voteId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteId);
      }
      if (LockTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(LockTime);
      }
      if (unlockTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnlockTimestamp);
      }
      if (withdrawTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WithdrawTimestamp);
      }
      if (voteTimestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VoteTimestamp);
      }
      if (IsWithdrawn != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectionVotingRecord other) {
      if (other == null) {
        return;
      }
      if (other.voter_ != null) {
        if (voter_ == null) {
          Voter = new global::AElf.Address();
        }
        Voter.MergeFrom(other.Voter);
      }
      if (other.Candidate.Length != 0) {
        Candidate = other.Candidate;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      if (other.voteId_ != null) {
        if (voteId_ == null) {
          VoteId = new global::AElf.Hash();
        }
        VoteId.MergeFrom(other.VoteId);
      }
      if (other.LockTime != 0) {
        LockTime = other.LockTime;
      }
      if (other.unlockTimestamp_ != null) {
        if (unlockTimestamp_ == null) {
          UnlockTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        UnlockTimestamp.MergeFrom(other.UnlockTimestamp);
      }
      if (other.withdrawTimestamp_ != null) {
        if (withdrawTimestamp_ == null) {
          WithdrawTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        WithdrawTimestamp.MergeFrom(other.WithdrawTimestamp);
      }
      if (other.voteTimestamp_ != null) {
        if (voteTimestamp_ == null) {
          VoteTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        VoteTimestamp.MergeFrom(other.VoteTimestamp);
      }
      if (other.IsWithdrawn != false) {
        IsWithdrawn = other.IsWithdrawn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (voter_ == null) {
              Voter = new global::AElf.Address();
            }
            input.ReadMessage(Voter);
            break;
          }
          case 18: {
            Candidate = input.ReadString();
            break;
          }
          case 24: {
            Amount = input.ReadSInt64();
            break;
          }
          case 32: {
            TermNumber = input.ReadSInt64();
            break;
          }
          case 42: {
            if (voteId_ == null) {
              VoteId = new global::AElf.Hash();
            }
            input.ReadMessage(VoteId);
            break;
          }
          case 56: {
            LockTime = input.ReadSInt32();
            break;
          }
          case 82: {
            if (unlockTimestamp_ == null) {
              UnlockTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(UnlockTimestamp);
            break;
          }
          case 90: {
            if (withdrawTimestamp_ == null) {
              WithdrawTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(WithdrawTimestamp);
            break;
          }
          case 98: {
            if (voteTimestamp_ == null) {
              VoteTimestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(VoteTimestamp);
            break;
          }
          case 104: {
            IsWithdrawn = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PageableElectionTicketsInfoInput : pb::IMessage<PageableElectionTicketsInfoInput> {
    private static readonly pb::MessageParser<PageableElectionTicketsInfoInput> _parser = new pb::MessageParser<PageableElectionTicketsInfoInput>(() => new PageableElectionTicketsInfoInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageableElectionTicketsInfoInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableElectionTicketsInfoInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableElectionTicketsInfoInput(PageableElectionTicketsInfoInput other) : this() {
      start_ = other.start_;
      length_ = other.length_;
      publicKey_ = other.publicKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageableElectionTicketsInfoInput Clone() {
      return new PageableElectionTicketsInfoInput(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private long length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "publicKey" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private string publicKey_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageableElectionTicketsInfoInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageableElectionTicketsInfoInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      if (PublicKey != other.PublicKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (Length != 0L) hash ^= Length.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Start);
      }
      if (Length != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Length);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(PublicKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Start);
      }
      if (Length != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Length);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PublicKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageableElectionTicketsInfoInput other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.Length != 0L) {
        Length = other.Length;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadSInt64();
            break;
          }
          case 16: {
            Length = input.ReadSInt64();
            break;
          }
          case 26: {
            PublicKey = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PageInfo : pb::IMessage<PageInfo> {
    private static readonly pb::MessageParser<PageInfo> _parser = new pb::MessageParser<PageInfo>(() => new PageInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PageInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo(PageInfo other) : this() {
      start_ = other.start_;
      length_ = other.length_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PageInfo Clone() {
      return new PageInfo(this);
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 1;
    private long start_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { return start_; }
      set {
        start_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 2;
    private long length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PageInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PageInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Start != other.Start) return false;
      if (Length != other.Length) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Start != 0L) hash ^= Start.GetHashCode();
      if (Length != 0L) hash ^= Length.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Start != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(Start);
      }
      if (Length != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Length);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Start != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Start);
      }
      if (Length != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Length);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PageInfo other) {
      if (other == null) {
        return;
      }
      if (other.Start != 0L) {
        Start = other.Start;
      }
      if (other.Length != 0L) {
        Length = other.Length;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Start = input.ReadSInt64();
            break;
          }
          case 16: {
            Length = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateHistoryDictionary : pb::IMessage<CandidateHistoryDictionary> {
    private static readonly pb::MessageParser<CandidateHistoryDictionary> _parser = new pb::MessageParser<CandidateHistoryDictionary>(() => new CandidateHistoryDictionary());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateHistoryDictionary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateHistoryDictionary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateHistoryDictionary(CandidateHistoryDictionary other) : this() {
      maps_ = other.maps_.Clone();
      candidatesNumber_ = other.candidatesNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateHistoryDictionary Clone() {
      return new CandidateHistoryDictionary(this);
    }

    /// <summary>Field number for the "Maps" field.</summary>
    public const int MapsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::AElf.Kernel.CandidateHistory>.Codec _map_maps_codec
        = new pbc::MapField<string, global::AElf.Kernel.CandidateHistory>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::AElf.Kernel.CandidateHistory.Parser), 10);
    private readonly pbc::MapField<string, global::AElf.Kernel.CandidateHistory> maps_ = new pbc::MapField<string, global::AElf.Kernel.CandidateHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::AElf.Kernel.CandidateHistory> Maps {
      get { return maps_; }
    }

    /// <summary>Field number for the "CandidatesNumber" field.</summary>
    public const int CandidatesNumberFieldNumber = 3;
    private long candidatesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CandidatesNumber {
      get { return candidatesNumber_; }
      set {
        candidatesNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateHistoryDictionary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateHistoryDictionary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Maps.Equals(other.Maps)) return false;
      if (CandidatesNumber != other.CandidatesNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Maps.GetHashCode();
      if (CandidatesNumber != 0L) hash ^= CandidatesNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      maps_.WriteTo(output, _map_maps_codec);
      if (CandidatesNumber != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(CandidatesNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += maps_.CalculateSize(_map_maps_codec);
      if (CandidatesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CandidatesNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateHistoryDictionary other) {
      if (other == null) {
        return;
      }
      maps_.Add(other.maps_);
      if (other.CandidatesNumber != 0L) {
        CandidatesNumber = other.CandidatesNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            maps_.AddEntriesFrom(input, _map_maps_codec);
            break;
          }
          case 24: {
            CandidatesNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectionTicketsHistories : pb::IMessage<ElectionTicketsHistories> {
    private static readonly pb::MessageParser<ElectionTicketsHistories> _parser = new pb::MessageParser<ElectionTicketsHistories>(() => new ElectionTicketsHistories());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectionTicketsHistories> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionTicketsHistories() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionTicketsHistories(ElectionTicketsHistories other) : this() {
      values_ = other.values_.Clone();
      historiesNumber_ = other.historiesNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionTicketsHistories Clone() {
      return new ElectionTicketsHistories(this);
    }

    /// <summary>Field number for the "Values" field.</summary>
    public const int ValuesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Kernel.ElectionTicketsHistory> _repeated_values_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Kernel.ElectionTicketsHistory.Parser);
    private readonly pbc::RepeatedField<global::AElf.Kernel.ElectionTicketsHistory> values_ = new pbc::RepeatedField<global::AElf.Kernel.ElectionTicketsHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Kernel.ElectionTicketsHistory> Values {
      get { return values_; }
    }

    /// <summary>Field number for the "HistoriesNumber" field.</summary>
    public const int HistoriesNumberFieldNumber = 2;
    private long historiesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long HistoriesNumber {
      get { return historiesNumber_; }
      set {
        historiesNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectionTicketsHistories);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectionTicketsHistories other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!values_.Equals(other.values_)) return false;
      if (HistoriesNumber != other.HistoriesNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= values_.GetHashCode();
      if (HistoriesNumber != 0L) hash ^= HistoriesNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      values_.WriteTo(output, _repeated_values_codec);
      if (HistoriesNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(HistoriesNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += values_.CalculateSize(_repeated_values_codec);
      if (HistoriesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(HistoriesNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectionTicketsHistories other) {
      if (other == null) {
        return;
      }
      values_.Add(other.values_);
      if (other.HistoriesNumber != 0L) {
        HistoriesNumber = other.HistoriesNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            values_.AddEntriesFrom(input, _repeated_values_codec);
            break;
          }
          case 16: {
            HistoriesNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ElectionTicketsHistory : pb::IMessage<ElectionTicketsHistory> {
    private static readonly pb::MessageParser<ElectionTicketsHistory> _parser = new pb::MessageParser<ElectionTicketsHistory>(() => new ElectionTicketsHistory());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ElectionTicketsHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionTicketsHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionTicketsHistory(ElectionTicketsHistory other) : this() {
      candidateAlias_ = other.candidateAlias_;
      votesNumber_ = other.votesNumber_;
      timestamp_ = other.timestamp_ != null ? other.timestamp_.Clone() : null;
      state_ = other.state_;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ElectionTicketsHistory Clone() {
      return new ElectionTicketsHistory(this);
    }

    /// <summary>Field number for the "CandidateAlias" field.</summary>
    public const int CandidateAliasFieldNumber = 1;
    private string candidateAlias_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CandidateAlias {
      get { return candidateAlias_; }
      set {
        candidateAlias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "VotesNumber" field.</summary>
    public const int VotesNumberFieldNumber = 2;
    private long votesNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long VotesNumber {
      get { return votesNumber_; }
      set {
        votesNumber_ = value;
      }
    }

    /// <summary>Field number for the "Timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private global::Google.Protobuf.WellKnownTypes.Timestamp timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Google.Protobuf.WellKnownTypes.Timestamp Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "State" field.</summary>
    public const int StateFieldNumber = 4;
    private bool state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::AElf.Kernel.ElectionTicketsHistoryType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Kernel.ElectionTicketsHistoryType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ElectionTicketsHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ElectionTicketsHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CandidateAlias != other.CandidateAlias) return false;
      if (VotesNumber != other.VotesNumber) return false;
      if (!object.Equals(Timestamp, other.Timestamp)) return false;
      if (State != other.State) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CandidateAlias.Length != 0) hash ^= CandidateAlias.GetHashCode();
      if (VotesNumber != 0L) hash ^= VotesNumber.GetHashCode();
      if (timestamp_ != null) hash ^= Timestamp.GetHashCode();
      if (State != false) hash ^= State.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CandidateAlias.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CandidateAlias);
      }
      if (VotesNumber != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(VotesNumber);
      }
      if (timestamp_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Timestamp);
      }
      if (State != false) {
        output.WriteRawTag(32);
        output.WriteBool(State);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CandidateAlias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CandidateAlias);
      }
      if (VotesNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(VotesNumber);
      }
      if (timestamp_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Timestamp);
      }
      if (State != false) {
        size += 1 + 1;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ElectionTicketsHistory other) {
      if (other == null) {
        return;
      }
      if (other.CandidateAlias.Length != 0) {
        CandidateAlias = other.CandidateAlias;
      }
      if (other.VotesNumber != 0L) {
        VotesNumber = other.VotesNumber;
      }
      if (other.timestamp_ != null) {
        if (timestamp_ == null) {
          Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
        }
        Timestamp.MergeFrom(other.Timestamp);
      }
      if (other.State != false) {
        State = other.State;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CandidateAlias = input.ReadString();
            break;
          }
          case 16: {
            VotesNumber = input.ReadSInt64();
            break;
          }
          case 26: {
            if (timestamp_ == null) {
              Timestamp = new global::Google.Protobuf.WellKnownTypes.Timestamp();
            }
            input.ReadMessage(Timestamp);
            break;
          }
          case 32: {
            State = input.ReadBool();
            break;
          }
          case 40: {
            Type = (global::AElf.Kernel.ElectionTicketsHistoryType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringInput : pb::IMessage<StringInput> {
    private static readonly pb::MessageParser<StringInput> _parser = new pb::MessageParser<StringInput>(() => new StringInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringInput(StringInput other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringInput Clone() {
      return new StringInput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringInput other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StringOutput : pb::IMessage<StringOutput> {
    private static readonly pb::MessageParser<StringOutput> _parser = new pb::MessageParser<StringOutput>(() => new StringOutput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StringOutput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringOutput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringOutput(StringOutput other) : this() {
      value_ = other.value_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StringOutput Clone() {
      return new StringOutput(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StringOutput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StringOutput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Value != other.Value) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Value.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Value);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StringOutput other) {
      if (other == null) {
        return;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PublicKeysList : pb::IMessage<PublicKeysList> {
    private static readonly pb::MessageParser<PublicKeysList> _parser = new pb::MessageParser<PublicKeysList>(() => new PublicKeysList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PublicKeysList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKeysList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKeysList(PublicKeysList other) : this() {
      value_ = other.value_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PublicKeysList Clone() {
      return new PublicKeysList(this);
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_value_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> value_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Value {
      get { return value_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PublicKeysList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PublicKeysList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!value_.Equals(other.value_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= value_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      value_.WriteTo(output, _repeated_value_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += value_.CalculateSize(_repeated_value_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PublicKeysList other) {
      if (other == null) {
        return;
      }
      value_.Add(other.value_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            value_.AddEntriesFrom(input, _repeated_value_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TermSnapshot : pb::IMessage<TermSnapshot> {
    private static readonly pb::MessageParser<TermSnapshot> _parser = new pb::MessageParser<TermSnapshot>(() => new TermSnapshot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TermSnapshot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Kernel.ElectionReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot(TermSnapshot other) : this() {
      endRoundNumber_ = other.endRoundNumber_;
      totalBlocks_ = other.totalBlocks_;
      candidatesVotes_ = other.candidatesVotes_.Clone();
      termNumber_ = other.termNumber_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TermSnapshot Clone() {
      return new TermSnapshot(this);
    }

    /// <summary>Field number for the "EndRoundNumber" field.</summary>
    public const int EndRoundNumberFieldNumber = 1;
    private long endRoundNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndRoundNumber {
      get { return endRoundNumber_; }
      set {
        endRoundNumber_ = value;
      }
    }

    /// <summary>Field number for the "TotalBlocks" field.</summary>
    public const int TotalBlocksFieldNumber = 2;
    private long totalBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBlocks {
      get { return totalBlocks_; }
      set {
        totalBlocks_ = value;
      }
    }

    /// <summary>Field number for the "CandidatesVotes" field.</summary>
    public const int CandidatesVotesFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_candidatesVotes_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 26);
    private readonly pbc::MapField<string, long> candidatesVotes_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> CandidatesVotes {
      get { return candidatesVotes_; }
    }

    /// <summary>Field number for the "TermNumber" field.</summary>
    public const int TermNumberFieldNumber = 4;
    private long termNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TermNumber {
      get { return termNumber_; }
      set {
        termNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TermSnapshot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TermSnapshot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndRoundNumber != other.EndRoundNumber) return false;
      if (TotalBlocks != other.TotalBlocks) return false;
      if (!CandidatesVotes.Equals(other.CandidatesVotes)) return false;
      if (TermNumber != other.TermNumber) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndRoundNumber != 0L) hash ^= EndRoundNumber.GetHashCode();
      if (TotalBlocks != 0L) hash ^= TotalBlocks.GetHashCode();
      hash ^= CandidatesVotes.GetHashCode();
      if (TermNumber != 0L) hash ^= TermNumber.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndRoundNumber != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(EndRoundNumber);
      }
      if (TotalBlocks != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TotalBlocks);
      }
      candidatesVotes_.WriteTo(output, _map_candidatesVotes_codec);
      if (TermNumber != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(TermNumber);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndRoundNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndRoundNumber);
      }
      if (TotalBlocks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalBlocks);
      }
      size += candidatesVotes_.CalculateSize(_map_candidatesVotes_codec);
      if (TermNumber != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TermNumber);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TermSnapshot other) {
      if (other == null) {
        return;
      }
      if (other.EndRoundNumber != 0L) {
        EndRoundNumber = other.EndRoundNumber;
      }
      if (other.TotalBlocks != 0L) {
        TotalBlocks = other.TotalBlocks;
      }
      candidatesVotes_.Add(other.candidatesVotes_);
      if (other.TermNumber != 0L) {
        TermNumber = other.TermNumber;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EndRoundNumber = input.ReadSInt64();
            break;
          }
          case 16: {
            TotalBlocks = input.ReadSInt64();
            break;
          }
          case 26: {
            candidatesVotes_.AddEntriesFrom(input, _map_candidatesVotes_codec);
            break;
          }
          case 32: {
            TermNumber = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
