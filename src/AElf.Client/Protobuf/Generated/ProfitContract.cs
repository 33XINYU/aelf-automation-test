// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: profit_contract.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace AElf.Client.Profit {

  /// <summary>Holder for reflection information generated from profit_contract.proto</summary>
  public static partial class ProfitContractReflection {

    #region Descriptor
    /// <summary>File descriptor for profit_contract.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProfitContractReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVwcm9maXRfY29udHJhY3QucHJvdG8aDGNsaWVudC5wcm90byI0ChBDcmVh",
            "dGVkU2NoZW1lSWRzEiAKCnNjaGVtZV9pZHMYASADKAsyDC5jbGllbnQuSGFz",
            "aCI9ChlHZXRNYW5hZ2luZ1NjaGVtZUlkc0lucHV0EiAKB21hbmFnZXIYASAB",
            "KAsyDy5jbGllbnQuQWRkcmVzcyJJChZTY2hlbWVCZW5lZmljaWFyeVNoYXJl",
            "Eh8KCXNjaGVtZV9pZBgBIAEoCzIMLmNsaWVudC5IYXNoEg4KBnNoYXJlcxgC",
            "IAEoEiLfBAoGU2NoZW1lEigKD3ZpcnR1YWxfYWRkcmVzcxgBIAEoCzIPLmNs",
            "aWVudC5BZGRyZXNzEhQKDHRvdGFsX3NoYXJlcxgCIAEoEhJAChV1bmRpc3Ry",
            "aWJ1dGVkX3Byb2ZpdHMYAyADKAsyIS5TY2hlbWUuVW5kaXN0cmlidXRlZFBy",
            "b2ZpdHNFbnRyeRIWCg5jdXJyZW50X3BlcmlvZBgEIAEoEhIsCgtzdWJfc2No",
            "ZW1lcxgFIAMoCzIXLlNjaGVtZUJlbmVmaWNpYXJ5U2hhcmUSKQohcHJvZml0",
            "X3JlY2VpdmluZ19kdWVfcGVyaW9kX2NvdW50GAcgASgSEjQKLGlzX3JlbGVh",
            "c2VfYWxsX2JhbGFuY2VfZXZlcnlfdGltZV9ieV9kZWZhdWx0GAggASgIEh8K",
            "CXNjaGVtZV9pZBgJIAEoCzIMLmNsaWVudC5IYXNoEiUKHWRlbGF5X2Rpc3Ry",
            "aWJ1dGVfcGVyaW9kX2NvdW50GAogASgREkYKGWNhY2hlZF9kZWxheV90b3Rh",
            "bF9zaGFyZXMYCyADKAsyIy5TY2hlbWUuQ2FjaGVkRGVsYXlUb3RhbFNoYXJl",
            "c0VudHJ5EiAKB21hbmFnZXIYDCABKAsyDy5jbGllbnQuQWRkcmVzcxo7ChlV",
            "bmRpc3RyaWJ1dGVkUHJvZml0c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1",
            "ZRgCIAEoEjoCOAEaPQobQ2FjaGVkRGVsYXlUb3RhbFNoYXJlc0VudHJ5EgsK",
            "A2tleRgBIAEoEhINCgV2YWx1ZRgCIAEoEjoCOAEiPwoMU2NoZW1lUGVyaW9k",
            "Eh8KCXNjaGVtZV9pZBgBIAEoCzIMLmNsaWVudC5IYXNoEg4KBnBlcmlvZBgC",
            "IAEoEiK9AQoWRGlzdHJpYnV0ZWRQcm9maXRzSW5mbxIUCgx0b3RhbF9zaGFy",
            "ZXMYASABKBISQgoOcHJvZml0c19hbW91bnQYAiADKAsyKi5EaXN0cmlidXRl",
            "ZFByb2ZpdHNJbmZvLlByb2ZpdHNBbW91bnRFbnRyeRITCgtpc19yZWxlYXNl",
            "ZBgDIAEoCBo0ChJQcm9maXRzQW1vdW50RW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgSOgI4ASJeChVHZXRQcm9maXREZXRhaWxzSW5wdXQSHwoJ",
            "c2NoZW1lX2lkGAEgASgLMgwuY2xpZW50Lkhhc2gSJAoLYmVuZWZpY2lhcnkY",
            "AiABKAsyDy5jbGllbnQuQWRkcmVzcyIvCg1Qcm9maXREZXRhaWxzEh4KB2Rl",
            "dGFpbHMYASADKAsyDS5Qcm9maXREZXRhaWwifwoMUHJvZml0RGV0YWlsEhQK",
            "DHN0YXJ0X3BlcmlvZBgBIAEoEhISCgplbmRfcGVyaW9kGAIgASgSEg4KBnNo",
            "YXJlcxgDIAEoEhIaChJsYXN0X3Byb2ZpdF9wZXJpb2QYBCABKBISGQoRaXNf",
            "d2VpZ2h0X3JlbW92ZWQYBSABKAgiRAoRQ2xhaW1Qcm9maXRzSW5wdXQSHwoJ",
            "c2NoZW1lX2lkGAEgASgLMgwuY2xpZW50Lkhhc2gSDgoGc3ltYm9sGAIgASgJ",
            "QhWqAhJBRWxmLkNsaWVudC5Qcm9maXRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::AElf.Client.Proto.ClientReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.CreatedSchemeIds), global::AElf.Client.Profit.CreatedSchemeIds.Parser, new[]{ "SchemeIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.GetManagingSchemeIdsInput), global::AElf.Client.Profit.GetManagingSchemeIdsInput.Parser, new[]{ "Manager" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.SchemeBeneficiaryShare), global::AElf.Client.Profit.SchemeBeneficiaryShare.Parser, new[]{ "SchemeId", "Shares" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.Scheme), global::AElf.Client.Profit.Scheme.Parser, new[]{ "VirtualAddress", "TotalShares", "UndistributedProfits", "CurrentPeriod", "SubSchemes", "ProfitReceivingDuePeriodCount", "IsReleaseAllBalanceEveryTimeByDefault", "SchemeId", "DelayDistributePeriodCount", "CachedDelayTotalShares", "Manager" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.SchemePeriod), global::AElf.Client.Profit.SchemePeriod.Parser, new[]{ "SchemeId", "Period" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.DistributedProfitsInfo), global::AElf.Client.Profit.DistributedProfitsInfo.Parser, new[]{ "TotalShares", "ProfitsAmount", "IsReleased" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.GetProfitDetailsInput), global::AElf.Client.Profit.GetProfitDetailsInput.Parser, new[]{ "SchemeId", "Beneficiary" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.ProfitDetails), global::AElf.Client.Profit.ProfitDetails.Parser, new[]{ "Details" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.ProfitDetail), global::AElf.Client.Profit.ProfitDetail.Parser, new[]{ "StartPeriod", "EndPeriod", "Shares", "LastProfitPeriod", "IsWeightRemoved" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::AElf.Client.Profit.ClaimProfitsInput), global::AElf.Client.Profit.ClaimProfitsInput.Parser, new[]{ "SchemeId", "Symbol" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///profit_contract
  /// </summary>
  public sealed partial class CreatedSchemeIds : pb::IMessage<CreatedSchemeIds> {
    private static readonly pb::MessageParser<CreatedSchemeIds> _parser = new pb::MessageParser<CreatedSchemeIds>(() => new CreatedSchemeIds());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreatedSchemeIds> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedSchemeIds() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedSchemeIds(CreatedSchemeIds other) : this() {
      schemeIds_ = other.schemeIds_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreatedSchemeIds Clone() {
      return new CreatedSchemeIds(this);
    }

    /// <summary>Field number for the "scheme_ids" field.</summary>
    public const int SchemeIdsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Client.Proto.Hash> _repeated_schemeIds_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Client.Proto.Hash.Parser);
    private readonly pbc::RepeatedField<global::AElf.Client.Proto.Hash> schemeIds_ = new pbc::RepeatedField<global::AElf.Client.Proto.Hash>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Client.Proto.Hash> SchemeIds {
      get { return schemeIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreatedSchemeIds);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreatedSchemeIds other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!schemeIds_.Equals(other.schemeIds_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= schemeIds_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      schemeIds_.WriteTo(output, _repeated_schemeIds_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += schemeIds_.CalculateSize(_repeated_schemeIds_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreatedSchemeIds other) {
      if (other == null) {
        return;
      }
      schemeIds_.Add(other.schemeIds_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            schemeIds_.AddEntriesFrom(input, _repeated_schemeIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetManagingSchemeIdsInput : pb::IMessage<GetManagingSchemeIdsInput> {
    private static readonly pb::MessageParser<GetManagingSchemeIdsInput> _parser = new pb::MessageParser<GetManagingSchemeIdsInput>(() => new GetManagingSchemeIdsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetManagingSchemeIdsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetManagingSchemeIdsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetManagingSchemeIdsInput(GetManagingSchemeIdsInput other) : this() {
      manager_ = other.manager_ != null ? other.manager_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetManagingSchemeIdsInput Clone() {
      return new GetManagingSchemeIdsInput(this);
    }

    /// <summary>Field number for the "manager" field.</summary>
    public const int ManagerFieldNumber = 1;
    private global::AElf.Client.Proto.Address manager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Address Manager {
      get { return manager_; }
      set {
        manager_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetManagingSchemeIdsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetManagingSchemeIdsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Manager, other.Manager)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (manager_ != null) hash ^= Manager.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (manager_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Manager);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (manager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetManagingSchemeIdsInput other) {
      if (other == null) {
        return;
      }
      if (other.manager_ != null) {
        if (manager_ == null) {
          Manager = new global::AElf.Client.Proto.Address();
        }
        Manager.MergeFrom(other.Manager);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (manager_ == null) {
              Manager = new global::AElf.Client.Proto.Address();
            }
            input.ReadMessage(Manager);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SchemeBeneficiaryShare : pb::IMessage<SchemeBeneficiaryShare> {
    private static readonly pb::MessageParser<SchemeBeneficiaryShare> _parser = new pb::MessageParser<SchemeBeneficiaryShare>(() => new SchemeBeneficiaryShare());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemeBeneficiaryShare> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeBeneficiaryShare() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeBeneficiaryShare(SchemeBeneficiaryShare other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      shares_ = other.shares_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemeBeneficiaryShare Clone() {
      return new SchemeBeneficiaryShare(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Client.Proto.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 2;
    private long shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Shares {
      get { return shares_; }
      set {
        shares_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemeBeneficiaryShare);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemeBeneficiaryShare other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Shares != other.Shares) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Shares != 0L) hash ^= Shares.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Shares != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Shares);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Shares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Shares);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemeBeneficiaryShare other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Client.Proto.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Shares != 0L) {
        Shares = other.Shares;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Client.Proto.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 16: {
            Shares = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Scheme : pb::IMessage<Scheme> {
    private static readonly pb::MessageParser<Scheme> _parser = new pb::MessageParser<Scheme>(() => new Scheme());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Scheme> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scheme() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scheme(Scheme other) : this() {
      virtualAddress_ = other.virtualAddress_ != null ? other.virtualAddress_.Clone() : null;
      totalShares_ = other.totalShares_;
      undistributedProfits_ = other.undistributedProfits_.Clone();
      currentPeriod_ = other.currentPeriod_;
      subSchemes_ = other.subSchemes_.Clone();
      profitReceivingDuePeriodCount_ = other.profitReceivingDuePeriodCount_;
      isReleaseAllBalanceEveryTimeByDefault_ = other.isReleaseAllBalanceEveryTimeByDefault_;
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      delayDistributePeriodCount_ = other.delayDistributePeriodCount_;
      cachedDelayTotalShares_ = other.cachedDelayTotalShares_.Clone();
      manager_ = other.manager_ != null ? other.manager_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Scheme Clone() {
      return new Scheme(this);
    }

    /// <summary>Field number for the "virtual_address" field.</summary>
    public const int VirtualAddressFieldNumber = 1;
    private global::AElf.Client.Proto.Address virtualAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Address VirtualAddress {
      get { return virtualAddress_; }
      set {
        virtualAddress_ = value;
      }
    }

    /// <summary>Field number for the "total_shares" field.</summary>
    public const int TotalSharesFieldNumber = 2;
    private long totalShares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalShares {
      get { return totalShares_; }
      set {
        totalShares_ = value;
      }
    }

    /// <summary>Field number for the "undistributed_profits" field.</summary>
    public const int UndistributedProfitsFieldNumber = 3;
    private static readonly pbc::MapField<string, long>.Codec _map_undistributedProfits_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 26);
    private readonly pbc::MapField<string, long> undistributedProfits_ = new pbc::MapField<string, long>();
    /// <summary>
    /// token symbol -> amount
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> UndistributedProfits {
      get { return undistributedProfits_; }
    }

    /// <summary>Field number for the "current_period" field.</summary>
    public const int CurrentPeriodFieldNumber = 4;
    private long currentPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentPeriod {
      get { return currentPeriod_; }
      set {
        currentPeriod_ = value;
      }
    }

    /// <summary>Field number for the "sub_schemes" field.</summary>
    public const int SubSchemesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::AElf.Client.Profit.SchemeBeneficiaryShare> _repeated_subSchemes_codec
        = pb::FieldCodec.ForMessage(42, global::AElf.Client.Profit.SchemeBeneficiaryShare.Parser);
    private readonly pbc::RepeatedField<global::AElf.Client.Profit.SchemeBeneficiaryShare> subSchemes_ = new pbc::RepeatedField<global::AElf.Client.Profit.SchemeBeneficiaryShare>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Client.Profit.SchemeBeneficiaryShare> SubSchemes {
      get { return subSchemes_; }
    }

    /// <summary>Field number for the "profit_receiving_due_period_count" field.</summary>
    public const int ProfitReceivingDuePeriodCountFieldNumber = 7;
    private long profitReceivingDuePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProfitReceivingDuePeriodCount {
      get { return profitReceivingDuePeriodCount_; }
      set {
        profitReceivingDuePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "is_release_all_balance_every_time_by_default" field.</summary>
    public const int IsReleaseAllBalanceEveryTimeByDefaultFieldNumber = 8;
    private bool isReleaseAllBalanceEveryTimeByDefault_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleaseAllBalanceEveryTimeByDefault {
      get { return isReleaseAllBalanceEveryTimeByDefault_; }
      set {
        isReleaseAllBalanceEveryTimeByDefault_ = value;
      }
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 9;
    private global::AElf.Client.Proto.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "delay_distribute_period_count" field.</summary>
    public const int DelayDistributePeriodCountFieldNumber = 10;
    private int delayDistributePeriodCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DelayDistributePeriodCount {
      get { return delayDistributePeriodCount_; }
      set {
        delayDistributePeriodCount_ = value;
      }
    }

    /// <summary>Field number for the "cached_delay_total_shares" field.</summary>
    public const int CachedDelayTotalSharesFieldNumber = 11;
    private static readonly pbc::MapField<long, long>.Codec _map_cachedDelayTotalShares_codec
        = new pbc::MapField<long, long>.Codec(pb::FieldCodec.ForSInt64(8), pb::FieldCodec.ForSInt64(16), 90);
    private readonly pbc::MapField<long, long> cachedDelayTotalShares_ = new pbc::MapField<long, long>();
    /// <summary>
    /// period -> total shares, max elements count should be delay_distribute_period_count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<long, long> CachedDelayTotalShares {
      get { return cachedDelayTotalShares_; }
    }

    /// <summary>Field number for the "manager" field.</summary>
    public const int ManagerFieldNumber = 12;
    private global::AElf.Client.Proto.Address manager_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Address Manager {
      get { return manager_; }
      set {
        manager_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Scheme);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Scheme other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(VirtualAddress, other.VirtualAddress)) return false;
      if (TotalShares != other.TotalShares) return false;
      if (!UndistributedProfits.Equals(other.UndistributedProfits)) return false;
      if (CurrentPeriod != other.CurrentPeriod) return false;
      if(!subSchemes_.Equals(other.subSchemes_)) return false;
      if (ProfitReceivingDuePeriodCount != other.ProfitReceivingDuePeriodCount) return false;
      if (IsReleaseAllBalanceEveryTimeByDefault != other.IsReleaseAllBalanceEveryTimeByDefault) return false;
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (DelayDistributePeriodCount != other.DelayDistributePeriodCount) return false;
      if (!CachedDelayTotalShares.Equals(other.CachedDelayTotalShares)) return false;
      if (!object.Equals(Manager, other.Manager)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (virtualAddress_ != null) hash ^= VirtualAddress.GetHashCode();
      if (TotalShares != 0L) hash ^= TotalShares.GetHashCode();
      hash ^= UndistributedProfits.GetHashCode();
      if (CurrentPeriod != 0L) hash ^= CurrentPeriod.GetHashCode();
      hash ^= subSchemes_.GetHashCode();
      if (ProfitReceivingDuePeriodCount != 0L) hash ^= ProfitReceivingDuePeriodCount.GetHashCode();
      if (IsReleaseAllBalanceEveryTimeByDefault != false) hash ^= IsReleaseAllBalanceEveryTimeByDefault.GetHashCode();
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (DelayDistributePeriodCount != 0) hash ^= DelayDistributePeriodCount.GetHashCode();
      hash ^= CachedDelayTotalShares.GetHashCode();
      if (manager_ != null) hash ^= Manager.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (virtualAddress_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(VirtualAddress);
      }
      if (TotalShares != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(TotalShares);
      }
      undistributedProfits_.WriteTo(output, _map_undistributedProfits_codec);
      if (CurrentPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(CurrentPeriod);
      }
      subSchemes_.WriteTo(output, _repeated_subSchemes_codec);
      if (ProfitReceivingDuePeriodCount != 0L) {
        output.WriteRawTag(56);
        output.WriteSInt64(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsReleaseAllBalanceEveryTimeByDefault);
      }
      if (schemeId_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(SchemeId);
      }
      if (DelayDistributePeriodCount != 0) {
        output.WriteRawTag(80);
        output.WriteSInt32(DelayDistributePeriodCount);
      }
      cachedDelayTotalShares_.WriteTo(output, _map_cachedDelayTotalShares_codec);
      if (manager_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Manager);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (virtualAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(VirtualAddress);
      }
      if (TotalShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalShares);
      }
      size += undistributedProfits_.CalculateSize(_map_undistributedProfits_codec);
      if (CurrentPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(CurrentPeriod);
      }
      size += subSchemes_.CalculateSize(_repeated_subSchemes_codec);
      if (ProfitReceivingDuePeriodCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ProfitReceivingDuePeriodCount);
      }
      if (IsReleaseAllBalanceEveryTimeByDefault != false) {
        size += 1 + 1;
      }
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (DelayDistributePeriodCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(DelayDistributePeriodCount);
      }
      size += cachedDelayTotalShares_.CalculateSize(_map_cachedDelayTotalShares_codec);
      if (manager_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Manager);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Scheme other) {
      if (other == null) {
        return;
      }
      if (other.virtualAddress_ != null) {
        if (virtualAddress_ == null) {
          VirtualAddress = new global::AElf.Client.Proto.Address();
        }
        VirtualAddress.MergeFrom(other.VirtualAddress);
      }
      if (other.TotalShares != 0L) {
        TotalShares = other.TotalShares;
      }
      undistributedProfits_.Add(other.undistributedProfits_);
      if (other.CurrentPeriod != 0L) {
        CurrentPeriod = other.CurrentPeriod;
      }
      subSchemes_.Add(other.subSchemes_);
      if (other.ProfitReceivingDuePeriodCount != 0L) {
        ProfitReceivingDuePeriodCount = other.ProfitReceivingDuePeriodCount;
      }
      if (other.IsReleaseAllBalanceEveryTimeByDefault != false) {
        IsReleaseAllBalanceEveryTimeByDefault = other.IsReleaseAllBalanceEveryTimeByDefault;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Client.Proto.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.DelayDistributePeriodCount != 0) {
        DelayDistributePeriodCount = other.DelayDistributePeriodCount;
      }
      cachedDelayTotalShares_.Add(other.cachedDelayTotalShares_);
      if (other.manager_ != null) {
        if (manager_ == null) {
          Manager = new global::AElf.Client.Proto.Address();
        }
        Manager.MergeFrom(other.Manager);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (virtualAddress_ == null) {
              VirtualAddress = new global::AElf.Client.Proto.Address();
            }
            input.ReadMessage(VirtualAddress);
            break;
          }
          case 16: {
            TotalShares = input.ReadSInt64();
            break;
          }
          case 26: {
            undistributedProfits_.AddEntriesFrom(input, _map_undistributedProfits_codec);
            break;
          }
          case 32: {
            CurrentPeriod = input.ReadSInt64();
            break;
          }
          case 42: {
            subSchemes_.AddEntriesFrom(input, _repeated_subSchemes_codec);
            break;
          }
          case 56: {
            ProfitReceivingDuePeriodCount = input.ReadSInt64();
            break;
          }
          case 64: {
            IsReleaseAllBalanceEveryTimeByDefault = input.ReadBool();
            break;
          }
          case 74: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Client.Proto.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 80: {
            DelayDistributePeriodCount = input.ReadSInt32();
            break;
          }
          case 90: {
            cachedDelayTotalShares_.AddEntriesFrom(input, _map_cachedDelayTotalShares_codec);
            break;
          }
          case 98: {
            if (manager_ == null) {
              Manager = new global::AElf.Client.Proto.Address();
            }
            input.ReadMessage(Manager);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SchemePeriod : pb::IMessage<SchemePeriod> {
    private static readonly pb::MessageParser<SchemePeriod> _parser = new pb::MessageParser<SchemePeriod>(() => new SchemePeriod());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemePeriod> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemePeriod() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemePeriod(SchemePeriod other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      period_ = other.period_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemePeriod Clone() {
      return new SchemePeriod(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Client.Proto.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "period" field.</summary>
    public const int PeriodFieldNumber = 2;
    private long period_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Period {
      get { return period_; }
      set {
        period_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemePeriod);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemePeriod other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Period != other.Period) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Period != 0L) hash ^= Period.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Period != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Period);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Period != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Period);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemePeriod other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Client.Proto.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Period != 0L) {
        Period = other.Period;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Client.Proto.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 16: {
            Period = input.ReadSInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DistributedProfitsInfo : pb::IMessage<DistributedProfitsInfo> {
    private static readonly pb::MessageParser<DistributedProfitsInfo> _parser = new pb::MessageParser<DistributedProfitsInfo>(() => new DistributedProfitsInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DistributedProfitsInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributedProfitsInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributedProfitsInfo(DistributedProfitsInfo other) : this() {
      totalShares_ = other.totalShares_;
      profitsAmount_ = other.profitsAmount_.Clone();
      isReleased_ = other.isReleased_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DistributedProfitsInfo Clone() {
      return new DistributedProfitsInfo(this);
    }

    /// <summary>Field number for the "total_shares" field.</summary>
    public const int TotalSharesFieldNumber = 1;
    private long totalShares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalShares {
      get { return totalShares_; }
      set {
        totalShares_ = value;
      }
    }

    /// <summary>Field number for the "profits_amount" field.</summary>
    public const int ProfitsAmountFieldNumber = 2;
    private static readonly pbc::MapField<string, long>.Codec _map_profitsAmount_codec
        = new pbc::MapField<string, long>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForSInt64(16), 18);
    private readonly pbc::MapField<string, long> profitsAmount_ = new pbc::MapField<string, long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, long> ProfitsAmount {
      get { return profitsAmount_; }
    }

    /// <summary>Field number for the "is_released" field.</summary>
    public const int IsReleasedFieldNumber = 3;
    private bool isReleased_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsReleased {
      get { return isReleased_; }
      set {
        isReleased_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DistributedProfitsInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DistributedProfitsInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalShares != other.TotalShares) return false;
      if (!ProfitsAmount.Equals(other.ProfitsAmount)) return false;
      if (IsReleased != other.IsReleased) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalShares != 0L) hash ^= TotalShares.GetHashCode();
      hash ^= ProfitsAmount.GetHashCode();
      if (IsReleased != false) hash ^= IsReleased.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TotalShares != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(TotalShares);
      }
      profitsAmount_.WriteTo(output, _map_profitsAmount_codec);
      if (IsReleased != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsReleased);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalShares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(TotalShares);
      }
      size += profitsAmount_.CalculateSize(_map_profitsAmount_codec);
      if (IsReleased != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DistributedProfitsInfo other) {
      if (other == null) {
        return;
      }
      if (other.TotalShares != 0L) {
        TotalShares = other.TotalShares;
      }
      profitsAmount_.Add(other.profitsAmount_);
      if (other.IsReleased != false) {
        IsReleased = other.IsReleased;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalShares = input.ReadSInt64();
            break;
          }
          case 18: {
            profitsAmount_.AddEntriesFrom(input, _map_profitsAmount_codec);
            break;
          }
          case 24: {
            IsReleased = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProfitDetailsInput : pb::IMessage<GetProfitDetailsInput> {
    private static readonly pb::MessageParser<GetProfitDetailsInput> _parser = new pb::MessageParser<GetProfitDetailsInput>(() => new GetProfitDetailsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProfitDetailsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput(GetProfitDetailsInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      beneficiary_ = other.beneficiary_ != null ? other.beneficiary_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProfitDetailsInput Clone() {
      return new GetProfitDetailsInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Client.Proto.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "beneficiary" field.</summary>
    public const int BeneficiaryFieldNumber = 2;
    private global::AElf.Client.Proto.Address beneficiary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Address Beneficiary {
      get { return beneficiary_; }
      set {
        beneficiary_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProfitDetailsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProfitDetailsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (!object.Equals(Beneficiary, other.Beneficiary)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (beneficiary_ != null) hash ^= Beneficiary.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (beneficiary_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Beneficiary);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (beneficiary_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Beneficiary);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProfitDetailsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Client.Proto.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.beneficiary_ != null) {
        if (beneficiary_ == null) {
          Beneficiary = new global::AElf.Client.Proto.Address();
        }
        Beneficiary.MergeFrom(other.Beneficiary);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Client.Proto.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            if (beneficiary_ == null) {
              Beneficiary = new global::AElf.Client.Proto.Address();
            }
            input.ReadMessage(Beneficiary);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfitDetails : pb::IMessage<ProfitDetails> {
    private static readonly pb::MessageParser<ProfitDetails> _parser = new pb::MessageParser<ProfitDetails>(() => new ProfitDetails());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitDetails> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails(ProfitDetails other) : this() {
      details_ = other.details_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetails Clone() {
      return new ProfitDetails(this);
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::AElf.Client.Profit.ProfitDetail> _repeated_details_codec
        = pb::FieldCodec.ForMessage(10, global::AElf.Client.Profit.ProfitDetail.Parser);
    private readonly pbc::RepeatedField<global::AElf.Client.Profit.ProfitDetail> details_ = new pbc::RepeatedField<global::AElf.Client.Profit.ProfitDetail>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::AElf.Client.Profit.ProfitDetail> Details {
      get { return details_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitDetails);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitDetails other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!details_.Equals(other.details_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= details_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      details_.WriteTo(output, _repeated_details_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += details_.CalculateSize(_repeated_details_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitDetails other) {
      if (other == null) {
        return;
      }
      details_.Add(other.details_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            details_.AddEntriesFrom(input, _repeated_details_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProfitDetail : pb::IMessage<ProfitDetail> {
    private static readonly pb::MessageParser<ProfitDetail> _parser = new pb::MessageParser<ProfitDetail>(() => new ProfitDetail());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProfitDetail> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail(ProfitDetail other) : this() {
      startPeriod_ = other.startPeriod_;
      endPeriod_ = other.endPeriod_;
      shares_ = other.shares_;
      lastProfitPeriod_ = other.lastProfitPeriod_;
      isWeightRemoved_ = other.isWeightRemoved_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfitDetail Clone() {
      return new ProfitDetail(this);
    }

    /// <summary>Field number for the "start_period" field.</summary>
    public const int StartPeriodFieldNumber = 1;
    private long startPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartPeriod {
      get { return startPeriod_; }
      set {
        startPeriod_ = value;
      }
    }

    /// <summary>Field number for the "end_period" field.</summary>
    public const int EndPeriodFieldNumber = 2;
    private long endPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndPeriod {
      get { return endPeriod_; }
      set {
        endPeriod_ = value;
      }
    }

    /// <summary>Field number for the "shares" field.</summary>
    public const int SharesFieldNumber = 3;
    private long shares_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Shares {
      get { return shares_; }
      set {
        shares_ = value;
      }
    }

    /// <summary>Field number for the "last_profit_period" field.</summary>
    public const int LastProfitPeriodFieldNumber = 4;
    private long lastProfitPeriod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastProfitPeriod {
      get { return lastProfitPeriod_; }
      set {
        lastProfitPeriod_ = value;
      }
    }

    /// <summary>Field number for the "is_weight_removed" field.</summary>
    public const int IsWeightRemovedFieldNumber = 5;
    private bool isWeightRemoved_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsWeightRemoved {
      get { return isWeightRemoved_; }
      set {
        isWeightRemoved_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProfitDetail);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProfitDetail other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartPeriod != other.StartPeriod) return false;
      if (EndPeriod != other.EndPeriod) return false;
      if (Shares != other.Shares) return false;
      if (LastProfitPeriod != other.LastProfitPeriod) return false;
      if (IsWeightRemoved != other.IsWeightRemoved) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartPeriod != 0L) hash ^= StartPeriod.GetHashCode();
      if (EndPeriod != 0L) hash ^= EndPeriod.GetHashCode();
      if (Shares != 0L) hash ^= Shares.GetHashCode();
      if (LastProfitPeriod != 0L) hash ^= LastProfitPeriod.GetHashCode();
      if (IsWeightRemoved != false) hash ^= IsWeightRemoved.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartPeriod != 0L) {
        output.WriteRawTag(8);
        output.WriteSInt64(StartPeriod);
      }
      if (EndPeriod != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(EndPeriod);
      }
      if (Shares != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(Shares);
      }
      if (LastProfitPeriod != 0L) {
        output.WriteRawTag(32);
        output.WriteSInt64(LastProfitPeriod);
      }
      if (IsWeightRemoved != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsWeightRemoved);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(StartPeriod);
      }
      if (EndPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(EndPeriod);
      }
      if (Shares != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Shares);
      }
      if (LastProfitPeriod != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(LastProfitPeriod);
      }
      if (IsWeightRemoved != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProfitDetail other) {
      if (other == null) {
        return;
      }
      if (other.StartPeriod != 0L) {
        StartPeriod = other.StartPeriod;
      }
      if (other.EndPeriod != 0L) {
        EndPeriod = other.EndPeriod;
      }
      if (other.Shares != 0L) {
        Shares = other.Shares;
      }
      if (other.LastProfitPeriod != 0L) {
        LastProfitPeriod = other.LastProfitPeriod;
      }
      if (other.IsWeightRemoved != false) {
        IsWeightRemoved = other.IsWeightRemoved;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartPeriod = input.ReadSInt64();
            break;
          }
          case 16: {
            EndPeriod = input.ReadSInt64();
            break;
          }
          case 24: {
            Shares = input.ReadSInt64();
            break;
          }
          case 32: {
            LastProfitPeriod = input.ReadSInt64();
            break;
          }
          case 40: {
            IsWeightRemoved = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClaimProfitsInput : pb::IMessage<ClaimProfitsInput> {
    private static readonly pb::MessageParser<ClaimProfitsInput> _parser = new pb::MessageParser<ClaimProfitsInput>(() => new ClaimProfitsInput());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClaimProfitsInput> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::AElf.Client.Profit.ProfitContractReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput(ClaimProfitsInput other) : this() {
      schemeId_ = other.schemeId_ != null ? other.schemeId_.Clone() : null;
      symbol_ = other.symbol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClaimProfitsInput Clone() {
      return new ClaimProfitsInput(this);
    }

    /// <summary>Field number for the "scheme_id" field.</summary>
    public const int SchemeIdFieldNumber = 1;
    private global::AElf.Client.Proto.Hash schemeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::AElf.Client.Proto.Hash SchemeId {
      get { return schemeId_; }
      set {
        schemeId_ = value;
      }
    }

    /// <summary>Field number for the "symbol" field.</summary>
    public const int SymbolFieldNumber = 2;
    private string symbol_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Symbol {
      get { return symbol_; }
      set {
        symbol_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClaimProfitsInput);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClaimProfitsInput other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SchemeId, other.SchemeId)) return false;
      if (Symbol != other.Symbol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (schemeId_ != null) hash ^= SchemeId.GetHashCode();
      if (Symbol.Length != 0) hash ^= Symbol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (schemeId_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SchemeId);
      }
      if (Symbol.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Symbol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (schemeId_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SchemeId);
      }
      if (Symbol.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Symbol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClaimProfitsInput other) {
      if (other == null) {
        return;
      }
      if (other.schemeId_ != null) {
        if (schemeId_ == null) {
          SchemeId = new global::AElf.Client.Proto.Hash();
        }
        SchemeId.MergeFrom(other.SchemeId);
      }
      if (other.Symbol.Length != 0) {
        Symbol = other.Symbol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (schemeId_ == null) {
              SchemeId = new global::AElf.Client.Proto.Hash();
            }
            input.ReadMessage(SchemeId);
            break;
          }
          case 18: {
            Symbol = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
